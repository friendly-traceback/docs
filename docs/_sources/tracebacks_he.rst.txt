
Friendly tracebacks - בעברית
======================================

Friendly שואפת לספק משוב ידידותי יותר כאשר מדובר בחריג
מוגדל ממה שנעשה על ידי Python.
(translated by Google Translate).

Below, we can find some examples. SyntaxError cases, as well as TabError and
IndentationError cases, are shown in a separate page.
Not all cases handled by friendly are included here.

.. note::

     The content of this page is generated by running
     `trb_hebrew.py` located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

Friendly-traceback version: 0.5.13
Python version: 3.9.10



ArithmeticError
---------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_arithmetic_error.py", line 9, in test_Generic
        raise ArithmeticError('error')
    ArithmeticError: error
    
    "ArithmeticError" הוא מחלקת הבסיס לאותם חריגים מובנים
    שמועלות על טעויות חשבוניות שונות.
    זה יוצא דופן שאתה רואה את החריג הזה;
    בדרך כלל, היה צריך להעלות חריג ספציפי יותר.
    
    חריג הועלה בשורה 9 של הקובץ TESTS:\runtime\test_arithmetic_error.py.
    
        4: def test_Generic():
        5:     try:
        6:         # I am not aware of any way in which this error is raised directly
        7:         # Usually, a subclass such as ZeroDivisionError, etc., would
        8:         # likely be raised.
    --> 9:         raise ArithmeticError('error')
       10:     except ArithmeticError as e:

            ArithmeticError:  <class ArithmeticError>
        


AssertionError
--------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_assertion_error.py", line 8, in test_Generic
        raise AssertionError("Fake message")
    AssertionError: Fake message
    
    In Python, the keyword `assert` is used in statements of the form
    `assert condition`, to confirm that `condition` is not `False`,
    nor equivalent to `False` such as an empty list, etc.
    
    If `condition` is `False` or equivalent, an `AssertionError` is raised.
    
    חריג הועלה בשורה 8 של הקובץ TESTS:\runtime\test_assertion_error.py.
    
       4: def test_Generic():
       5:     try:
       6:         # We raise it explicitly, rather than with the keyword assert, since
       7:         # we don't want pytest to rewrite out test.
    -->8:         raise AssertionError("Fake message")
       9:     except AssertionError as e:

            AssertionError:  <class AssertionError>
        


AttributeError
--------------


Attribute from other module
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 325, in test_Attribute_from_other_module
        keyword.pi
    AttributeError: module 'keyword' has no attribute 'pi'
    
        האם התכוונת לאחד המודולים הבאים: `math, cmath`?
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    במקום המודול `keyword`, אולי רצית להשתמש
    התכונה 'pi' של אחד מהמודולים הבאים:
    `math, cmath`.
    
    חריג הועלה בשורה 325 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       321:         assert "Did you mean `math`?" in result
       323:     import cmath
       324:     try:
    -->325:         keyword.pi
                    ^^^^^^^^^^
       326:     except AttributeError as e:

            keyword:  <module keyword> from PYTHON_LIB:\keyword.py
        


Builtin function
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 223, in test_Builtin_function
        len.text
    AttributeError: 'builtin_function_or_method' object has no attribute 'text'
    
        האם התכוונת ל "len (text)"?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    `len` היא פונקציה. אולי התכוונת לכתוב
    `len (text)`
    
    חריג הועלה בשורה 223 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       220: def test_Builtin_function():
       221:     text = 'Hello world!'
       222:     try:
    -->223:         len.text
                    ^^^^^^^^
       224:     except AttributeError as e:

            text:  'Hello world!'
            len:  <builtin function len>
        


Builtin module with no file
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 240, in test_Builtin_module_with_no_file
        sys.foo
    AttributeError: module 'sys' has no attribute 'foo'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    פייתון אומר לנו שאין אובייקט בשם "foo"
    שנמצא במודול `sys`.
    
    חריג הועלה בשורה 240 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       236:     """Issue 116"""
       237:     import sys
       239:     try:
    -->240:         sys.foo
                    ^^^^^^^
       241:     except AttributeError as e:

            sys:  <module sys (builtin)>
        


Circular import
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 359, in test_Circular_import
        import my_turtle1
      File "TESTS:\my_turtle1.py", line 4, in <module>
        a = my_turtle1.something
    AttributeError: partially initialized module 'my_turtle1' has no attribute 'something' (most likely due to a circular import)
    
        האם נתת לתוכנית שלך את אותו שם כמו מודול פייתון?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    אני חושד שהשתמשת בשם 'my_turtle1 .py' עבור התוכנית שלך
    ושאתה גם רוצה לייבא מודול עם אותו שם
    מהספרייה הסטנדרטית של פייתון.
    אם כן, עליך להשתמש בשם אחר לתוכנית שלך.
    
    הביצוע הופסק בשורה 359 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       356:     from friendly_traceback.runtime_errors import stdlib_modules
       357:     stdlib_modules.names.append("my_turtle1")
       358:     try:
    -->359:        import my_turtle1
       360:     except AttributeError as e:

    חריג הועלה בשורה 4 של הקובץ TESTS:\my_turtle1.py.
    
       1: """To test attribute error of partially initialized module."""
       2: import my_turtle1
    -->4: a = my_turtle1.something
              ^^^^^^^^^^^^^^^^^^^^

            my_turtle1:  <module my_turtle1> from TESTS:\my_turtle1.py
        


Circular import b
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 376, in test_Circular_import_b
        import circular_c
      File "TESTS:\circular_c.py", line 4, in <module>
        a = circular_c.something
    AttributeError: partially initialized module 'circular_c' has no attribute 'something' (most likely due to a circular import)
    
        יש לך יבוא מעגלי.
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    פייתון ציין כי המודול "{module}` לא יובא במלואו.
    זה יכול לקרות אם במהלך ביצוע הקוד במודול 'circular_c'
    נעשה ניסיון לייבא את אותו מודול שוב.
    
    הביצוע הופסק בשורה 376 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       374: def test_Circular_import_b():
       375:     try:
    -->376:         import circular_c
       377:     except AttributeError as e:

    חריג הועלה בשורה 4 של הקובץ TESTS:\circular_c.py.
    
       1: # Attribute error for partially initialize module
       2: import circular_c
    -->4: a = circular_c.something
              ^^^^^^^^^^^^^^^^^^^^

            circular_c:  <module circular_c> from TESTS:\circular_c.py
        


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 26, in test_Generic
        A.x  # testing type
    AttributeError: type object 'A' has no attribute 'x'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    לאובייקט 'A' אין תכונה בשם 'x'.
    
    חריג הועלה בשורה 26 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       22:     class A:
       23:         pass
       25:     try:
    -->26:         A.x  # testing type
                   ^^^
       27:     except AttributeError as e:

            A:  <class A> defined in <function test_attribute_error.test_Generic>
        


Generic different frame
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 49, in test_Generic_different_frame
        a.attr
    AttributeError: 'A' object has no attribute 'attr'
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 49 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       45:         return A()
       47:     a = f()
       48:     try:
    -->49:         a.attr
                   ^^^^^^
       50:     except AttributeError as e:

            a:  <A object>
                defined in <function test_attribute_error.test_Generic_different_frame.<locals>.f>
        


Generic instance
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 67, in test_Generic_instance
        a.x
    AttributeError: 'A' object has no attribute 'x'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    לאובייקט 'a' אין תכונה בשם 'x'.
    
    חריג הועלה בשורה 67 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       64:         pass
       65:     a = A()
       66:     try:
    -->67:         a.x
                   ^^^
       68:     except AttributeError as e:

            a:  <A object>
                defined in <function test_attribute_error.test_Generic_instance>
        


Module attribute typo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 144, in test_Module_attribute_typo
        math.cost
    AttributeError: module 'math' has no attribute 'cost'
    
        האם התכוונת ל 'cos'?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    Instead of writing `math.cost`, perhaps you meant to write one of 
    the following names which are attributes of module `math`:
    `cos, cosh`
    
    חריג הועלה בשורה 144 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       139:         assert "Did you mean `ascii_lowercase`" in result
       141:     import math
       143:     try:
    -->144:         math.cost
                    ^^^^^^^^^
       145:     except AttributeError as e:

            math:  <module math (builtin)>
        


Nonetype
~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 183, in test_Nonetype
        a.b
    AttributeError: 'NoneType' object has no attribute 'b'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    אתה מנסה לגשת למאפיין 'b'
    עבור משתנה שערכו 'כלום'(none).
    חריג הועלה בשורה 183 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       180: def test_Nonetype():
       181:     a = None
       182:     try:
    -->183:         a.b
                    ^^^
       184:     except AttributeError as e:

            a:  None
        


Object attribute typo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 83, in test_Object_attribute_typo
        a.appendh(4)
    AttributeError: 'list' object has no attribute 'appendh'
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 83 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       79: def test_Object_attribute_typo():
       80:     #
       81:     try:
       82:         a = [1, 2, 3]
    -->83:         a.appendh(4)
                   ^^^^^^^^^
       84:     except AttributeError as e:

            a:  [1, 2, 3]
        


Perhaps comma
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 203, in test_Perhaps_comma
        a = [abcd
    AttributeError: 'str' object has no attribute 'defg'
    
        האם התכוונת להפריד שמות אובייקטים בפסיק?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    'defg' אינה תכונה של 'abcd'.
    עם זאת, הן "abcd" ו- "defg" הם אובייקטים ידועים.
    אולי כתבת תקופה להפריד בין שני האובייקטים האלה,
    במקום להשתמש בפסיק.
    
    חריג הועלה בשורה 203 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       199:     defg = "world"
       201:     # fmt: off
       202:     try:
    -->203:         a = [abcd
       204:         .defg]
       205:     # fmt: on

            abcd:  'hello'
            defg:  'world'
        


Read only
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 280, in test_Read_only
        f.b = 1
    AttributeError: 'F' object attribute 'b' is read-only
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    Object `f` uses `__slots__` to specify which attributes can
    be changed. The value of attribute `f.b` cannot be changed.
    The only attribute of `f` whose value can be changed is`a`.
    
    חריג הועלה בשורה 280 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       276:         b = 2
       278:     f = F()
       279:     try:
    -->280:         f.b = 1
       281:     except AttributeError as e:

            f:  <F object>
                defined in <function test_attribute_error.test_Read_only>
            f.b:  2
        


Shadow stdlib module
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 165, in test_Shadow_stdlib_module
        turtle.Pen
    AttributeError: module 'turtle' has no attribute 'Pen'
    
        האם נתת לתוכנית שלך את אותו שם כמו מודול פייתון?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    You imported a module named `turtle` from `TESTS:\turtle.py`.
    There is also a module named `turtle` in Python's standard library.
    Perhaps you need to rename your module.
    
    חריג הועלה בשורה 165 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       161: def test_Shadow_stdlib_module():
       162:     import turtle
       164:     try:
    -->165:         turtle.Pen
                    ^^^^^^^^^^
       166:     except AttributeError as e:

            turtle:  <module turtle> from TESTS:\turtle.py
        


Tuple by accident
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 295, in test_Tuple_by_accident
        something.upper()
    AttributeError: 'tuple' object has no attribute 'upper'
    
        כתבת פסיק בטעות?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    `something` הוא צמד (tuple ) המכיל פריט בודד
    אשר אכן מכיל "'upper' 'כתכונה.
    אולי הוספת פסיק נגרר בטעות בסוף השורה
    שם הגדרת את "something".
    
    חריג הועלה בשורה 295 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       292: def test_Tuple_by_accident():
       293:     something = "abc",  # note trailing comma
       294:     try:
    -->295:         something.upper()
                    ^^^^^^^^^^^^^^^
       296:     except AttributeError as e:

            something:  ('abc',)
        


Use builtin
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 99, in test_Use_builtin
        a.length()
    AttributeError: 'list' object has no attribute 'length'
    
        האם התכוונת ל 'len(a)'?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    לאובייקט 'a' אין תכונה בשם 'length'.
    אולי תוכל להשתמש בפונקציה הסטנדרטית  של Python `len` במקום:
    `len(a)`.
    חריג הועלה בשורה 99 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
        95: def test_Use_builtin():
        96:     #
        97:     try:
        98:         a = [1, 2, 3]
    --> 99:         a.length()
                    ^^^^^^^^
       100:     except AttributeError as e:

            a:  [1, 2, 3]
        


Use join with str
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 339, in test_Use_join_with_str
        a = ['a', '2'].join('abc') + ['b', '3'].join('\n')
    AttributeError: 'list' object has no attribute 'join'
    
        האם התכוונת ל ''abc'.join(['a', '2']) `?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    לאובייקט '['a', '2']' אין תכונה בשם 'join'.
    אולי רצית משהו כמו ''abc'.join(['a', '2'])'.
    
    חריג הועלה בשורה 339 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       337: def test_Use_join_with_str():
       338:     try:
    -->339:         a = ['a', '2'].join('abc') + ['b', '3'].join('\n')
                        ^^^^^^^^^^^^^^^
       340:     except AttributeError as e:


Use synonym
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 115, in test_Use_synonym
        a.add(4)
    AttributeError: 'list' object has no attribute 'add'
    
        האם התכוונת ל 'append'?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    לאובייקט 'a' אין תכונה בשם 'add'.
    עם זאת, ל- 'a' יש את התכונות הבאות בעלות משמעויות דומות:
    `append, extend, insert`.
    
    חריג הועלה בשורה 115 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       111: def test_Use_synonym():
       112:     #
       113:     try:
       114:         a = [1, 2, 3]
    -->115:         a.add(4)
                    ^^^^^
       116:     except AttributeError as e:

            a:  [1, 2, 3]
        


Using slots
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 260, in test_Using_slots
        f.b = 1
    AttributeError: 'F' object has no attribute 'b'
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 260 של הקובץ TESTS:\runtime\test_attribute_error.py.
    
       256:         __slots__ = ["a"]
       258:     f = F()
       259:     try:
    -->260:         f.b = 1
       261:     except AttributeError as e:

            f:  <F object>
                defined in <function test_attribute_error.test_Using_slots>
        


FileNotFoundError
-----------------


Directory not found
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 70, in test_Directory_not_found
        open("does_not_exist/file.txt")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist/file.txt'
    
    חריג של 'FileNotFoundError' מציין
    שמנסים לפתוח קובץ שפייתון לא מצא.
    זה יכול להיות בגלל שגיאת כתיב בשם הקובץ.
    
    בתוכנית שלך, שם ה-
    הקובץ שלא ניתן למצוא הוא 'file.txt'.
    does_not_exist
    is not a valid directory.
    
    חריג הועלה בשורה 70 של הקובץ TESTS:\runtime\test_file_not_found_error.py.
    
       68: def test_Directory_not_found():
       69:     try:
    -->70:         open("does_not_exist/file.txt")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       71:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 7, in test_Filename_not_found
        open("does_not_exist")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist'
    
    חריג של 'FileNotFoundError' מציין
    שמנסים לפתוח קובץ שפייתון לא מצא.
    זה יכול להיות בגלל שגיאת כתיב בשם הקובץ.
    
    בתוכנית שלך, שם ה-
    הקובץ שלא ניתן למצוא הוא 'does_not_exist'.
    It was expected to be found in the
    `C:\Users\Andre\github\friendly-traceback\tests` directory.
    אין לי מידע נוסף עבורך.
    
    חריג הועלה בשורה 7 של הקובץ TESTS:\runtime\test_file_not_found_error.py.
    
       5: def test_Filename_not_found():
       6:     try:
    -->7:         open("does_not_exist")
                  ^^^^^^^^^^^^^^^^^^^^^^
       8:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found 2
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 30, in test_Filename_not_found_2
        open("setupp.py")
    FileNotFoundError: [Errno 2] No such file or directory: 'setupp.py'
    
        האם התכוונת ל`setup.py`?
        
    חריג של 'FileNotFoundError' מציין
    שמנסים לפתוח קובץ שפייתון לא מצא.
    זה יכול להיות בגלל שגיאת כתיב בשם הקובץ.
    
    בתוכנית שלך, שם ה-
    הקובץ שלא ניתן למצוא הוא 'setupp.py'.
    It was expected to be found in the
    `C:\Users\Andre\github\friendly-traceback` directory.
    לקובץ `setup.py` יש שם דומה.
    
    חריג הועלה בשורה 30 של הקובץ TESTS:\runtime\test_file_not_found_error.py.
    
       26:     if chdir:
       27:         os.chdir("..")
       29:     try:
    -->30:         open("setupp.py")
                   ^^^^^^^^^^^^^^^^^
       31:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found 3
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 52, in test_Filename_not_found_3
        open("setup.pyg")
    FileNotFoundError: [Errno 2] No such file or directory: 'setup.pyg'
    
        האם התכוונת ל`setup.py`?
        
    חריג של 'FileNotFoundError' מציין
    שמנסים לפתוח קובץ שפייתון לא מצא.
    זה יכול להיות בגלל שגיאת כתיב בשם הקובץ.
    
    בתוכנית שלך, שם ה-
    הקובץ שלא ניתן למצוא הוא 'setup.pyg'.
    It was expected to be found in the
    `C:\Users\Andre\github\friendly-traceback` directory.
    Perhaps you meant one of the following files with similar names:
    `setup.py`, `setup.cfg`
    
    חריג הועלה בשורה 52 של הקובץ TESTS:\runtime\test_file_not_found_error.py.
    
       49:     if chdir:
       50:         os.chdir("..")
       51:     try:
    -->52:         open("setup.pyg")
                   ^^^^^^^^^^^^^^^^^
       53:     except FileNotFoundError as e:

            open:  <builtin function open>
        


ImportError
-----------


Circular import
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 70, in test_Circular_import
        import circular_a
      File "TESTS:\circular_a.py", line 2, in <module>
        import circular_b
      File "TESTS:\circular_b.py", line 2, in <module>
        from circular_a import a
    ImportError: cannot import name 'a' from partially initialized module 'circular_a' (most likely due to a circular import) (C:\Users\Andre\github\friendly-traceback\tests\circular_a.py)
    
    חריג של 'ImportError' מציין כי אובייקט מסוים לא יכול היה
    להיות מיובא ממודול או מחבילה. לרוב, זה קורה
    כי שם האובייקט לא מאוית נכון.
    
    האובייקט שלא ניתן היה לייבא הוא 'a'.
    היכן  שהמודול או החבילה  היו
    צפויים להימצא הוא 'circular_a'.
    
    The problem was likely caused by what is known as a 'circular import'.
    First, Python imported and started executing the code in file
       'TESTS:\runtime\test_import_error.py'.
    which imports module `circular_a`.
    During this process, the code in another file,
       'TESTS:\circular_b.py'
    was executed. However in this last file, an attempt was made
    to import the original module `circular_a`
    a second time, before Python had completed the first import.
    
    הביצוע הופסק בשורה 70 של הקובץ TESTS:\runtime\test_import_error.py.
    
       68: def test_Circular_import():
       69:     try:
    -->70:         import circular_a
       71:     except ImportError as e:

    חריג הועלה בשורה 2 של הקובץ TESTS:\circular_b.py.
    
       1: """File used in for test_circular_import() in test_import_error.py"""
    -->2: from circular_a import a
                     ^


Simple import error
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 56, in test_Simple_import_error
        from math import Pi
    ImportError: cannot import name 'Pi' from 'math' (unknown location)
    
        האם התכוונת ל 'pi'?
        
    חריג של 'ImportError' מציין כי אובייקט מסוים לא יכול היה
    להיות מיובא ממודול או מחבילה. לרוב, זה קורה
    כי שם האובייקט לא מאוית נכון.
    
    אולי התכוונת לייבא 'pi' (מתוך 'math') במקום 'Pi'
    
    חריג הועלה בשורה 56 של הקובץ TESTS:\runtime\test_import_error.py.
    
       52:     multiple_import_on_same_line()
       53:     wrong_case()
       55:     try:
    -->56:         from math import Pi
       57:     except ImportError as e:


IndexError
----------


Assignment
~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 87, in test_Assignment
        a[13] = 1
    IndexError: list assignment index out of range
    
    'IndexError' מתרחש כשאתה מנסה להשיג פריט מרשימה,
    צמד או אובייקט דומה (רצף), ומשתמש באינדקס אשר
    לא קיים; בדרך כלל, זה קורה מכיוון שהאינדקס שאתה נותן
    גדול מאורך הרצף.
    
    You have tried to assign a value to index `13` of `a`,
    רשימה (`list`) of length `10`.
    ערכי האינדקס התקפים של 'a' הם מספרים שלמים הנעים בין
    `-10` עד `9`.
    
    חריג הועלה בשורה 87 של הקובץ TESTS:\runtime\test_index_error.py.
    
       83:         assert "You have tried to assign a value to index `1` of `b`," in result
       84:         assert "a `list` which contains no item." in result
       86:     try:
    -->87:         a[13] = 1
       88:     except IndexError as e:

            a:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        


Empty
~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 46, in test_Empty
        c = a[1]
    IndexError: list index out of range
    
        `a` אינו מכיל פריט.
        
    'IndexError' מתרחש כשאתה מנסה להשיג פריט מרשימה,
    צמד או אובייקט דומה (רצף), ומשתמש באינדקס אשר
    לא קיים; בדרך כלל, זה קורה מכיוון שהאינדקס שאתה נותן
    גדול מאורך הרצף.
    
    ניסית לקבל את הפריט עם האינדקס '1' של 'a',
    רשימה (`list`) שאינו מכיל פריט.
    
    חריג הועלה בשורה 46 של הקובץ TESTS:\runtime\test_index_error.py.
    
       43: def test_Empty():
       44:     a = []
       45:     try:
    -->46:         c = a[1]
                       ^^^^
       47:     except IndexError as e:

            a:  []
        


Long list
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 29, in test_Long_list
        print(a[60], b[0])
    IndexError: list index out of range
    
    'IndexError' מתרחש כשאתה מנסה להשיג פריט מרשימה,
    צמד או אובייקט דומה (רצף), ומשתמש באינדקס אשר
    לא קיים; בדרך כלל, זה קורה מכיוון שהאינדקס שאתה נותן
    גדול מאורך הרצף.
    
    ניסית לקבל את הפריט עם האינדקס '60' של 'a',
    רשימה (`list`) של אורך `40`.
    ערכי האינדקס התקפים של 'a' הם מספרים שלמים הנעים בין
    `-40` עד `39`.
    
    חריג הועלה בשורה 29 של הקובץ TESTS:\runtime\test_index_error.py.
    
       26:     a = list(range(40))
       27:     b = tuple(range(50))
       28:     try:
    -->29:         print(a[60], b[0])
                         ^^^^^
       30:     except IndexError as e:

            a:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...]
                len(a): 40
        
        


Short tuple
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 10, in test_Short_tuple
        print(a[3], b[2])
    IndexError: tuple index out of range
    
        זכור: הפריט הראשון של צמד ('tuple') אינו באינדקס 1 אלא באינדקס 0.
        
    'IndexError' מתרחש כשאתה מנסה להשיג פריט מרשימה,
    צמד או אובייקט דומה (רצף), ומשתמש באינדקס אשר
    לא קיים; בדרך כלל, זה קורה מכיוון שהאינדקס שאתה נותן
    גדול מאורך הרצף.
    
    ניסית לקבל את הפריט עם האינדקס '3' של 'a',
    צמד ('tuple') של אורך `3`.
    ערכי האינדקס התקפים של 'a' הם מספרים שלמים הנעים בין
    `-3` עד `2`.
    
    חריג הועלה בשורה 10 של הקובץ TESTS:\runtime\test_index_error.py.
    
        7:     a = (1, 2, 3)
        8:     b = [1, 2, 3]
        9:     try:
    -->10:         print(a[3], b[2])
                         ^^^^
       11:     except IndexError as e:

            a:  (1, 2, 3)
        


KeyError
--------


ChainMap
~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\collections\__init__.py", line 1008, in pop
        return self.maps[0].pop(key, *args)
    KeyError: 42
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 62, in test_ChainMap
        d.pop(42)
    KeyError: 'Key not found in the first mapping: 42'
    
    'KeyError' נזרק כאשר ערך אינו נמצא כ-
    מפתח במילון או באובייקט דומה.
    
    לא ניתן למצוא את המפתח '42' ב- 'd', אובייקט מסוג 'ChainMap'.
    
    חריג הועלה בשורה 62 של הקובץ TESTS:\runtime\test_key_error.py.
    
       59:     from collections import ChainMap
       60:     d = ChainMap({}, {})
       61:     try:
    -->62:         d.pop(42)
                   ^^^^^^^^^
       63:     except KeyError as e:

            d:  ChainMap({}, {})
            d.pop:  <bound method ChainMap.pop> of ChainMap({}, {})
        


Forgot to convert to string
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 115, in test_Forgot_to_convert_to_string
        print(squares[2])
    KeyError: 2
    
        שכחת להמיר את '2' למחרוזת?
        
    'KeyError' נזרק כאשר ערך אינו נמצא כ-
    מפתח במילון או באובייקט דומה.
    
    לא ניתן למצוא את המפתח `2` במילון (dict) בשם `squares`.
    `squares` מכיל מפתח מחרוזת שזהה ל- `str(2)`.
    אולי שכחת להמיר את המפתח למחרוזת.
    
    חריג הועלה בשורה 115 של הקובץ TESTS:\runtime\test_key_error.py.
    
       112: def test_Forgot_to_convert_to_string():
       113:     squares = {"1": 1, "2": 4, "3": 9}
       114:     try:
    -->115:         print(squares[2])
                          ^^^^^^^^^^
       116:     except KeyError as e:

            squares:  {'1': 1, '2': 4, '3': 9}
        


Generic key error
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 44, in test_Generic_key_error
        d["c"]
    KeyError: 'c'
    
    'KeyError' נזרק כאשר ערך אינו נמצא כ-
    מפתח במילון או באובייקט דומה.
    
    לא ניתן למצוא את המפתח `'c'` במילון (dict) בשם `d`.
    
    חריג הועלה בשורה 44 של הקובץ TESTS:\runtime\test_key_error.py.
    
       41: def test_Generic_key_error():
       42:     d = {"a": 1, "b": 2}
       43:     try:
    -->44:         d["c"]
                   ^^^^^^
       45:     except KeyError as e:

            d:  {'a': 1, 'b': 2}
        


Popitem empty ChainMap
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\collections\__init__.py", line 1001, in popitem
        return self.maps[0].popitem()
    KeyError: 'popitem(): dictionary is empty'
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 26, in test_Popitem_empty_ChainMap
        alpha.popitem()
    KeyError: 'No keys found in the first mapping.'
    
        `alpha` הוא `ChainMap` ריק.
        
    'KeyError' נזרק כאשר ערך אינו נמצא כ-
    מפתח במילון או באובייקט דומה.
    
    ניסית לקבל פריט מתוך 'alpha' שהוא 'ChainMap' ריק.
    
    חריג הועלה בשורה 26 של הקובץ TESTS:\runtime\test_key_error.py.
    
       23:     from collections import ChainMap
       24:     alpha = ChainMap({}, {})
       25:     try:
    -->26:         alpha.popitem()
                   ^^^^^^^^^^^^^^^
       27:     except KeyError as e:

            alpha:  ChainMap({}, {})
            alpha.popitem:  <bound method ChainMap.popitem> of ChainMap({}, {})
        


Popitem empty dict
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 8, in test_Popitem_empty_dict
        d.popitem()
    KeyError: 'popitem(): dictionary is empty'
    
        'd' הוא מילון ('dict') ריק.
        
    'KeyError' נזרק כאשר ערך אינו נמצא כ-
    מפתח במילון או באובייקט דומה.
    
    ניסית לקבל פריט מתוך 'd' שהוא מילון ('dict') ריק.
    
    חריג הועלה בשורה 8 של הקובץ TESTS:\runtime\test_key_error.py.
    
       5: def test_Popitem_empty_dict():
       6:     d = {}
       7:     try:
    -->8:         d.popitem()
                  ^^^^^^^^^^^
       9:     except KeyError as e:

            d:  {}
            d.popitem:  <builtin method popitem of dict object>
        


Similar names
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 145, in test_Similar_names
        a = second["alpha"]
    KeyError: 'alpha'
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    'KeyError' נזרק כאשר ערך אינו נמצא כ-
    מפתח במילון או באובייקט דומה.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 145 של הקובץ TESTS:\runtime\test_key_error.py.
    
       141:         assert ok, diff
       143:     second = {"alpha0": 1, "alpha11": 2, "alpha12": 3}
       144:     try:
    -->145:         a = second["alpha"]
                        ^^^^^^^^^^^^^^^
       146:     except KeyError as e:

            second:  {'alpha0': 1, 'alpha11': 2, 'alpha12': 3}
        


String by mistake
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 98, in test_String_by_mistake
        d["(0, 0)"]
    KeyError: '(0, 0)'
    
        האם המרת את '(0, 0)' למחרוזת בטעות?
        
    'KeyError' נזרק כאשר ערך אינו נמצא כ-
    מפתח במילון או באובייקט דומה.
    
    לא ניתן למצוא את המפתח `'(0, 0)'` במילון (dict) בשם `d`.
    `'(0, 0)'` היא מחרוזת.
    יש מפתח של 'd' שייצוג המחרוזות שלו
    זהה ל- ''(0, 0)''.
    
    חריג הועלה בשורה 98 של הקובץ TESTS:\runtime\test_key_error.py.
    
       94:     chain_map_string_by_mistake()  # do not show in docs
       96:     d = {(0, 0): "origin"}
       97:     try:
    -->98:         d["(0, 0)"]
                   ^^^^^^^^^^^
       99:     except KeyError as e:

            d:  {(0, 0): 'origin'}
        


LookupError
-----------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_lookup_error.py", line 10, in test_Generic
        raise LookupError("Fake message")
    LookupError: Fake message
    
    'LookupError' היא מחלקת הבסיס לחריגים שמועלים
    כאשר המפתח או אינדקס שמשתמשים בהם על מפה או רצף (רשימה,צמד וכדומה) אינם תקפים.
    ניתן גם להעלות אותו ישירות על ידי codecs.lookup ().
    
    חריג הועלה בשורה 10 של הקובץ TESTS:\runtime\test_lookup_error.py.
    
        4: def test_Generic():
        5:     try:
        6:         # LookupError is the base class for KeyError and IndexError.
        7:         # It should normally not be raised by user code,
        8:         # other than possibly codecs.lookup(), which is why we raise
        9:         # it directly here for our example.
    -->10:         raise LookupError("Fake message")
       11:     except LookupError as e:

            LookupError:  <class LookupError>
        


ModuleNotFoundError
-------------------


Need to install module
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 76, in test_Need_to_install_module
        import alphabet
    ModuleNotFoundError: No module named 'alphabet'
    
    חריג `ModuleNotFoundError` נזרק כאשר
    מנסים לייבא מודול שפייתון לא מצא .
    זה יכול להיות בגלל שגיאת כתיב בשם המודול
    או מכיוון שהוא לא מותקן במחשב שלך.
    
    לא ניתן לייבא מודול בשם 'alphabet'.
    אולי אתה צריך להתקין אותו.
    
    חריג הועלה בשורה 76 של הקובץ TESTS:\runtime\test_module_not_found_error.py.
    
       74: def test_Need_to_install_module():
       75:     try:
    -->76:         import alphabet
       77:     except ModuleNotFoundError as e:


Not a package
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 22, in test_Not_a_package
        import os.xxx
    ModuleNotFoundError: No module named 'os.xxx'; 'os' is not a package
    
    חריג `ModuleNotFoundError` נזרק כאשר
    מנסים לייבא מודול שפייתון לא מצא .
    זה יכול להיות בגלל שגיאת כתיב בשם המודול
    או מכיוון שהוא לא מותקן במחשב שלך.
    
    לא ניתן לייבא את 'xxx' מתוך 'os'.
    
    חריג הועלה בשורה 22 של הקובץ TESTS:\runtime\test_module_not_found_error.py.
    
       19: def test_Not_a_package():
       21:     try:
    -->22:         import os.xxx
       23:     except ModuleNotFoundError as e:


Not a package similar name
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 36, in test_Not_a_package_similar_name
        import os.pathh
    ModuleNotFoundError: No module named 'os.pathh'; 'os' is not a package
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    חריג `ModuleNotFoundError` נזרק כאשר
    מנסים לייבא מודול שפייתון לא מצא .
    זה יכול להיות בגלל שגיאת כתיב בשם המודול
    או מכיוון שהוא לא מותקן במחשב שלך.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 36 של הקובץ TESTS:\runtime\test_module_not_found_error.py.
    
       34: def test_Not_a_package_similar_name():
       35:     try:
    -->36:         import os.pathh
       37:     except ModuleNotFoundError as e:


Object not module
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 49, in test_Object_not_module
        import os.open
    ModuleNotFoundError: No module named 'os.open'; 'os' is not a package
    
        האם התכוונת ל-`from os import open`? ('מתוך os יבא open)' ?
        
    חריג `ModuleNotFoundError` נזרק כאשר
    מנסים לייבא מודול שפייתון לא מצא .
    זה יכול להיות בגלל שגיאת כתיב בשם המודול
    או מכיוון שהוא לא מותקן במחשב שלך.
    
    'open' אינו מודול נפרד אלא אובייקט שהוא חלק מ- 'os'.
    
    חריג הועלה בשורה 49 של הקובץ TESTS:\runtime\test_module_not_found_error.py.
    
       47: def test_Object_not_module():
       48:     try:
    -->49:         import os.open
       50:     except ModuleNotFoundError as e:

            open:  <builtin function open>
        


Similar object not module
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 62, in test_Similar_object_not_module
        import os.opend
    ModuleNotFoundError: No module named 'os.opend'; 'os' is not a package
    
        האם התכוונת ל-`from os import open`? ('מתוך os יבוא open)' ?
        
    חריג `ModuleNotFoundError` נזרק כאשר
    מנסים לייבא מודול שפייתון לא מצא .
    זה יכול להיות בגלל שגיאת כתיב בשם המודול
    או מכיוון שהוא לא מותקן במחשב שלך.
    
    אולי התכוונת ל `from os import open`  (מ- os יבא open'.
    ')
    `open` הוא שם הדומה ל- `opend` והוא אובייקט ש
    ניתן לייבא מ 'os'.
    אובייקטים אחרים עם שמות דומים שהם חלק מ
      "os" כלול "popen".
    
    חריג הועלה בשורה 62 של הקובץ TESTS:\runtime\test_module_not_found_error.py.
    
       60: def test_Similar_object_not_module():
       61:     try:
    -->62:         import os.opend
       63:     except ModuleNotFoundError as e:


Standard library module
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 7, in test_Standard_library_module
        import Tkinter
    ModuleNotFoundError: No module named 'Tkinter'
    
        האם התכוונת ל 'tkinter'?
        
    חריג `ModuleNotFoundError` נזרק כאשר
    מנסים לייבא מודול שפייתון לא מצא .
    זה יכול להיות בגלל שגיאת כתיב בשם המודול
    או מכיוון שהוא לא מותקן במחשב שלך.
    
    לא ניתן לייבא מודול בשם 'Tkinter'.
    אולי אתה צריך להתקין אותו.
    "tkinter" הוא מודול קיים בעל שם דומה.
    
    חריג הועלה בשורה 7 של הקובץ TESTS:\runtime\test_module_not_found_error.py.
    
       5: def test_Standard_library_module():
       6:     try:
    -->7:         import Tkinter
       8:     except ModuleNotFoundError as e:


no curses
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 92, in test_no_curses
        import curses
    ModuleNotFoundError: No module named '_curses'
    
        המודול "curses" מותקן לעתים רחוקות עם Python ב- Windows.
        
    חריג `ModuleNotFoundError` נזרק כאשר
    מנסים לייבא מודול שפייתון לא מצא .
    זה יכול להיות בגלל שגיאת כתיב בשם המודול
    או מכיוון שהוא לא מותקן במחשב שלך.
    
    ניסית לייבא את המודול "curses ".
    המודול "curses" מותקן לעתים רחוקות עם Python ב- Windows.
    
    חריג הועלה בשורה 92 של הקובץ TESTS:\runtime\test_module_not_found_error.py.
    
       90:     def test_no_curses():
       91:         try:
    -->92:             import curses
       93:         except ModuleNotFoundError as e:


NameError
---------


Annotated variable
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 25, in test_Annotated_variable
        y = x
    NameError: name 'x' is not defined
    
        האם השתמשת בנקודותיים במקום בסימן שוויון?
        
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    בתוכנית שלך אין אובייקט בשם "x".
    רמז סוג נמצא עבור 'x' בהיקף global.
    אולי השתמשת בנקודותיים במקום בסימן שווה וכתבת
    
         x: 3
    
    במקום
    
         x = 3
    
    חריג הועלה בשורה 25 של הקובץ TESTS:\runtime\test_name_error.py.
    
       23: def test_Annotated_variable():
       24:     try:
    -->25:         y = x
                       ^
       26:     except NameError as e:


Custom name
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 193, in test_Custom_name
        python
    NameError: name 'python' is not defined
    
        אתה כבר משתמש בפייתון!
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    אתה כבר משתמש בפייתון!
    חריג הועלה בשורה 193 של הקובץ TESTS:\runtime\test_name_error.py.
    
       191: def test_Custom_name():
       192:     try:
    -->193:         python
                    ^^^^^^
       194:     except NameError as e:


Free variable referenced
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 177, in test_Free_variable_referenced
        outer()
      File "TESTS:\runtime\test_name_error.py", line 173, in outer
        inner()
      File "TESTS:\runtime\test_name_error.py", line 172, in inner
        return var
    NameError: free variable 'var' referenced before assignment in enclosing scope
    
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    בתוכנית שלך, 'var' הוא שם לא ידוע
    שקיים בהיקף סגור,
    אך עדיין לא הוקצה לו ערך.
    
    הביצוע הופסק בשורה 177 של הקובץ TESTS:\runtime\test_name_error.py.
    
       173:         inner()
       174:         var = 4
       176:     try:
    -->177:         outer()
                    ^^^^^^^
       178:     except NameError as e:

            outer:  <function outer>
                defined in <function test_Free_variable_referenced>
        
    חריג הועלה בשורה 172 של הקובץ TESTS:\runtime\test_name_error.py.
    
       171:         def inner():
    -->172:             return var
                               ^^^


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 10, in test_Generic
        this = something
    NameError: name 'something' is not defined
    
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    בתוכנית שלך אין אובייקט בשם "something".
    אין לי מידע נוסף עבורך.
    
    חריג הועלה בשורה 10 של הקובץ TESTS:\runtime\test_name_error.py.
    
        8: def test_Generic():
        9:     try:
    -->10:         this = something
                          ^^^^^^^^^
       11:     except NameError as e:


Missing import
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 130, in test_Missing_import
        unicodedata.something
    NameError: name 'unicodedata' is not defined
    
        שכחת לייבא את 'unicodedata'?
        
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    
    השם "unicodedata" לא מוגדר בתוכנית שלך.
    אולי שכחת לייבא את 'unicodedata' שנמצא
    בספרייה הסטנדרטית של פייתון.
    
    `unicodedata` is a name found in module `stringprep`.
    Perhaps you forgot to write
    
        from stringprep import unicodedata
    
    חריג הועלה בשורה 130 של הקובץ TESTS:\runtime\test_name_error.py.
    
       126:     if friendly_traceback.get_lang() == "en":
       127:         assert "I have no additional information for you." in result
       129:     try:
    -->130:         unicodedata.something
                    ^^^^^^^^^^^
       131:     except NameError as e:


Missing module name
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 277, in test_Missing_module_name
        frame = Frame()
    NameError: name 'Frame' is not defined
    
        שכחת להוסיף את `tkinter.`?
        
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    בתוכנית שלך אין אובייקט בשם "Frame".
    
    The local object `tkinter`
    has an attribute named `Frame`.
    Perhaps you should have written `tkinter.Frame`
    instead of `Frame`.
    
    `Frame` is a name found in the following modules from the standard library:
    tkinter, tracemalloc.
    Perhaps you forgot to import `Frame` from one of these modules.
    
    חריג הועלה בשורה 277 של הקובץ TESTS:\runtime\test_name_error.py.
    
       274: def test_Missing_module_name():
       275:     import tkinter
       276:     try:
    -->277:         frame = Frame()
                            ^^^^^
       278:     except NameError as e:


Missing self 1
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 228, in test_Missing_self_1
        str(a)
      File "TESTS:\runtime\test_name_error.py", line 219, in __str__
        toys_list = add_toy(  # ensure that it can see 'self' on following line
    NameError: name 'add_toy' is not defined
    
        Did you write `self` at the wrong place?
        
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    בתוכנית שלך אין אובייקט בשם "add_toy".
    
    The local object `<Pet object> defined in <function test_name_error.test_Missing_self_1>`
    has an attribute named `add_toy`.
    Perhaps you should have written `self.add_toy(...`
    instead of `add_toy(self, ...`.
    
    הביצוע הופסק בשורה 228 של הקובץ TESTS:\runtime\test_name_error.py.
    
       224:                 return "{} has no toys".format(self.name)
       226:     a = Pet('Fido')
       227:     try:
    -->228:         str(a)
                    ^^^^^^
       229:     except NameError as e:

            a:  <Pet object>
                defined in <function test_name_error.test_Missing_self_1>
            str:  <class str>
        
    חריג הועלה בשורה 219 של הקובץ TESTS:\runtime\test_name_error.py.
    
       217:         def __str__(self):
       218:             # self at the wrong place
    -->219:             toys_list = add_toy(  # ensure that it can see 'self' on following line
                                    ^^^^^^^
       220:                                 self, 'something')
       221:             if self.toys:


Missing self 2
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 262, in test_Missing_self_2
        str(a)
      File "TESTS:\runtime\test_name_error.py", line 254, in __str__
        toys_list = add_toy('something')
    NameError: name 'add_toy' is not defined
    
        Did you forget to add `self.`?
        
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    בתוכנית שלך אין אובייקט בשם "add_toy".
    
    A local object, `<Pet object> defined in <function test_name_error.test_Missing_self_2>`,
    has an attribute named `add_toy`.
    Perhaps you should have written `self.add_toy`
    instead of `add_toy`.
    
    הביצוע הופסק בשורה 262 של הקובץ TESTS:\runtime\test_name_error.py.
    
       258:                 return "{} has no toys".format(self.name)
       260:     a = Pet('Fido')
       261:     try:
    -->262:         str(a)
                    ^^^^^^
       263:     except NameError as e:

            a:  <Pet object>
                defined in <function test_name_error.test_Missing_self_2>
            str:  <class str>
        
    חריג הועלה בשורה 254 של הקובץ TESTS:\runtime\test_name_error.py.
    
       252:         def __str__(self):
       253:             # Missing self.
    -->254:             toys_list = add_toy('something')
                                    ^^^^^^^
       255:             if self.toys:


Synonym
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 90, in test_Synonym
        cost  # wrote from math import * above
    NameError: name 'cost' is not defined
    
        האם התכוונת ל 'cos'?
        
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    בתוכנית שלך אין אובייקט בשם "cost".
    במקום לכתוב 'cost', אולי התכוונת לאחד מהדברים הבאים:
    * היקף גלובלי `cos`, `cosh`
    
    חריג הועלה בשורה 90 של הקובץ TESTS:\runtime\test_name_error.py.
    
       86:     if friendly_traceback.get_lang() == "en":
       87:         assert "The Python builtin `chr` has a similar name." in result
       89:     try:
    -->90:         cost  # wrote from math import * above
                   ^^^^
       91:     except NameError as e:


missing import2
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 144, in test_missing_import2
        ABCMeta
    NameError: name 'ABCMeta' is not defined
    
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    בתוכנית שלך אין אובייקט בשם "ABCMeta".
    `ABCMeta` is a name found in the following modules from the standard library:
    abc, numbers, selectors, typing.
    Perhaps you forgot to import `ABCMeta` from one of these modules.
    
    חריג הועלה בשורה 144 של הקובץ TESTS:\runtime\test_name_error.py.
    
       142: def test_missing_import2():
       143:     try:
    -->144:         ABCMeta
                    ^^^^^^^
       145:     except NameError as e:


missing import3
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 158, in test_missing_import3
        AF_APPLETALK
    NameError: name 'AF_APPLETALK' is not defined
    
    חריג של 'NamError' מציין כי משתנה או
    הפונקציה אינו ידוע לפייתון.
    לרוב, הסיבה לכך היא שיש טעות כתיב.
    עם זאת, לפעמים זה בגלל שהשם משמש
    לפני שמגדירים אותו או נותנים לו ערך.
    
    בתוכנית שלך אין אובייקט בשם "AF_APPLETALK".
    `AF_APPLETALK` is a name found in module `socket`.
    Perhaps you forgot to write
    
        from socket import AF_APPLETALK
    
    חריג הועלה בשורה 158 של הקובץ TESTS:\runtime\test_name_error.py.
    
       156: def test_missing_import3():
       157:     try:
    -->158:         AF_APPLETALK
                    ^^^^^^^^^^^^
       159:     except NameError as e:


OsError
-------


Urllib error
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\urllib\request.py", line 1346, in do_open
           ... שורות נוספות לא מוצגות. ...
      File "PYTHON_LIB:\socket.py", line 823, in create_connection
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
      File "PYTHON_LIB:\socket.py", line 954, in getaddrinfo
        for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
    socket.gaierror: [Errno 11001] getaddrinfo failed
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 8, in test_Urllib_error
        request.urlopen("http://does_not_exist")
    URLError: <urlopen error [Errno 11001] getaddrinfo failed>
    
    שגיאה מסוג `URLError` היא תת-מחלקה של `OSError`.
    בדרך כלל מערכת ההפעלה מעלה חריג של 'OSError'
    כדי לציין שפעולה אסורה או כי
    משאב אינו זמין.
    
    אני חושד שאתה מנסה להתחבר לשרת ו
    שלא ניתן ליצור קשר.
    
    אם זה המצב, בדוק אם יש שגיאות כתיב בכתובת האתר
    ובדוק את חיבור האינטרנט שלך.
    
    חריג הועלה בשורה 8 של הקובץ TESTS:\runtime\test_os_error.py.
    
       5: def test_Urllib_error():
       6:     from urllib import request, error
       7:     try:
    -->8:         request.urlopen("http://does_not_exist")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       9:     except error.URLError as e:

            request:  <module urllib.request> from PYTHON_LIB:\urllib\request.py
            request.urlopen:  <function urlopen>
        


invalid argument
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 46, in test_invalid_argument
        open("c:\test.txt")
    OSError: [Errno 22] Invalid argument: 'c:\test.txt'
    
        אולי אתה צריך להכפיל את הלוֹכסן האחורי .
        
    בדרך כלל מערכת ההפעלה מעלה חריג של 'OSError'
    כדי לציין שפעולה אסורה או כי
    משאב אינו זמין.
    
    I suspect that you wrote a filename or path that contains
    at least one backslash character, `\`.
    Python likely interpreted this as indicating the beginning of
    what is known as an escape sequence.
    To solve the problem, either write a so-called 'raw string'
    by adding the letter `r` as a prefix in
    front of the filename or path, or replace all single backslash
    characters, `\`, by double ones: `\\`.
    
    חריג הועלה בשורה 46 של הקובץ TESTS:\runtime\test_os_error.py.
    
       43:     if os.name != "nt":
       44:         return "Windows test only", "No result"
       45:     try:
    -->46:         open("c:\test.txt")
                   ^^^^^^^^^^^^^^^^^^^
       47:     except OSError as e:

            open:  <builtin function open>
        


no information
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 27, in test_no_information
        raise OSError("Some unknown message")
    OSError: Some unknown message
    
        מקור השגיאה לא ידוע.
        
    בדרך כלל מערכת ההפעלה מעלה חריג של 'OSError'
    כדי לציין שפעולה אסורה או כי
    משאב אינו זמין.
    
    אין מידע על חריג זה.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    אם אתה משתמש במסוף ידידותי, השתמש ב- 'www ()' כדי
    חפש באינטרנט את המקרה הספציפי הזה.
    
    חריג הועלה בשורה 27 של הקובץ TESTS:\runtime\test_os_error.py.
    
       24:     old_debug = friendly_traceback.debug_helper.DEBUG
       25:     friendly_traceback.debug_helper.DEBUG = False
       26:     try:
    -->27:         raise OSError("Some unknown message")
       28:     except OSError as e:

            OSError:  <class OSError>
        


OverflowError
-------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 6, in test_Generic
        2.0 ** 1600
    OverflowError: (34, 'Result too large')
    
    'OverflowError' מוגבה כאשר התוצאה של פעולה חשבונית
    הוא גדול מכדי שניתן יהיה לטפל בו במעבד המחשב.
    
    חריג הועלה בשורה 6 של הקובץ TESTS:\runtime\test_overflow_error.py.
    
       4: def test_Generic():
       5:     try:
    -->6:         2.0 ** 1600
                  ^^^^^^^^^^^
       7:     except OverflowError as e:


Huge lenght
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 24, in test_Huge_lenght
        len(huge)
    OverflowError: Python int too large to convert to C ssize_t
    
    'OverflowError' מוגבה כאשר התוצאה של פעולה חשבונית
    הוא גדול מכדי שניתן יהיה לטפל בו במעבד המחשב.
    
    חריג הועלה בשורה 24 של הקובץ TESTS:\runtime\test_overflow_error.py.
    
       21: def test_Huge_lenght():
       22:     huge = range(1<<10000)
       23:     try:
    -->24:         len(huge)
                   ^^^^^^^^^
       25:     except OverflowError as e:

            huge:  range(0, ...)
                   len(huge): Object too large to be processed by Python.
        
            len:  <builtin function len>
        


RecursionError
--------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_recursion_error.py", line 8, in test_Generic
        a()
           ... שורות נוספות לא מוצגות. ...
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
    RecursionError: maximum recursion depth exceeded
    
    "RecursionError" מועלה כאשר פונקציה קוראת לעצמה,
    במישרין או בעקיפין, פעמים רבות מדי.
    זה כמעט תמיד מציין שעשית שגיאה בקוד שלך
    ושהתוכנית שלך לעולם לא תפסיק.
    
    הביצוע הופסק בשורה 8 של הקובץ TESTS:\runtime\test_recursion_error.py.
    
       5:     def a():
       6:         return a()
       7:     try:
    -->8:         a()
                  ^^^
       9:     except RecursionError as e:

            a:  <function a> defined in <function test_Generic>
        
    חריג הועלה בשורה 6 של הקובץ TESTS:\runtime\test_recursion_error.py.
    
       5:     def a():
    -->6:         return a()
                         ^^^

            a:  <function a> defined in <function test_Generic>
        


TypeError
---------


Bad type for unary operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 398, in test_Bad_type_for_unary_operator
        a =+ "def"
    TypeError: bad operand type for unary +: 'str'
    
        Perhaps you meant to write `+=` instead of `=+`
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    ניסית להשתמש באופרטור האנורי '+'
    עם סוג האובייקט הבא: מחרוזת (`str`).
    פעולה זו אינה מוגדרת עבור אובייקט מסוג זה.
    
    Perhaps you meant to write `+=` instead of `=+`
    
    חריג הועלה בשורה 398 של הקובץ TESTS:\runtime\test_type_error.py.
    
       393:         assert "You tried to use the unary operator '~'" in result
       395:     try:
       396:         # fmt: off
       397:         a = "abc"
    -->398:         a =+ "def"
                       ^^^^^^^
       399:         # fmt: on


Builtin has no len
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 830, in test_Builtin_has_no_len
        len("Hello world".split)
    TypeError: object of type 'builtin_function_or_method' has no len()
    
        שכחת לקרוא ל '"Hello world".split'?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    אני חושד ששכחת להוסיף סוגריים כדי לקרוא '"Hello world".split'.
    אולי התכוונת לכתוב:
    `len("Hello world".split())`
    
    חריג הועלה בשורה 830 של הקובץ TESTS:\runtime\test_type_error.py.
    
       828: def test_Builtin_has_no_len():
       829:     try:
    -->830:         len("Hello world".split)
                    ^^^^^^^^^^^^^^^^^^^^^^^^
       831:     except TypeError as e:

            len:  <builtin function len>
            "Hello world".split:  <builtin method split of str object>
        


Can only concatenate
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 39, in test_Can_only_concatenate
        result = a_tuple + a_list
    TypeError: can only concatenate tuple (not "list") to tuple
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    ניסית לחבר  (להוסיף) שני סוגים שונים של אובייקטים:
    צמד ('tuple') ו- רשימה (`list`).
    
    חריג הועלה בשורה 39 של הקובץ TESTS:\runtime\test_type_error.py.
    
       36:     try:
       37:         a_tuple = (1, 2, 3)
       38:         a_list = [1, 2, 3]
    -->39:         result = a_tuple + a_list
                            ^^^^^^^^^^^^^^^^
       40:     except TypeError as e:

            a_list:  [1, 2, 3]
            a_tuple:  (1, 2, 3)
        


Cannot convert dictionary update sequence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 816, in test_Cannot_convert_dictionary_update_sequence
        dd.update([1, 2, 3])
    TypeError: cannot convert dictionary update sequence element #0 to a sequence
    
        Perhaps you need to use the `dict.fromkeys()` method.
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    `dict.update()` אינו מקבל רצף כארגומנט.
    במקום לכתוב 'dd.update([1, 2, 3])'
    אולי כדאי להשתמש בשיטת 'dict.fromkeys ()': "dd.update( dict.fromkeys([1, 2, 3]) )". (מילון.מהמפתחות(...))
    
    חריג הועלה בשורה 816 של הקובץ TESTS:\runtime\test_type_error.py.
    
       812:         assert "you should use the `dict.fromkeys()`" in result
       814:     dd = {"a": "a"}
       815:     try:
    -->816:         dd.update([1, 2, 3])
                    ^^^^^^^^^^^^^^^^^^^^
       817:     except TypeError as e:

            dd:  {'a': 'a'}
            dd.update:  <builtin method update of dict object>
        


Cannot multiply by non int
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 614, in test_Cannot_multiply_by_non_int
        "a" * "2"
    TypeError: can't multiply sequence by non-int of type 'str'
    
        שכחת להמיר את '"2"' למספר שלם?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    אתה יכול רק להכפיל רצפים, כגון רשימה, זוגות,
      מחרוזות וכו ', לפי מספרים שלמים.
    אולי שכחת להמיר את '"2"' למספר שלם.
    
    חריג הועלה בשורה 614 של הקובץ TESTS:\runtime\test_type_error.py.
    
       610:     if friendly_traceback.get_lang() == "en":
       611:         assert "Did you forget to convert `c` into an integer?" in result
       613:     try:
    -->614:         "a" * "2"
                    ^^^^^^^^^
       615:     except TypeError as e:


Cannot unpack non iterable object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 788, in test_Cannot_unpack_non_iterable_object
        a, b = 42.0
    TypeError: cannot unpack non-iterable float object
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    פריקה היא דרך נוחה להקצות שם,
    לכל פריט של חוזר.
    חוזר הוא אובייקט המסוגל להחזיר את פרטיו,אחד בכל פעם.
    מכולות (`רשימה, tuple, dict`, וכו ') הם רכיבים חוזרים.
    אבל לא אובייקטים מהסוג `float`.
    
    חריג הועלה בשורה 788 של הקובץ TESTS:\runtime\test_type_error.py.
    
       786: def test_Cannot_unpack_non_iterable_object():
       787:     try:
    -->788:         a, b = 42.0
       789:     except TypeError as e:


Comparison not supported
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 347, in test_Comparison_not_supported
        b >= a
    TypeError: '>=' not supported between instances of 'int' and 'str'
    
        שכחת להמיר את המחרוזת "a" ל- מספר שלם (`int`)?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    ניסית לבצע השוואת סדר (>=)
    בין שני סוגי אובייקטים לא תואמים:
    מספר שלם (`int`) ו- מחרוזת (`str`).
    אולי שכחת להמיר את המחרוזת "a" ל- מספר שלם (`int`).
    
    חריג הועלה בשורה 347 של הקובץ TESTS:\runtime\test_type_error.py.
    
       344:     try:
       345:         a = "2"
       346:         b = 42
    -->347:         b >= a
                    ^^^^^^
       348:     except TypeError as e:

            a:  '2'
            b:  42
        


Derive from BaseException
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 557, in test_Derive_from_BaseException
        raise "exception"  # noqa
    TypeError: exceptions must derive from BaseException
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    ב- Python 3 יש לגזור חריגים מ- BaseException.
    
    חריג הועלה בשורה 557 של הקובץ TESTS:\runtime\test_type_error.py.
    
       555: def test_Derive_from_BaseException():
       556:     try:
    -->557:         raise "exception"  # noqa
       558:     except TypeError as e:


Indices must be integers or slices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 696, in test_Indices_must_be_integers_or_slices
        [1, 2, 3]["2"]
    TypeError: list indices must be integers or slices, not str
    
        שכחת להמיר את '"2"' למספר שלם?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    בביטוי `[1, 2, 3]["2"]`
    מה כלול בין הסוגריים המרובעים, '[...]',
    חייב להיות מספר שלם או פרוסה
    (`התחל: עצור` או` התחל: עצור: שלב`)
    והשתמשת במקום זאת ב- מחרוזת (`str`).
    
    אולי שכחת להמיר את '"2"' למספר שלם.
    
    חריג הועלה בשורה 696 של הקובץ TESTS:\runtime\test_type_error.py.
    
       692:     if friendly_traceback.get_lang() == "en":
       693:         assert "Perhaps you forgot to convert `2.0` into an integer." in result
       695:     try:
    -->696:         [1, 2, 3]["2"]
                    ^^^^^^^^^^^^^^
       697:     except TypeError as e:


Not an integer
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 659, in test_Not_an_integer
        range(c, d)
    TypeError: 'str' object cannot be interpreted as an integer
    
        האם שכחת להמיר את 'c, d' למספרים שלמים?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    כתבת אובייקט מסוג 'str' שבו צפוי מספר שלם.
    Perhaps you forgot to convert `c, d` into integers.
    חריג הועלה בשורה 659 של הקובץ TESTS:\runtime\test_type_error.py.
    
       655:         assert "Perhaps you forgot to convert `1.0" in result
       657:     c, d = "2", "3"
       658:     try:
    -->659:         range(c, d)
                    ^^^^^^^^^^^
       660:     except TypeError as e:

            c:  '2'
            d:  '3'
            range:  <class range>
        


Not callable
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 541, in test_Not_callable
        _ = [1, 2](a + b)
    TypeError: 'list' object is not callable
    
        האם התכוונת ל '[1, 2] [a + b]'?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    בגלל הסוגריים שמסביב, '(a + b)'
    מתפרש על ידי פייתון כמעיד על קריאה לפונקציה
    `[1, 2]`, שהוא אובייקט מסוג 'list'
    שלא ניתן לקרוא לה.
    עם זאת, '[1, 2]' הוא רצף.
    אולי התכוונת להשתמש ב- [] במקום במקום () ולכתוב
    `[1, 2] [a + b]`
    
    חריג הועלה בשורה 541 של הקובץ TESTS:\runtime\test_type_error.py.
    
       537:         assert "b.a_list[3]" in result
       539:     try:
       540:         a, b = 3, 7
    -->541:         _ = [1, 2](a + b)
                        ^^^^^^^^^^^^^
       542:     except TypeError as e:

            a:  3
            b:  7
            a + b:  10
        


Object is not iterable
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 774, in test_Object_is_not_iterable
        list(42)
    TypeError: 'int' object is not iterable
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    חוזר הוא אובייקט המסוגל להחזיר את פרטיו,אחד בכל פעם.
    מכולות (`רשימה, tuple, dict`, וכו ') הם רכיבים חוזרים.
    דרוש כאן חזרה.
    
    חריג הועלה בשורה 774 של הקובץ TESTS:\runtime\test_type_error.py.
    
       772: def test_Object_is_not_iterable():
       773:     try:
    -->774:         list(42)
                    ^^^^^^^^
       775:     except TypeError as e:

            list:  <class list>
        


Object is not subscriptable
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 757, in test_Object_is_not_subscriptable
        a = f[1]
    TypeError: 'function' object is not subscriptable
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 757 של הקובץ TESTS:\runtime\test_type_error.py.
    
       753:     def f():
       754:         pass
       756:     try:
    -->757:         a = f[1]
                        ^^^^
       758:     except TypeError as e:

            f:  <function f>
                defined in <function test_Object_is_not_subscriptable>
        


Slice indices must be integers or None
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 710, in test_Slice_indices_must_be_integers_or_None
        [1, 2, 3][1.0:2.0]
    TypeError: slice indices must be integers or None or have an __index__ method
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    בעת שימוש בפרוס (slice) לחילוץ מגוון אלמנטים
    מרצף, זה משהו כמו
    `[start: stop]` או `[start: stop: step]`
    כל אחד מ'התחלה ',' עצירה ',' שלב 'חייב להיות מספר שלם,' אין ',
    או אולי אובייקט אחר בעל שיטת '__index__'.
    
    חריג הועלה בשורה 710 של הקובץ TESTS:\runtime\test_type_error.py.
    
       708: def test_Slice_indices_must_be_integers_or_None():
       709:     try:
    -->710:         [1, 2, 3][1.0:2.0]
                    ^^^^^^^^^^^^^^^^^^
       711:     except TypeError as e:


Too few positional argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 471, in test_Too_few_positional_argument
        fn(1)
    TypeError: fn() missing 2 required positional arguments: 'b' and 'c'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    כנראה קראת לפונקציה 'fn()' עם
    פחות ארגומנטים מיקוםיים ממה שהוא דורש (חסר 2).
    
    חריג הועלה בשורה 471 של הקובץ TESTS:\runtime\test_type_error.py.
    
       467:     def fn(a, b, c):
       468:         pass
       470:     try:
    -->471:         fn(1)
                    ^^^^^
       472:     except TypeError as e:

            fn:  <function fn>
                defined in <function test_Too_few_positional_argument>
        


Too many positional argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 452, in test_Too_many_positional_argument
        A().f(1)
    TypeError: f() takes 1 positional argument but 2 were given
    
        אולי שכחת את 'self'(עצמי) בהגדרת 'f'.
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    כנראה קראת לפונקציה 'f' עם
    2 ארגומנטים בזמן שהוא דורש 1
    ארגומנטים כאלה.
    אולי שכחת את 'self'(עצמי) בהגדרת 'f'.
    
    חריג הועלה בשורה 452 של הקובץ TESTS:\runtime\test_type_error.py.
    
       448:         def f(x):
       449:             pass
       451:     try:
    -->452:         A().f(1)
                    ^^^^^^^^
       453:     except TypeError as e:

            A:  <class A>
                defined in <function test_type_error.test_Too_many_positional_argument>
        


Tuple no item assignment
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 419, in test_Tuple_no_item_assignment
        a[0] = 0
    TypeError: 'tuple' object does not support item assignment
    
        האם התכוונת להשתמש ברשימה?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    בפייתון כמה אובייקטים ידועים כבלתי משתנים:
    לאחר שהוגדר, לא ניתן לשנות את ערכם.
    ניסית לשנות חלק מאובייקט בלתי משתנה כזה: צמד ('tuple'),
    סביר להניח על ידי שימוש בפעולת אינדקס.
    אולי התכוונת להשתמש ברשימה במקום זאת.
    
    חריג הועלה בשורה 419 של הקובץ TESTS:\runtime\test_type_error.py.
    
       416: def test_Tuple_no_item_assignment():
       417:     a = (1, 2, 3)
       418:     try:
    -->419:         a[0] = 0
       420:     except TypeError as e:

            a:  (1, 2, 3)
            a[0]:  1
        


Unhachable type
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 727, in test_Unhachable_type
        {[1, 2]: 1}
    TypeError: unhashable type: 'list'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    Only hashable objects can be used
    as elements of `set` or keys of `dict`.
    Hashable objects are objects that do not change value
    once they have been created.במקום להשתמש ב- רשימה (`list`), שקול להשתמש ב- צמד ('tuple').
    
    חריג הועלה בשורה 727 של הקובץ TESTS:\runtime\test_type_error.py.
    
       725: def test_Unhachable_type():
       726:     try:
    -->727:         {[1, 2]: 1}
       728:     except TypeError as e:


Unsupported operand types
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 310, in test_Unsupported_operand_types
        a @= b
    TypeError: unsupported operand type(s) for @=: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    ניסית להשתמש באופרטור @=
    שימוש בשני סוגים של אובייקטים לא תואמים:
    מחרוזת (`str`) ו- מספר שלם (`int`).
    מפעיל זה משמש בדרך כלל בלבד
    לריבוי מטריצות.
    
    חריג הועלה בשורה 310 של הקובץ TESTS:\runtime\test_type_error.py.
    
       307:     try:
       308:         a = "a"
       309:         b = 2
    -->310:         a @= b
       311:     except TypeError as e:

            a:  'a'
            b:  2
        


divmod
~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 55, in test_divmod
        result = divmod(a, b)
    TypeError: can't take floor or mod of complex number.
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    The arguments of `divmod` must be integers (`int`) or real (`float`) numbers.
    At least one of the arguments was a complex number.
    
    חריג הועלה בשורה 55 של הקובץ TESTS:\runtime\test_type_error.py.
    
       52:     a = 2
       53:     b = 3 + 2j
       54:     try:
    -->55:         result = divmod(a, b)
                            ^^^^^^^^^^^^
       56:     except TypeError as e:

            a:  2
            b:  (3+2j)
            divmod:  <builtin function divmod>
        


function got multiple argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 922, in test_function_got_multiple_argument
        fn2(0, a=1)
    TypeError: fn2() got multiple values for argument 'a'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You have specified the value of argument `a` more than once
    when calling the function named `fn2`.
    This function has the following arguments:
    `a, b=1`
    
    חריג הועלה בשורה 922 של הקובץ TESTS:\runtime\test_type_error.py.
    
       918:     def fn2(a, b=1):
       919:         pass
       921:     try:
    -->922:         fn2(0, a=1)
                    ^^^^^^^^^^^
       923:     except TypeError as e:

            fn2:  <function fn2>
                defined in <function test_function_got_multiple_argument>
        


function has no len
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 847, in test_function_has_no_len
        len(bad)
    TypeError: object of type 'function' has no len()
    
        שכחת לקרוא ל 'bad'?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    אני חושד ששכחת להוסיף סוגריים כדי לקרוא 'bad'.
    אולי התכוונת לכתוב:
    `len(bad())`
    
    חריג הועלה בשורה 847 של הקובץ TESTS:\runtime\test_type_error.py.
    
       843:     def bad():
       844:         pass
       846:     try:
    -->847:         len(bad)
                    ^^^^^^^^
       848:     except TypeError as e:

            bad:  <function bad> defined in <function test_function_has_no_len>
            len:  <builtin function len>
        


getattr attribute name must be string
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 968, in test_getattr_attribute_name_must_be_string
        getattr("__repr__", 1)  # as reported in issue #77
    TypeError: getattr(): attribute name must be string
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    The second argument of the function `getattr()` must be a string.
    
    חריג הועלה בשורה 968 של הקובץ TESTS:\runtime\test_type_error.py.
    
       961:     if friendly_traceback.get_lang() == "en":
       962:         assert (
       963:             "The second argument of the function `hasattr()` must be a string."
       964:             in result
       965:         )
       967:     try:
    -->968:         getattr("__repr__", 1)  # as reported in issue #77
                    ^^^^^^^^^^^^^^^^^^^^^^
       969:     except TypeError as e:

            getattr:  <builtin function getattr>
        


method got multiple argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 941, in test_method_got_multiple_argument
        t.some_method(0, a=1)
    TypeError: some_method() got multiple values for argument 'a'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You have specified the value of argument `a` more than once
    when calling the function named `t.some_method`.
    This function has only one argument: `a`
    
    חריג הועלה בשורה 941 של הקובץ TESTS:\runtime\test_type_error.py.
    
       937:             pass
       939:     t = T()
       940:     try:
    -->941:         t.some_method(0, a=1)
                    ^^^^^^^^^^^^^^^^^^^^^
       942:     except TypeError as e:

            t:  <T object>
                defined in <function test_type_error.test_method_got_multiple_argument>
            t.some_method:  <bound method T.some_method>
                of <T object>
                defined in <function test_type_error.test_method_got_multiple_argument>
        


vars arg must have dict
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 891, in test_vars_arg_must_have_dict
        vars(f)
    TypeError: vars() argument must have __dict__ attribute
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    The function `vars` is used to list the content of the
    `__dict__` attribute of an object.
    Object `f` uses `__slots__` instead of `__dict__`.
    
    חריג הועלה בשורה 891 של הקובץ TESTS:\runtime\test_type_error.py.
    
       887:         assert no_slots not in result
       888:         assert use_slots not in result
       890:     try:
    -->891:         vars(f)
                    ^^^^^^^
       892:     except TypeError as e:

            f:  <F object>
                defined in <function test_type_error.test_vars_arg_must_have_dict>
            vars:  <builtin function vars>
        


UnboundLocalError
-----------------


Missing both
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 63, in test_Missing_both
        outer_missing_both()
      File "TESTS:\runtime\test_unbound_local_error.py", line 22, in outer_missing_both
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 21, in inner
        spam_missing_both += 1
    UnboundLocalError: local variable 'spam_missing_both' referenced before assignment
    
        שכחת להוסיף את 'global spam_missing_both' או
        `לא -מקומי spam_missing_both`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    You're trying to use the name `spam_missing_both` identified by Python as being
    in the local scope of a function before having assigned it a value.
    
    השם "spam_missing_both" קיים גם בתחום הגלובלי וגם הלא -מקומי.
    זה יכול להיות די מבלבל ואינו מומלץ.
    תלוי לאיזה משתנה אתה רוצה להתייחס, היית צריך להוסיף את זה
    
         spam_missing_both גלובלי
    
    אוֹ
    
         spam_missing_both לא -מקומי
    
    כשורה הראשונה בתוך הפונקציה שלך.
    
    הביצוע הופסק בשורה 63 של הקובץ TESTS:\runtime\test_unbound_local_error.py.
    
       61: def test_Missing_both():
       62:     try:
    -->63:         outer_missing_both()
                   ^^^^^^^^^^^^^^^^^^^^
       64:     except UnboundLocalError as e:

            global outer_missing_both:  <function outer_missing_both>
        
    חריג הועלה בשורה 21 של הקובץ TESTS:\runtime\test_unbound_local_error.py.
    
       20:     def inner():
    -->21:         spam_missing_both += 1

            global spam_missing_both:  1
        


Missing global
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 27, in test_Missing_global
        outer_missing_global()
      File "TESTS:\runtime\test_unbound_local_error.py", line 10, in outer_missing_global
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 9, in inner
        spam_missing_global += 1
    UnboundLocalError: local variable 'spam_missing_global' referenced before assignment
    
        שכחת להוסיף את 'global spam_missing_global'?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    You're trying to use the name `spam_missing_global` identified by Python as being
    in the local scope of a function before having assigned it a value.
    
    The name `spam_missing_global` exists in the global scope.
    Perhaps the statement
    
        global spam_missing_global
    
    should have been included as the first line inside your function.
    
    הביצוע הופסק בשורה 27 של הקובץ TESTS:\runtime\test_unbound_local_error.py.
    
       25: def test_Missing_global():
       26:     try:
    -->27:         outer_missing_global()
                   ^^^^^^^^^^^^^^^^^^^^^^
       28:     except UnboundLocalError as e:

            global outer_missing_global:  <function outer_missing_global>
        
    חריג הועלה בשורה 9 של הקובץ TESTS:\runtime\test_unbound_local_error.py.
    
       8:     def inner():
    -->9:         spam_missing_global += 1

            global spam_missing_global:  1
        


Missing nonlocal
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 45, in test_Missing_nonlocal
        outer_missing_nonlocal()
      File "TESTS:\runtime\test_unbound_local_error.py", line 16, in outer_missing_nonlocal
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 15, in inner
        spam_missing_nonlocal += 1
    UnboundLocalError: local variable 'spam_missing_nonlocal' referenced before assignment
    
        שכחת להוסיף את 'nonlocal spam_missing_nonlocal'?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    You're trying to use the name `spam_missing_nonlocal` identified by Python as being
    in the local scope of a function before having assigned it a value.
    
    The name `spam_missing_nonlocal` exists in the nonlocal scope.
    Perhaps the statement
    
        nonlocal spam_missing_nonlocal
    
    should have been included as the first line inside your function.
    
    הביצוע הופסק בשורה 45 של הקובץ TESTS:\runtime\test_unbound_local_error.py.
    
       43: def test_Missing_nonlocal():
       44:     try:
    -->45:         outer_missing_nonlocal()
                   ^^^^^^^^^^^^^^^^^^^^^^^^
       46:     except UnboundLocalError as e:

            global outer_missing_nonlocal:  <function outer_missing_nonlocal>
        
    חריג הועלה בשורה 15 של הקובץ TESTS:\runtime\test_unbound_local_error.py.
    
       14:     def inner():
    -->15:         spam_missing_nonlocal += 1


Typo in local
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 101, in test_Typo_in_local
        test2()
      File "TESTS:\runtime\test_unbound_local_error.py", line 98, in test2
        alpha3 += 1
    UnboundLocalError: local variable 'alpha3' referenced before assignment
    
        האם התכוונת ל 'alpha1'?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    במקום לכתוב 'alpha3', אולי התכוונת לאחד מהדברים הבאים:
    * היקף מקומי `alpha1`, `alpha2`
    
    הביצוע הופסק בשורה 101 של הקובץ TESTS:\runtime\test_unbound_local_error.py.
    
        97:         alpha2 = 1
        98:         alpha3 += 1
       100:     try:
    -->101:         test2()
                    ^^^^^^^
       102:     except UnboundLocalError as e:

            test2:  <function test2> defined in <function test_Typo_in_local>
        
    חריג הועלה בשורה 98 של הקובץ TESTS:\runtime\test_unbound_local_error.py.
    
       95:     def test2():
       96:         alpha1 = 1
       97:         alpha2 = 1
    -->98:         alpha3 += 1


Using name of builtin
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 121, in test_Using_name_of_builtin
        dist([])
      File "TESTS:\runtime\test_unbound_local_error.py", line 117, in dist
        max = max(points)
    UnboundLocalError: local variable 'max' referenced before assignment
    
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    `max` is a Python builtin function.
    You have tried to assign a value to `max` inside a function
    while also using its original meaning in the function.
    
    Note that it is generally not a good idea to give a local variable
    the same name as a Python builtin function (like `max`).
    
    הביצוע הופסק בשורה 121 של הקובץ TESTS:\runtime\test_unbound_local_error.py.
    
       118:         min = min(points)
       119:         return max - min
       120:     try:
    -->121:         dist([])
                    ^^^^^^^^
       122:     except UnboundLocalError as e:

            dist:  <function dist> defined in <function test_Using_name_of_builtin>
        
    חריג הועלה בשורה 117 של הקובץ TESTS:\runtime\test_unbound_local_error.py.
    
       116:     def dist(points):
    -->117:         max = max(points)
                    ^^^
       118:         min = min(points)

            max:  <builtin function max>
        


UnknownError
------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unknown_error.py", line 12, in test_Generic
        raise UnknownException("Some informative message about an unknown exception.")
    UnknownException: Some informative message about an unknown exception.
    
    אין מידע על חריג זה.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    אם אתה משתמש במסוף ידידותי, השתמש ב- 'www ()' כדי
    חפש באינטרנט את המקרה הספציפי הזה.
    
    חריג הועלה בשורה 12 של הקובץ TESTS:\runtime\test_unknown_error.py.
    
        9:     old_debug = friendly_traceback.debug_helper.DEBUG
       10:     friendly_traceback.debug_helper.DEBUG = False
       11:     try:
    -->12:         raise UnknownException("Some informative message about an unknown exception.")
       13:     except Exception as e:

            global UnknownException:  <class test_unknown_error.UnknownException>
        


ValueError
----------


Convert to int
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 187, in test_Convert_to_int
        int('13a')
    ValueError: invalid literal for int() with base 10: '13a'
    
    'ValueError' מציין כי פונקציה או פעולה
    קיבל ערך מהסוג הנכון, אך בעל ערך לא נכון.
    
    `'13a'` הוא ארגומנט לא חוקי עבור `int (שלם)` בבסיס `10`.
    בבסיס '10', 'int (שלם)' משמש לרוב להמרת מחרוזת
    המכיל את הספרות '0' עד '9' למספר שלם.
    The following characters are not allowed: `a`.
    
    חריג הועלה בשורה 187 של הקובץ TESTS:\runtime\test_value_error.py.
    
       183:     if english:
       184:         assert "needs to be first converted using `float()`" in result
       186:     try:
    -->187:         int('13a')
                    ^^^^^^^^^^
       188:     except ValueError as e:

            int:  <class int>
        


Could not convert to float
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 88, in test_Could_not_convert_to_float
        float("42b")
    ValueError: could not convert string to float: '42b'
    
    'ValueError' מציין כי פונקציה או פעולה
    קיבל ערך מהסוג הנכון, אך בעל ערך לא נכון.
    
    The string `42b` cannot be converted to a `float`.
    
    חריג הועלה בשורה 88 של הקובץ TESTS:\runtime\test_value_error.py.
    
       86: def test_Could_not_convert_to_float():
       87:     try:
    -->88:         float("42b")
                   ^^^^^^^^^^^^
       89:     except ValueError as e:

            float:  <class float>
        


Date invalid month
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 58, in test_Date_invalid_month
        d = date(2021, 13, 1)
    ValueError: month must be in 1..12
    
        האם ציינת חודש לא חוקי?
        
    'ValueError' מציין כי פונקציה או פעולה
    קיבל ערך מהסוג הנכון, אך בעל ערך לא נכון.
    
    אני מנחש שאתה מציין ערך לא חוקי למשך חודש
    באובייקט `תאריך`. ערכים חוקיים הם מספרים שלמים, מ -1 עד 12.
    
    חריג הועלה בשורה 58 של הקובץ TESTS:\runtime\test_value_error.py.
    
       55: def test_Date_invalid_month():
       56:     from datetime import date
       57:     try:
    -->58:         d = date(2021, 13, 1)
                       ^^^^^^^^^^^^^^^^^
       59:     except ValueError as e:

            date:  <class datetime.date>
        


Not enough values to unpack
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 28, in test_Not_enough_values_to_unpack
        a, b, c = d
    ValueError: not enough values to unpack (expected 3, got 2)
    
    'ValueError' מציין כי פונקציה או פעולה
    קיבל ערך מהסוג הנכון, אך בעל ערך לא נכון.
    
    פריקה היא דרך נוחה להקצות שם,
    לכל פריט של חוזר.
    במקרה זה, ישנם שמות נוספים (3)
    מאשר אורך ה- iterable, מחרוזת (`str`) של אורך 2.
    
    חריג הועלה בשורה 28 של הקובץ TESTS:\runtime\test_value_error.py.
    
       24:     assert "ValueError: not enough values to unpack (expected 3, got 2)" in result
       26:     d = "ab"
       27:     try:
    -->28:         a, b, c = d
       29:     except ValueError as e:

            d:  'ab'
        


Pow third arg cannot be zero
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 103, in test_Pow_third_arg_cannot_be_zero
        pow(2, 4, a)
    ValueError: pow() 3rd argument cannot be 0
    
    'ValueError' מציין כי פונקציה או פעולה
    קיבל ערך מהסוג הנכון, אך בעל ערך לא נכון.
    
    The third argument of the function `pow()` cannot be zero.
    
    חריג הועלה בשורה 103 של הקובץ TESTS:\runtime\test_value_error.py.
    
       100: def test_Pow_third_arg_cannot_be_zero():
       101:     a = 0
       102:     try:
    -->103:         pow(2, 4, a)
                    ^^^^^^^^^^^^
       104:     except ValueError as e:

            a:  0
            pow:  <builtin function pow>
        


Slots conflicts with class variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 72, in test_Slots_conflicts_with_class_variable
        class F:
    ValueError: 'a' in __slots__ conflicts with class variable
    
    'ValueError' מציין כי פונקציה או פעולה
    קיבל ערך מהסוג הנכון, אך בעל ערך לא נכון.
    
    The name `a` is used both as the name of a class variable
    and as a string item in the class `__slots__`;
    this is not allowed.
    
    חריג הועלה בשורה 72 של הקובץ TESTS:\runtime\test_value_error.py.
    
       70: def test_Slots_conflicts_with_class_variable():
       71:     try:
    -->72:         class F:
       73:             __slots__ = ["a", "b"]


Too many values to unpack
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 43, in test_Too_many_values_to_unpack
        a, b = c
    ValueError: too many values to unpack (expected 2)
    
    'ValueError' מציין כי פונקציה או פעולה
    קיבל ערך מהסוג הנכון, אך בעל ערך לא נכון.
    
    פריקה היא דרך נוחה להקצות שם,
    לכל פריט של חוזר.
    במקרה זה, יש פחות שמות (2)
    מאשר אורך ה- iterable, רשימה (`list`) של אורך 3.
    
    חריג הועלה בשורה 43 של הקובץ TESTS:\runtime\test_value_error.py.
    
       40: def test_Too_many_values_to_unpack():
       41:     c = [1, 2, 3]
       42:     try:
    -->43:         a, b = c
       44:     except ValueError as e:

            c:  [1, 2, 3]
        


int base not in range
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 201, in test_int_base_not_in_range
        int('18', base=37)
    ValueError: int() base must be >= 2 and <= 36, or 0
    
    'ValueError' מציין כי פונקציה או פעולה
    קיבל ערך מהסוג הנכון, אך בעל ערך לא נכון.
    
    The argument `base` of `int()` must be either zero
    or any integer from 2 to 36.
    You wrote 37 which is not allowed.
    
    חריג הועלה בשורה 201 של הקובץ TESTS:\runtime\test_value_error.py.
    
       199: def test_int_base_not_in_range():
       200:     try:
    -->201:         int('18', base=37)
                    ^^^^^^^^^^^^^^^^^^
       202:     except ValueError as e:

            int:  <class int>
        


time strptime incorrect format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 127, in test_time_strptime_incorrect_format
        time.strptime("2020-01-01", "%d %m %Y")
    ValueError: time data '2020-01-01' does not match format '%d %m %Y'
    
    'ValueError' מציין כי פונקציה או פעולה
    קיבל ערך מהסוג הנכון, אך בעל ערך לא נכון.
    
    The value you gave for the time is not in the format you specified.
    Make sure to use the same separator between items
    (for example, between day and month) and keep the order the same
    in both the data provided and the format you specified.
    The following table might be useful:
    https://docs.python.org/3/library/time.html#time.strftime
    The following site might also be useful: https://www.strfti.me/
    
    חריג הועלה בשורה 127 של הקובץ TESTS:\runtime\test_value_error.py.
    
       123:         return
       125:     import time
       126:     try:
    -->127:         time.strptime("2020-01-01", "%d %m %Y")
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       128:     except ValueError as e:

            time:  <module time (builtin)>
            time.strptime:  <builtin function strptime>
        


ZeroDivisionError
-----------------


Complex division
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 155, in test_Complex_division
        1 / zero
    ZeroDivisionError: complex division by zero
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 155 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       152: def test_Complex_division():
       153:     zero = 0j
       154:     try:
    -->155:         1 / zero
                    ^^^^^^^^
       156:     except ZeroDivisionError as e:

            zero:  0j
        


Division by zero literal
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 199, in test_Division_by_zero_literal
        1. / 0
    ZeroDivisionError: float division by zero
    
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    את\ה מחלק\ת באפס.
    
    חריג הועלה בשורה 199 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       194:     if friendly_traceback.get_lang() == "en":
       195:         assert "Using the modulo operator, you are dividing by zero" in result
       198:     try:
    -->199:         1. / 0
                    ^^^^^^
       200:     except ZeroDivisionError as e:


Division operator
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 17, in test_Division_operator
        1 / zero
    ZeroDivisionError: division by zero
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 17 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       13:     if friendly_traceback.get_lang() == "en":
       14:         assert "The following mathematical expression includes a division by zero" in result
       16:     try:
    -->17:         1 / zero
                   ^^^^^^^^
       18:     except ZeroDivisionError as e:

            zero:  0
        


Divmod
~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 82, in test_Divmod
        divmod(1, zero)
    ZeroDivisionError: integer division or modulo by zero
    
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    הטיעון השני של הפונקציה `divmod(חלוקה)` הוא אפס.
    
    חריג הועלה בשורה 82 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       79: def test_Divmod():
       80:     zero = 0
       81:     try:
    -->82:         divmod(1, zero)
                   ^^^^^^^^^^^^^^^
       83:     except ZeroDivisionError as e:

            zero:  0
            divmod:  <builtin function divmod>
        


Float division
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 125, in test_Float_division
        1 / zero
    ZeroDivisionError: float division by zero
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 125 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       122: def test_Float_division():
       123:     zero = 0.
       124:     try:
    -->125:         1 / zero
                    ^^^^^^^^
       126:     except ZeroDivisionError as e:

            zero:  0.0
        


Float divmod
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 140, in test_Float_divmod
        divmod(1, zero)
    ZeroDivisionError: float divmod()
    
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    הטיעון השני של הפונקציה `divmod(חלוקה)` שווה אפס.
    
    חריג הועלה בשורה 140 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       137: def test_Float_divmod():
       138:     zero = 0.
       139:     try:
    -->140:         divmod(1, zero)
                    ^^^^^^^^^^^^^^^
       141:     except ZeroDivisionError as e:

            zero:  0.0
            divmod:  <builtin function divmod>
        


Float modulo
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 110, in test_Float_modulo
        1 % zero
    ZeroDivisionError: float modulo
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 110 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       106:         assert "The following mathematical expression includes a division by zero" in result
       107:         assert "done using the modulo operator" in result
       109:     try:
    -->110:         1 % zero
                    ^^^^^^^^
       111:     except ZeroDivisionError as e:

            zero:  0.0
        


Integer division operator
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 42, in test_Integer_division_operator
        1 // zero
    ZeroDivisionError: integer division or modulo by zero
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 42 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       38:     if friendly_traceback.get_lang() == "en":
       39:         assert "The following mathematical expression includes a division by zero" in result
       41:     try:
    -->42:         1 // zero
                   ^^^^^^^^^
       43:     except ZeroDivisionError as e:

            zero:  0
        


Mixed operations
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 212, in test_Mixed_operations
        a = divmod(8, 1 // 2)
    ZeroDivisionError: integer division or modulo by zero
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 212 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       210: def test_Mixed_operations():
       211:     try:
    -->212:         a = divmod(8, 1 // 2)
                        ^^^^^^^^^^^^^^^^^
       213:     except ZeroDivisionError as e:

            divmod:  <builtin function divmod>
            1 // 2:  0
        


Modulo operator
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 67, in test_Modulo_operator
        1 % zero
    ZeroDivisionError: integer division or modulo by zero
    
        שגיאה כללית עבור ידידותי.
        Please report this example to
        https://github.com/friendly-traceback/friendly-traceback/issues/new
        If you are using a REPL, use `www('bug')` to do so.
        
        
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    שגיאה כללית עבור ידידותי.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    
    חריג הועלה בשורה 67 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       63:     if friendly_traceback.get_lang() == "en":
       64:         assert "The following mathematical expression includes a division by zero" in result
       66:     try:
    -->67:         1 % zero
                   ^^^^^^^^
       68:     except ZeroDivisionError as e:

            zero:  0
        


Raise zero negative power
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 170, in test_Raise_zero_negative_power
        zero ** -1
    ZeroDivisionError: 0.0 cannot be raised to a negative power
    
    'ZeroDivisionError' מתרחש כאשר אתה מנסה לחלק ערך
    באפס ישירות או באמצעות פעולה מתמטית אחרת.
    
    את\ה מנסה להעלות את המספר 0 בחזקת מספר שלילי
    זה מקביל לחלוקה באפס.
    
    חריג הועלה בשורה 170 של הקובץ TESTS:\runtime\test_zero_division_error.py.
    
       167: def test_Raise_zero_negative_power():
       168:     zero = 0
       169:     try:
    -->170:         zero ** -1
                    ^^^^^^^^^^
       171:     except ZeroDivisionError as e:

            zero:  0
        

