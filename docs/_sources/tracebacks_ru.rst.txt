
Friendly tracebacks - in Русский
==================================================

Friendly aims to provide friendlier feedback when an exception
is raised than what is done by Python.

Below, we can find some examples. SyntaxError cases, as well as TabError and
IndentationError cases, are shown in a separate page.
Not all cases handled by friendly are included here.

.. note::

     The content of this page is generated by running
     `trb_russian.py` located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

Friendly-traceback version: 0.7.53
Python version: 3.10.6



ArithmeticError
---------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_arithmetic_error.py", line 9, in test_Generic
        raise ArithmeticError('error')
    ArithmeticError: error
    
    `ArithmeticError` is the base class for those built-in exceptions
    that are raised for various arithmetic errors.
    
    Исключение возникло в строке `9` файла 'TESTS:\runtime\test_arithmetic_error.py'.
    
        4| def test_Generic():
        5|     try:
        6|         # I am not aware of any way in which this error is raised directly
        7|         # Usually, a subclass such as ZeroDivisionError, etc., would
        8|         # likely be raised.
    --> 9|         raise ArithmeticError('error')
       10|     except ArithmeticError as e:

            ArithmeticError:  <class ArithmeticError>
        


AssertionError
--------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_assertion_error.py", line 8, in test_Generic
        raise AssertionError("Fake message")
    AssertionError: Fake message
    
    В Python ключевое слово `assert` используется в утверждениях типа
    `assert condition`, чтобы подтвердить, что `condition` не является `False`,
    или эквивалентно `False`, например, пустой список и т.д.
    
    Если `condition` равно `False` или эквивалентно ему, возникает `AssertionError`.
    
    Исключение возникло в строке `8` файла 'TESTS:\runtime\test_assertion_error.py'.
    
       4| def test_Generic():
       5|     try:
       6|         # We raise it explicitly, rather than with the keyword assert, since
       7|         # we don't want pytest to rewrite out test.
    -->8|         raise AssertionError("Fake message")
       9|     except AssertionError as e:

            AssertionError:  <class AssertionError>
        


AttributeError
--------------


Attribute from other module
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 336, in test_Attribute_from_other_module
        keyword.pi
    AttributeError: module 'keyword' has no attribute 'pi'
    
        Вы имели в виду один из следующих модулей: `math, cmath`?
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    Возможно, вместо модуля `keyword`, следует использовать
    атрибут `pi` одного из следующих модулей:
    `math, cmath`.
    
    Исключение возникло в строке `336` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       332|     assert "Did you mean `math`?" in result
       333| 
       334| import cmath
       335| try:
    -->336|     keyword.pi
                ^^^^^^^^^^
       337| except AttributeError as e:

            keyword:  <module keyword> from PYTHON_LIB:\keyword.py
        


Builtin function
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 229, in test_Builtin_function
        len.text
    AttributeError: 'builtin_function_or_method' object has no attribute 'text'
    
        Вы имели в виду `len(text)`?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    `len` является функцией. Возможно, вы хотели написать
    `len(text)`.
    
    Исключение возникло в строке `229` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       226| def test_Builtin_function():
       227|     text = 'Hello world!'
       228|     try:
    -->229|         len.text
                    ^^^^^^^^
       230|     except AttributeError as e:

            text:  'Hello world!'
            len:  <builtin function len>
        


Builtin module with no file
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 247, in test_Builtin_module_with_no_file
        sys.foo
    AttributeError: module 'sys' has no attribute 'foo'
    
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    Python сообщает, что ни один объект с именем `foo`
    не найден в модуле `sys`.
    
    Исключение возникло в строке `247` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       243| """Issue 116"""
       244| import sys
       245| 
       246| try:
    -->247|     sys.foo
                ^^^^^^^
       248| except AttributeError as e:

            sys:  <module sys (builtin)>
        


Circular import
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 368, in test_Circular_import
        import my_turtle1
      File "TESTS:\my_turtle1.py", line 4, in <module>
        a = my_turtle1.something
    AttributeError: partially initialized module 'my_turtle1' has no attribute 'something' (most likely due to a circular import)
    
        Давали ли вы своей программе то же имя, что и модулю Python?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    Предположение: вы использовали имя `my_turtle1.py` для своей программы
    и что вы также хотели импортировать модуль с тем же именем
    из стандартной библиотеки Python.
    Если это так, то вы должны использовать другое имя для своей программы.
    
    Выполнение остановлено на строке `368` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       365| from friendly_traceback.runtime_errors import stdlib_modules
       366| stdlib_modules.names.add("my_turtle1")
       367| try:
    -->368|    import my_turtle1
       369| except AttributeError as e:

    Исключение возникло в строке `4` файла 'TESTS:\my_turtle1.py'.
    
       1| """To test attribute error of partially initialized module."""
       2| import my_turtle1
       3| 
    -->4| a = my_turtle1.something
              ^^^^^^^^^^^^^^^^^^^^

            my_turtle1:  <module my_turtle1> from TESTS:\my_turtle1.py
        


Circular import b
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 386, in test_Circular_import_b
        import circular_c
      File "TESTS:\circular_c.py", line 4, in <module>
        a = circular_c.something
    AttributeError: partially initialized module 'circular_c' has no attribute 'something' (most likely due to a circular import)
    
        У вас кольцевой импорт.
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    Python указал, что модуль `{module}` был импортирован не полностью.
    Это может произойти, если во время выполнения кода в модуле `circular_c`
    будет сделана попытка импортировать тот же модуль еще раз.
    
    Выполнение остановлено на строке `386` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       384| def test_Circular_import_b():
       385|     try:
    -->386|         import circular_c
       387|     except AttributeError as e:

    Исключение возникло в строке `4` файла 'TESTS:\circular_c.py'.
    
       1| # Attribute error for partially initialize module
       2| import circular_c
       3| 
    -->4| a = circular_c.something
              ^^^^^^^^^^^^^^^^^^^^

            circular_c:  <module circular_c> from TESTS:\circular_c.py
        


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 26, in test_Generic
        A.x  # testing type
    AttributeError: type object 'A' has no attribute 'x'
    
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    У объекта `A` нет атрибута с именем `x`.
    
    Исключение возникло в строке `26` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       22| class A:
       23|     pass
       24| 
       25| try:
    -->26|     A.x  # testing type
               ^^^
       27| except AttributeError as e:

            A:  <class A> defined in <function test_attribute_error.test_Generic>
        


Generic different frame
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 50, in test_Generic_different_frame
        a.attr
    AttributeError: 'A' object has no attribute 'attr'. Did you mean: 'attr2'?
    
        Вы имели в виду `attr2`?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    У объекта `a` нет атрибута с именем `attr`.
    Возможно, вы хотели написать `a.attr2` вместо `a.attr`.
    
    Исключение возникло в строке `50` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       46|     return A()
       47| 
       48| a = f()
       49| try:
    -->50|     a.attr
               ^^^^^^
       51| except AttributeError as e:

            a:  <A object>
                defined in <function test_attribute_error.test_Generic_different_frame.<locals>.f>
        


Generic instance
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 69, in test_Generic_instance
        a.x
    AttributeError: 'A' object has no attribute 'x'
    
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    У объекта `a` нет атрибута с именем `x`.
    
    Исключение возникло в строке `69` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       66|     pass
       67| a = A()
       68| try:
    -->69|     a.x
               ^^^
       70| except AttributeError as e:

            a:  <A object>
                defined in <function test_attribute_error.test_Generic_instance>
        


Module attribute typo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 150, in test_Module_attribute_typo
        math.cost
    AttributeError: module 'math' has no attribute 'cost'. Did you mean: 'cos'?
    
        Вы имели в виду `cos`?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    Вместо того, чтобы написать `math.cost`, возможно, вы хотели написать
     одно из следующих имен, которые являются атрибутами модуля `math`:
    `cos, cosh`
    
    Исключение возникло в строке `150` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       145|     assert "Did you mean `ascii_lowercase`" in result
       146| 
       147| import math
       148| 
       149| try:
    -->150|     math.cost
                ^^^^^^^^^
       151| except AttributeError as e:

            math:  <module math (builtin)>
        


Nonetype
~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 191, in test_Nonetype
        a.b
    AttributeError: 'NoneType' object has no attribute 'b'
    
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    Вы пытаетесь получить доступ к атрибуту `b`
    для переменной, значение которой `None`.
    Исключение возникло в строке `191` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       188| def test_Nonetype():
       189|     a = None
       190|     try:
    -->191|         a.b
                    ^^^
       192|     except AttributeError as e:

            a:  None
        


Object attribute typo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 86, in test_Object_attribute_typo
        a.appendh(4)
    AttributeError: 'list' object has no attribute 'appendh'. Did you mean: 'append'?
    
        Вы имели в виду `append`?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    У объекта `a` нет атрибута с именем `appendh`.
    Возможно, вы хотели написать `a.append` вместо `a.appendh`.
    
    Исключение возникло в строке `86` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       82| def test_Object_attribute_typo():
       83|     #
       84|     try:
       85|         a = [1, 2, 3]
    -->86|         a.appendh(4)
                   ^^^^^^^^^
       87|     except AttributeError as e:

            a:  [1, 2, 3]
        


Perhaps comma
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 213, in test_Perhaps_comma
        .defg]
    AttributeError: 'str' object has no attribute 'defg'
    
        Вы хотели разделить имена объектов запятой?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    `defg` не является атрибутом `abcd`.
    Однако и `abcd`, и `defg` являются известными объектами.
    Возможно, вы написали точку, чтобы разделить эти два объекта, 
    вместо запятой.
    
    Исключение возникло в строке `213` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       208| defg = "world"
       209| 
       210| # fmt: off
       211| try:
       212|     a = [abcd
                     ^^^^
    -->213|     .defg]
                ^^^^^
       214| # fmt: on

            abcd:  'hello'
            defg:  'world'
        


Read only
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 289, in test_Read_only
        f.b = 1
    AttributeError: 'F' object attribute 'b' is read-only
    
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    Объект `f` использует `__slots__` чтобы указать, какие атрибуты могут
    быть изменены. Значение атрибута `f.b`
    не может быть изменено.
    The only attribute of `f` whose value can be changed is`a`.
    
    Исключение возникло в строке `289` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       285|     b = 2
       286| 
       287| f = F()
       288| try:
    -->289|     f.b = 1
                ^^^
       290| except AttributeError as e:

            f:  <F object>
                defined in <function test_attribute_error.test_Read_only>
            f.b:  2
        


Shadow stdlib module
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 172, in test_Shadow_stdlib_module
        turtle.Pen
    AttributeError: module 'turtle' has no attribute 'Pen'
    
        Давали ли вы своей программе то же имя, что и модулю Python?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    Вы импортировали модуль с именем `turtle` из `TESTS:\turtle.py`.
    В стандартной библиотеке Python также есть модуль с именем `turtle`.
    Возможно, вам нужно переименовать ваш модуль.
    
    Исключение возникло в строке `172` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       168| def test_Shadow_stdlib_module():
       169|     import turtle
       170| 
       171|     try:
    -->172|         turtle.Pen
                    ^^^^^^^^^^
       173|     except AttributeError as e:

            turtle:  <module turtle> from TESTS:\turtle.py
        


Tuple by accident
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 305, in test_Tuple_by_accident
        something.upper()
    AttributeError: 'tuple' object has no attribute 'upper'
    
        Вы поставили запятую по ошибке?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    `something` -- это кортеж, который содержит единственный элемент,
    имеющий `'upper` в качестве атрибута.
    Возможно, вы по ошибке добавили запятую в конце строки
    в которой вы определили `something`.
    
    Исключение возникло в строке `305` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       302| def test_Tuple_by_accident():
       303|     something = "abc",  # note trailing comma
       304|     try:
    -->305|         something.upper()
                    ^^^^^^^^^^^^^^^
       306|     except AttributeError as e:

            something:  ('abc',)
        


Use builtin
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 103, in test_Use_builtin
        a.length()
    AttributeError: 'list' object has no attribute 'length'
    
        Вы имели в виду `len(a)`?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    У объекта `a` нет атрибута с именем `length`.
    Возможно, вместо этого следует использовать встроенную функцию Python `len`:
    `len(a)`.
    Исключение возникло в строке `103` файла 'TESTS:\runtime\test_attribute_error.py'.
    
        99| def test_Use_builtin():
       100|     #
       101|     try:
       102|         a = [1, 2, 3]
    -->103|         a.length()
                    ^^^^^^^^
       104|     except AttributeError as e:

            a:  [1, 2, 3]
        


Use join with str
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 351, in test_Use_join_with_str
        a = ['a', '2'].join('abc') + ['b', '3'].join('\n')
    AttributeError: 'list' object has no attribute 'join'
    
        Вы имели в виду `'abc'.join(['a', '2'])`?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    У объекта `['a', '2']` нет атрибута с именем `join`.
    Возможно, вы хотели получить что-то вроде `'abc'.join(['a', '2'])`.
    
    Исключение возникло в строке `351` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       349| def test_Use_join_with_str():
       350|     try:
    -->351|         a = ['a', '2'].join('abc') + ['b', '3'].join('\n')
                        ^^^^^^^^^^^^^^^
       352|     except AttributeError as e:


Use synonym
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 120, in test_Use_synonym
        a.add(4)
    AttributeError: 'list' object has no attribute 'add'
    
        Вы имели в виду `append`?
        
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    У объекта `a` нет атрибута с именем `add`.
    Однако `a` имеет следующие атрибуты с аналогичными значениями:
    `append, extend, insert`.
    
    Исключение возникло в строке `120` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       116| def test_Use_synonym():
       117|     #
       118|     try:
       119|         a = [1, 2, 3]
    -->120|         a.add(4)
                    ^^^^^
       121|     except AttributeError as e:

            a:  [1, 2, 3]
        


Using slots
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 268, in test_Using_slots
        f.b = 1
    AttributeError: 'F' object has no attribute 'b'
    
    `AttributeError` возникает, когда код содержит что-то вроде
        `object.x`
    где `x` не является методом или атрибутом (переменной), принадлежащим `object`.
    
    У объекта `f` нет атрибута с именем `b`.
    Обратите внимание, что объект `f` использует `__slots__`,
    что предотвращает создание новых атрибутов.
    Ниже перечислены некоторые из его известных атрибутов:
    `a`.
    Исключение возникло в строке `268` файла 'TESTS:\runtime\test_attribute_error.py'.
    
       264|     __slots__ = ["a"]
       265| 
       266| f = F()
       267| try:
    -->268|     f.b = 1
                ^^^
       269| except AttributeError as e:

            f:  <F object>
                defined in <function test_attribute_error.test_Using_slots>
        


FileNotFoundError
-----------------


Directory not found
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 73, in test_Directory_not_found
        open("does_not_exist/file.txt")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist/file.txt'
    
    `FileNotFoundError` указывает на то, что вы пытаетесь открыть файл,
    который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя файла.
    
    В вашей программе имя файла,
    который не может быть найден, будет `file.txt`.
    does_not_exist не является допустимой.
    
    Исключение возникло в строке `73` файла 'TESTS:\runtime\test_file_not_found_error.py'.
    
       71| def test_Directory_not_found():
       72|     try:
    -->73|         open("does_not_exist/file.txt")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       74|     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 7, in test_Filename_not_found
        open("does_not_exist")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist'
    
    `FileNotFoundError` указывает на то, что вы пытаетесь открыть файл,
    который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя файла.
    
    В вашей программе имя файла,
    который не может быть найден, будет `does_not_exist`.
    Ожидалось, что он будет найден в
    директории `C:\Users\Andre\github\friendly-traceback\tests`.
    Дополнительной информации нет.
    
    Исключение возникло в строке `7` файла 'TESTS:\runtime\test_file_not_found_error.py'.
    
       5| def test_Filename_not_found():
       6|     try:
    -->7|         open("does_not_exist")
                  ^^^^^^^^^^^^^^^^^^^^^^
       8|     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found 2
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 31, in test_Filename_not_found_2
        open("setupp.py")
    FileNotFoundError: [Errno 2] No such file or directory: 'setupp.py'
    
        Вы имели в виду `setup.py`?
        
    `FileNotFoundError` указывает на то, что вы пытаетесь открыть файл,
    который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя файла.
    
    В вашей программе имя файла,
    который не может быть найден, будет `setupp.py`.
    Ожидалось, что он будет найден в
    директории `C:\Users\Andre\github\friendly-traceback`.
    Файл `setup.py` имеет похожее имя.
    
    Исключение возникло в строке `31` файла 'TESTS:\runtime\test_file_not_found_error.py'.
    
       27| if chdir:
       28|     os.chdir("..")
       29| 
       30| try:
    -->31|     open("setupp.py")
               ^^^^^^^^^^^^^^^^^
       32| except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found 3
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 54, in test_Filename_not_found_3
        open("setup.pyg")
    FileNotFoundError: [Errno 2] No such file or directory: 'setup.pyg'
    
        Вы имели в виду `setup.py`?
        
    `FileNotFoundError` указывает на то, что вы пытаетесь открыть файл,
    который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя файла.
    
    В вашей программе имя файла,
    который не может быть найден, будет `setup.pyg`.
    Ожидалось, что он будет найден в
    директории `C:\Users\Andre\github\friendly-traceback`.
    Возможно, вы имели в виду один из следующих файлов с похожими именами:
    `setup.py`, `setup.cfg`
    
    Исключение возникло в строке `54` файла 'TESTS:\runtime\test_file_not_found_error.py'.
    
       51| if chdir:
       52|     os.chdir("..")
       53| try:
    -->54|     open("setup.pyg")
               ^^^^^^^^^^^^^^^^^
       55| except FileNotFoundError as e:

            open:  <builtin function open>
        


ImportError
-----------


Simple import error
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 56, in test_Simple_import_error
        from math import Pi
    ImportError: cannot import name 'Pi' from 'math' (unknown location)
    
        Вы имели в виду `pi`?
        
    `ImportError` указывает на то, что определенный объект не может быть
    импортирован из модуля или пакета. Чаще всего это происходит
    из-за того, что имя объекта написано неправильно.
    
    Возможно, вместо `Pi` вы хотели импортировать `pi` из `math`
    
    Исключение возникло в строке `56` файла 'TESTS:\runtime\test_import_error.py'.
    
       52| multiple_import_on_same_line()
       53| wrong_case()
       54| 
       55| try:
    -->56|     from math import Pi
       57| except ImportError as e:


IndexError
----------


Assignment
~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 87, in test_Assignment
        a[13] = 1
    IndexError: list assignment index out of range
    
    `IndexError` возникает, когда вы пытаетесь получить элемент из списка,
    кортежа или аналогичного объекта (последовательности) и используете индекс, который
    не существует. Обычно это происходит потому, что указанный вами индекс
    больше, чем длина последовательности.
    
    Вы попытались присвоить значение индексу `13` из `a`,
    список `list` длины `10`.
    Допустимыми значениями индекса `a` являются целые числа в диапазоне
    от `-10` до `9`.
    
    Исключение возникло в строке `87` файла 'TESTS:\runtime\test_index_error.py'.
    
       83|     assert "You have tried to assign a value to index `1` of `b`," in result
       84|     assert "a `list` which contains no item." in result
       85| 
       86| try:
    -->87|     a[13] = 1
               ^^^^^
       88| except IndexError as e:

            a:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        


Empty
~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 42, in test_Empty
        c = a[1]
    IndexError: list index out of range
    
        `a` не содержит ни одного элемента.
        
    `IndexError` возникает, когда вы пытаетесь получить элемент из списка,
    кортежа или аналогичного объекта (последовательности) и используете индекс, который
    не существует. Обычно это происходит потому, что указанный вами индекс
    больше, чем длина последовательности.
    
    Вы пытались получить элемент с индексом `1` из `a`,
    список `list`, который не содержит ни одного элемента.
    
    Исключение возникло в строке `42` файла 'TESTS:\runtime\test_index_error.py'.
    
       39| def test_Empty():
       40|     a = []
       41|     try:
    -->42|         c = a[1]
                       ^^^^
       43|     except IndexError as e:

            a:  []
        


Long list
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 27, in test_Long_list
        print(a[60], b[0])
    IndexError: list index out of range
    
    `IndexError` возникает, когда вы пытаетесь получить элемент из списка,
    кортежа или аналогичного объекта (последовательности) и используете индекс, который
    не существует. Обычно это происходит потому, что указанный вами индекс
    больше, чем длина последовательности.
    
    Вы пытались получить элемент с индексом `60` из `a`,
    список `list` длиной `40`.
    Допустимыми значениями индекса `a` являются целые числа в диапазоне
    от `-40` до `39`.
    
    Исключение возникло в строке `27` файла 'TESTS:\runtime\test_index_error.py'.
    
       24| a = list(range(40))
       25| b = tuple(range(50))
       26| try:
    -->27|     print(a[60], b[0])
                     ^^^^^
       28| except IndexError as e:

            a:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...]
                len(a): 40
        
        


Short tuple
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 10, in test_Short_tuple
        print(a[3], b[2])
    IndexError: tuple index out of range
    
        Помните: первый элемент кортеж `tuple` имеет индекс не 1, а 0.
        
    `IndexError` возникает, когда вы пытаетесь получить элемент из списка,
    кортежа или аналогичного объекта (последовательности) и используете индекс, который
    не существует. Обычно это происходит потому, что указанный вами индекс
    больше, чем длина последовательности.
    
    Вы пытались получить элемент с индексом `3` из `a`,
    кортеж `tuple` длиной `3`.
    Допустимыми значениями индекса `a` являются целые числа в диапазоне
    от `-3` до `2`.
    
    Исключение возникло в строке `10` файла 'TESTS:\runtime\test_index_error.py'.
    
        7| a = (1, 2, 3)
        8| b = [1, 2, 3]
        9| try:
    -->10|     print(a[3], b[2])
                     ^^^^
       11| except IndexError as e:

            a:  (1, 2, 3)
        


KeyError
--------


ChainMap
~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\collections\__init__.py", line 1056, in pop
        return self.maps[0].pop(key, *args)
    KeyError: 42
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 65, in test_ChainMap
        d.pop(42)
    KeyError: 'Key not found in the first mapping: 42'
    
    `KeyError` возникает, когда значение не найдено в качестве
    ключа в словаре или аналогичном объекте.
    
    Ключ `42` не найден в `d`, объекте типа `ChainMap`.
    
    Исключение возникло в строке `65` файла 'TESTS:\runtime\test_key_error.py'.
    
       62| from collections import ChainMap
       63| d = ChainMap({}, {})
       64| try:
    -->65|     d.pop(42)
               ^^^^^^^^^
       66| except KeyError as e:

            d:  ChainMap({}, {})
            d.pop:  <bound method ChainMap.pop> of ChainMap({}, {})
        


Forgot to convert to string
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 120, in test_Forgot_to_convert_to_string
        print(squares[2])
    KeyError: 2
    
        Вы забыли преобразовать `2` в строку?
        
    `KeyError` возникает, когда значение не найдено в качестве
    ключа в словаре или аналогичном объекте.
    
    В словаре `squares` не найден ключ `2`.
    `squares` содержит строковый ключ, который идентичен `str(2)`.
    Возможно, вы забыли преобразовать ключ в строку.
    
    Исключение возникло в строке `120` файла 'TESTS:\runtime\test_key_error.py'.
    
       117| def test_Forgot_to_convert_to_string():
       118|     squares = {"1": 1, "2": 4, "3": 9}
       119|     try:
    -->120|         print(squares[2])
                          ^^^^^^^^^^
       121|     except KeyError as e:

            squares:  {'1': 1, '2': 4, '3': 9}
        


Generic key error
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 46, in test_Generic_key_error
        d["c"]
    KeyError: 'c'
    
    `KeyError` возникает, когда значение не найдено в качестве
    ключа в словаре или аналогичном объекте.
    
    В словаре `d` не найден ключ `'c'`.
    
    Исключение возникло в строке `46` файла 'TESTS:\runtime\test_key_error.py'.
    
       43| def test_Generic_key_error():
       44|     d = {"a": 1, "b": 2}
       45|     try:
    -->46|         d["c"]
                   ^^^^^^
       47|     except KeyError as e:

            d:  {'a': 1, 'b': 2}
        


Popitem empty ChainMap
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\collections\__init__.py", line 1049, in popitem
        return self.maps[0].popitem()
    KeyError: 'popitem(): dictionary is empty'
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 27, in test_Popitem_empty_ChainMap
        alpha.popitem()
    KeyError: 'No keys found in the first mapping.'
    
        `alpha` -- это пустой `ChainMap`.
        
    `KeyError` возникает, когда значение не найдено в качестве
    ключа в словаре или аналогичном объекте.
    
    Вы попытались получить элемент из `alpha`, который является пустым `ChainMap`.
    
    Исключение возникло в строке `27` файла 'TESTS:\runtime\test_key_error.py'.
    
       24| from collections import ChainMap
       25| alpha = ChainMap({}, {})
       26| try:
    -->27|     alpha.popitem()
               ^^^^^^^^^^^^^^^
       28| except KeyError as e:

            alpha:  ChainMap({}, {})
            alpha.popitem:  <bound method ChainMap.popitem> of ChainMap({}, {})
        


Popitem empty dict
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 8, in test_Popitem_empty_dict
        d.popitem()
    KeyError: 'popitem(): dictionary is empty'
    
        `d` -- пустой словарь `dict`.
        
    `KeyError` возникает, когда значение не найдено в качестве
    ключа в словаре или аналогичном объекте.
    
    Вы попытались получить элемент из `d`, который является пустым словарём `dict`.
    
    Исключение возникло в строке `8` файла 'TESTS:\runtime\test_key_error.py'.
    
       5| def test_Popitem_empty_dict():
       6|     d = {}
       7|     try:
    -->8|         d.popitem()
                  ^^^^^^^^^^^
       9|     except KeyError as e:

            d:  {}
            d.popitem:  <builtin method popitem of dict object>
        


Similar names
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 151, in test_Similar_names
        a = second["alpha"]
    KeyError: 'alpha'
    
        Вы имели в виду `'alpha0'`?
        
    `KeyError` возникает, когда значение не найдено в качестве
    ключа в словаре или аналогичном объекте.
    
    В словаре `second` не найден ключ `'alpha'`.
    `second` имеет несколько ключей, похожих на `'alpha'`, включая:
    `'alpha0', 'alpha11', 'alpha12'`.
    
    Исключение возникло в строке `151` файла 'TESTS:\runtime\test_key_error.py'.
    
       147|     assert ok, diff
       148| 
       149| second = {"alpha0": 1, "alpha11": 2, "alpha12": 3}
       150| try:
    -->151|     a = second["alpha"]
                    ^^^^^^^^^^^^^^^
       152| except KeyError as e:

            second:  {'alpha0': 1, 'alpha11': 2, 'alpha12': 3}
        


String by mistake
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 102, in test_String_by_mistake
        d["(0, 0)"]
    KeyError: '(0, 0)'
    
        Вы ошибочно преобразовали `(0, 0)` в строку.
        
    `KeyError` возникает, когда значение не найдено в качестве
    ключа в словаре или аналогичном объекте.
    
    В словаре `d` не найден ключ `'(0, 0)'`.
    `'(0, 0)'` -- это строка.
    Существует ключ `d`, строковое представление которого
    идентично `'(0, 0)'`.
    
    Исключение возникло в строке `102` файла 'TESTS:\runtime\test_key_error.py'.
    
        98| chain_map_string_by_mistake()  # do not show in docs
        99| 
       100| d = {(0, 0): "origin"}
       101| try:
    -->102|     d["(0, 0)"]
                ^^^^^^^^^^^
       103| except KeyError as e:

            d:  {(0, 0): 'origin'}
        


LookupError
-----------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_lookup_error.py", line 10, in test_Generic
        raise LookupError("Fake message")
    LookupError: Fake message
    
    `LookupError` является базовым классом для исключений, возникающих
    когда ключ или индекс, используемый в связке или последовательности, недействителен.
    Он также может быть вызван непосредственно функцией codecs.lookup().
    
    
    Исключение возникло в строке `10` файла 'TESTS:\runtime\test_lookup_error.py'.
    
        4| def test_Generic():
        5|     try:
        6|         # LookupError is the base class for KeyError and IndexError.
        7|         # It should normally not be raised by user code,
        8|         # other than possibly codecs.lookup(), which is why we raise
        9|         # it directly here for our example.
    -->10|         raise LookupError("Fake message")
       11|     except LookupError as e:

            LookupError:  <class LookupError>
        


ModuleNotFoundError
-------------------


Need to install module
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 80, in test_Need_to_install_module
        import alphabet
    ModuleNotFoundError: No module named 'alphabet'
    
    `ModuleNotFoundError` указывает на то, что вы
    пытаетесь импортировать модуль, который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя модуля
    или потому, что он не установлен на вашем компьютере.
    
    Модуль с именем `alphabet` не может быть импортирован.
    Возможно, вам необходимо установить его.
    
    Исключение возникло в строке `80` файла 'TESTS:\runtime\test_module_not_found_error.py'.
    
       78| def test_Need_to_install_module():
       79|     try:
    -->80|         import alphabet
       81|     except ModuleNotFoundError as e:


Not a package
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 23, in test_Not_a_package
        import os.xxx
    ModuleNotFoundError: No module named 'os.xxx'; 'os' is not a package
    
    `ModuleNotFoundError` указывает на то, что вы
    пытаетесь импортировать модуль, который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя модуля
    или потому, что он не установлен на вашем компьютере.
    
    `xxx` не может быть импортирован из `os`.
    
    Исключение возникло в строке `23` файла 'TESTS:\runtime\test_module_not_found_error.py'.
    
       20| def test_Not_a_package():
       21| 
       22|     try:
    -->23|         import os.xxx
       24|     except ModuleNotFoundError as e:


Not a package similar name
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 37, in test_Not_a_package_similar_name
        import os.pathh
    ModuleNotFoundError: No module named 'os.pathh'; 'os' is not a package
    
        Вы имели в виду `import os.path`?
        
    `ModuleNotFoundError` указывает на то, что вы
    пытаетесь импортировать модуль, который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя модуля
    или потому, что он не установлен на вашем компьютере.
    
    Возможно, вы имели в виду `import os.path`.
    `path` -- это имя, похожее на `pathh`, и это модуль, который
    может быть импортирован из `os`.
    
    Исключение возникло в строке `37` файла 'TESTS:\runtime\test_module_not_found_error.py'.
    
       35| def test_Not_a_package_similar_name():
       36|     try:
    -->37|         import os.pathh
       38|     except ModuleNotFoundError as e:


Object not module
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 51, in test_Object_not_module
        import os.open
    ModuleNotFoundError: No module named 'os.open'; 'os' is not a package
    
        Вы имели в виду `from os import open`?
        
    `ModuleNotFoundError` указывает на то, что вы
    пытаетесь импортировать модуль, который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя модуля
    или потому, что он не установлен на вашем компьютере.
    
    `open` -- это не отдельный модуль, а объект, который является частью `os`.
    
    
    Исключение возникло в строке `51` файла 'TESTS:\runtime\test_module_not_found_error.py'.
    
       49| def test_Object_not_module():
       50|     try:
    -->51|         import os.open
       52|     except ModuleNotFoundError as e:

            open:  <builtin function open>
        


Similar object not module
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 65, in test_Similar_object_not_module
        import os.opend
    ModuleNotFoundError: No module named 'os.opend'; 'os' is not a package
    
        Вы имели в виду `from os import open`?
        
    `ModuleNotFoundError` указывает на то, что вы
    пытаетесь импортировать модуль, который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя модуля
    или потому, что он не установлен на вашем компьютере.
    
    Возможно, вы имели в виду `from os import open`.
    `open` -- это имя, похожее на `opend` и являющееся объектом,
    который может быть импортирован из `os`.
    Другие объекты с похожими именами, которые являются частью
     `os`, включают `popen`.
    
    Исключение возникло в строке `65` файла 'TESTS:\runtime\test_module_not_found_error.py'.
    
       63| def test_Similar_object_not_module():
       64|     try:
    -->65|         import os.opend
       66|     except ModuleNotFoundError as e:


Standard library module
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 7, in test_Standard_library_module
        import Tkinter
    ModuleNotFoundError: No module named 'Tkinter'
    
        Вы имели в виду `tkinter`?
        
    `ModuleNotFoundError` указывает на то, что вы
    пытаетесь импортировать модуль, который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя модуля
    или потому, что он не установлен на вашем компьютере.
    
    Модуль с именем `Tkinter` не может быть импортирован.
    Возможно, вам необходимо установить его.
    Следующие существующие модули имеют имена, похожие 
    на тот модуль, который вы пытались импортировать:
    `tkinter, _tkinter`
    
    Исключение возникло в строке `7` файла 'TESTS:\runtime\test_module_not_found_error.py'.
    
       5| def test_Standard_library_module():
       6|     try:
    -->7|         import Tkinter
       8|     except ModuleNotFoundError as e:


no curses
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 97, in test_no_curses
        import curses
    ModuleNotFoundError: No module named '_curses'
    
        Модуль curses редко устанавливается вместе с Python в Windows.
        
    `ModuleNotFoundError` указывает на то, что вы
    пытаетесь импортировать модуль, который не может быть найден Python.
    Это может быть связано с тем, что вы неправильно написали имя модуля
    или потому, что он не установлен на вашем компьютере.
    
    Вы попытались импортировать модуль curses.
    Модуль curses редко устанавливается вместе с Python в Windows.
    
    Исключение возникло в строке `97` файла 'TESTS:\runtime\test_module_not_found_error.py'.
    
       95| def test_no_curses():
       96|     try:
    -->97|         import curses
       98|     except ModuleNotFoundError as e:


NameError
---------


Annotated variable
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 31, in test_Annotated_variable
        y = x
    NameError: name 'x' is not defined
    
        Вы использовали двоеточие вместо знака равенства?
        
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    В вашей программе не существует объекта с именем `x`.
    Найдена подсказка типа для `x` в области видимости global.
    Возможно, вы использовали двоеточие вместо знака равенства и написали
    
        x : 3
    
    вместо
    
        x = 3
    
    Исключение возникло в строке `31` файла 'TESTS:\runtime\test_name_error.py'.
    
       29| def test_Annotated_variable():
       30|     try:
    -->31|         y = x
                       ^
       32|     except NameError as e:


Custom name
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 234, in test_Custom_name
        python
    NameError: name 'python' is not defined
    
        Вы уже используете Python!
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    Вы уже используете Python!
    Исключение возникло в строке `234` файла 'TESTS:\runtime\test_name_error.py'.
    
       232| def test_Custom_name():
       233|     try:
    -->234|         python
                    ^^^^^^
       235|     except NameError as e:


Free variable referenced
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 217, in test_Free_variable_referenced
        outer()
      File "TESTS:\runtime\test_name_error.py", line 213, in outer
        inner()
      File "TESTS:\runtime\test_name_error.py", line 212, in inner
        return var
    NameError: free variable 'var' referenced before assignment in enclosing scope. Did you mean: 'vars'?
    
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    В вашей программе `var` -- это неизвестное имя,
    которому еще не присвоено значение.
    
    Выполнение остановлено на строке `217` файла 'TESTS:\runtime\test_name_error.py'.
    
       213|     inner()
       214|     var = 4
       215| 
       216| try:
    -->217|     outer()
                ^^^^^^^
       218| except NameError as e:

            outer:  <function outer>
                defined in <function test_Free_variable_referenced>
        
    Исключение возникло в строке `212` файла 'TESTS:\runtime\test_name_error.py'.
    
       211| def inner():
    -->212|     return var
                       ^^^


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 15, in test_Generic
        this = something
    NameError: name 'something' is not defined
    
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    В вашей программе не существует объекта с именем `something`.
    Дополнительной информации нет.
    
    Исключение возникло в строке `15` файла 'TESTS:\runtime\test_name_error.py'.
    
       13| def test_Generic():
       14|     try:
    -->15|         this = something
                          ^^^^^^^^^
       16|     except NameError as e:


Missing import
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 138, in test_Missing_import
        unicodedata.something
    NameError: name 'unicodedata' is not defined
    
        Вы забыли импортировать `unicodedata`?
        
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    
    Имя `unicodedata` не определено в вашей программе.
    Возможно, вы забыли импортировать `unicodedata`, которое находится
    в стандартной библиотеке Python.
    
    
    Исключение возникло в строке `138` файла 'TESTS:\runtime\test_name_error.py'.
    
       134| if friendly_traceback.get_lang() == "en":
       135|     assert "I have no additional information for you." in result
       136| 
       137| try:
    -->138|     unicodedata.something
                ^^^^^^^^^^^
       139| except NameError as e:


Missing module name
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 320, in test_Missing_module_name
        frame = Frame()
    NameError: name 'Frame' is not defined. Did you mean: 'frame'?
    
        Вы забыли добавить `tkinter.`?
        
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    В вашей программе не существует объекта с именем `Frame`.
    
    Объект global `tkinter`
    имеет атрибут с именем `Frame`.
    Возможно, вам следовало написать `tkinter.Frame`
    вместо `Frame`.
    
    `Frame` is a name found in the following modules:
    tkinter, tracemalloc.
    Perhaps you forgot to import `Frame` from one of these modules.
    
    Исключение возникло в строке `320` файла 'TESTS:\runtime\test_name_error.py'.
    
       317| @pytest.mark.skipif(not tkinter, reason="tkinter not present; likely MacOS")
       318| def test_Missing_module_name():
       319|     try:
    -->320|         frame = Frame()
                            ^^^^^
       321|     except NameError as e:


Missing self 1
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 270, in test_Missing_self_1
        str(a)
      File "TESTS:\runtime\test_name_error.py", line 261, in __str__
        toys_list = add_toy(  # ensure that it can see 'self' on following line
    NameError: name 'add_toy' is not defined
    
        Вы написали `self` не в том месте?
        
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    В вашей программе не существует объекта с именем `add_toy`.
    
    Объект local `<Pet object> defined in <function test_name_error.test_Missing_self_1>`
    имеет атрибут с именем `add_toy`.
    Возможно, вам следовало написать `self.add_toy(...`
    вместо `add_toy(self, ...`.
    
    Выполнение остановлено на строке `270` файла 'TESTS:\runtime\test_name_error.py'.
    
       266|             return "{} has no toys".format(self.name)
       267| 
       268| a = Pet('Fido')
       269| try:
    -->270|     str(a)
                ^^^^^^
       271| except NameError as e:

            a:  <Pet object>
                defined in <function test_name_error.test_Missing_self_1>
            str:  <class str>
        
    Исключение возникло в строке `261` файла 'TESTS:\runtime\test_name_error.py'.
    
       259| def __str__(self):
       260|     # self at the wrong place
    -->261|     toys_list = add_toy(  # ensure that it can see 'self' on following line
                            ^^^^^^^
       262|                         self, 'something')
       263|     if self.toys:


Missing self 2
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 305, in test_Missing_self_2
        str(a)
      File "TESTS:\runtime\test_name_error.py", line 297, in __str__
        toys_list = add_toy('something')
    NameError: name 'add_toy' is not defined
    
        Вы забыли добавить `self.`?
        
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    В вашей программе не существует объекта с именем `add_toy`.
    
    Объект local, `<Pet object> defined in <function test_name_error.test_Missing_self_2>`,
    имеет атрибут с именем `add_toy`.
    Возможно, вам следовало написать `self.add_toy`
    вместо `add_toy`.
    
    Выполнение остановлено на строке `305` файла 'TESTS:\runtime\test_name_error.py'.
    
       301|             return "{} has no toys".format(self.name)
       302| 
       303| a = Pet('Fido')
       304| try:
    -->305|     str(a)
                ^^^^^^
       306| except NameError as e:

            a:  <Pet object>
                defined in <function test_name_error.test_Missing_self_2>
            str:  <class str>
        
    Исключение возникло в строке `297` файла 'TESTS:\runtime\test_name_error.py'.
    
       295| def __str__(self):
       296|     # Missing self.
    -->297|     toys_list = add_toy('something')
                            ^^^^^^^
       298|     if self.toys:


Synonym
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 97, in test_Synonym
        cost  # wrote from math import * above
    NameError: name 'cost' is not defined. Did you mean: 'cos'?
    
        Вы имели в виду `cos`?
        
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    В вашей программе не существует объекта с именем `cost`.
    Вместо того, чтобы написать `cost`, возможно, вы имели в виду следующее:
    *  Глобальная область видимости: `cos`, `cosh`
    
    Исключение возникло в строке `97` файла 'TESTS:\runtime\test_name_error.py'.
    
       93| if friendly_traceback.get_lang() == "en":
       94|     assert "The Python builtin `chr` has a similar name." in result
       95| 
       96| try:
    -->97|     cost  # wrote from math import * above
               ^^^^
       98| except NameError as e:


missing import2
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 153, in test_missing_import2
        ABCMeta
    NameError: name 'ABCMeta' is not defined
    
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    В вашей программе не существует объекта с именем `ABCMeta`.
    `ABCMeta` is a name found in the following modules:
    selectors, typing, abc, numbers.
    Perhaps you forgot to import `ABCMeta` from one of these modules.
    
    Исключение возникло в строке `153` файла 'TESTS:\runtime\test_name_error.py'.
    
       151| def test_missing_import2():
       152|     try:
    -->153|         ABCMeta
                    ^^^^^^^
       154|     except NameError as e:


missing import3
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 168, in test_missing_import3
        AF_APPLETALK
    NameError: name 'AF_APPLETALK' is not defined
    
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    В вашей программе не существует объекта с именем `AF_APPLETALK`.
    `AF_APPLETALK` -- это имя, найденное в модуле `socket`.
    Возможно, вы забыли написать
    
        from socket import AF_APPLETALK
    
    Исключение возникло в строке `168` файла 'TESTS:\runtime\test_name_error.py'.
    
       166| def test_missing_import3():
       167|     try:
    -->168|         AF_APPLETALK
                    ^^^^^^^^^^^^
       169|     except NameError as e:


missing import from other 1
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 183, in test_missing_import_from_other_1
        plt.something
    NameError: name 'plt' is not defined
    
        Did you forget to import `matplotlib.pyplot`?
        
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    
    The name `plt` is not defined in your program.
    Perhaps you forgot to write
    
        import matplotlib.pyplot as plt
    
    
    Исключение возникло в строке `183` файла 'TESTS:\runtime\test_name_error.py'.
    
       180| def test_missing_import_from_other_1():
       181|     friendly_traceback.add_other_module_names_synonyms({"plt": "matplotlib.pyplot"})
       182|     try:
    -->183|         plt.something
                    ^^^
       184|     except NameError as e:


missing import from other 2
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 197, in test_missing_import_from_other_2
        show()
    NameError: name 'show' is not defined
    
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    В вашей программе не существует объекта с именем `show`.
    `show` is a name found in the following modules:
    mailcap, matplotlib.pyplot, funny.
    Perhaps you forgot to import `show` from one of these modules.
    
    Исключение возникло в строке `197` файла 'TESTS:\runtime\test_name_error.py'.
    
       194| def test_missing_import_from_other_2():
       195|     friendly_traceback.add_other_attribute_names({"show": ["matplotlib.pyplot", "funny"] })
       196|     try:
    -->197|         show()
                    ^^^^
       198|     except NameError as e:


special keyword
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 352, in test_special_keyword
        brek
    NameError: name 'brek' is not defined
    
        Вы имели в виду `break`?
        
    `NameError` указывает на то, что переменная или
    имя переменной либо функции неизвестно Python.
    Чаще всего это происходит из-за орфографической ошибки.
    Однако иногда это происходит потому, что имя используется
    до того, как оно было обьявлено или инициализировано.
    
    Подозреваю, что ключевое слово `break` вы написали по ошибке.
    
    Исключение возникло в строке `352` файла 'TESTS:\runtime\test_name_error.py'.
    
       349| if friendly_traceback.get_lang() == "en":
       350|     assert "Did you mean `continue`" in result
       351| try:
    -->352|     brek
                ^^^^
       353| except NameError as e:


OsError
-------


Urllib error
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\urllib\request.py", line 1348, in do_open
           ... Другие строки не показаны. ...
      File "PYTHON_LIB:\socket.py", line 824, in create_connection
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
      File "PYTHON_LIB:\socket.py", line 955, in getaddrinfo
        for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
    socket.gaierror: [Errno 11001] getaddrinfo failed
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 10, in test_Urllib_error
        request.urlopen("http://does_not_exist")
    URLError: <urlopen error [Errno 11001] getaddrinfo failed>
    
    Исключение типа `URLError` является наследником `OSError`.
    
    Nothing more specific is known about `URLError`.
    
    `OSError` обычно вызывается операционной системой чтобы указать,
    что операция не разрешена или что ресурс недоступен.
    
    Предполагаю, что вы пытаетесь подключиться к серверу
    и что соединение не может быть установлено.
    Если это так, проверьте, нет ли опечаток в URL-адресе
    и проверьте подключение к Интернету.
    
    Исключение возникло в строке `10` файла 'TESTS:\runtime\test_os_error.py'.
    
        6| @pytest.mark.skipif(random.randint(0, 50) < 59, reason="very long test")
        7| def test_Urllib_error():
        8|     from urllib import request, error
        9|     try:
    -->10|         request.urlopen("http://does_not_exist")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       11|     except error.URLError as e:

            request:  <module urllib.request> from PYTHON_LIB:\urllib\request.py
            request.urlopen:  <function urlopen>
        


invalid argument
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 50, in test_invalid_argument
        open("c:\test.txt")
    OSError: [Errno 22] Invalid argument: 'c:\test.txt'
    
        Возможно, вам нужно удвоить символы обратной косой черты.
        
    `OSError` обычно вызывается операционной системой чтобы указать,
    что операция не разрешена или что ресурс недоступен.
    
    Предполагаю, что вы написали имя файла или путь, который содержит
    по крайней мере один символ обратной косой черты, `\`.
    Python, вероятно, интерпретировал это как начало того,
    что известно как последовательность экранирования.
    Чтобы решить эту проблему, либо напишите так называемую 'необработанную строку', добавив букву `r` в качестве префикса перед
    именем файла или путем, либо замените все одинарные символы обратной косой черты `\` на двойные: `\\`.
    
    Исключение возникло в строке `50` файла 'TESTS:\runtime\test_os_error.py'.
    
       47| if os.name != "nt":
       48|     return "Windows test only", "No result"
       49| try:
    -->50|     open("c:\test.txt")
               ^^^^^^^^^^^^^^^^^^^
       51| except OSError as e:

            open:  <builtin function open>
        


no information
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 30, in test_no_information
        raise OSError("Some unknown message")
    OSError: Some unknown message
    
        Friendly-traceback не определил причину возникновения этой ошибки.
        
        
    `OSError` обычно вызывается операционной системой чтобы указать,
    что операция не разрешена или что ресурс недоступен.
    
    По этому исключению информации нет.
    Пожалуйста, сообщите об этом примере по адресу
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    Если вы используете REPL, используйте для этого `www('bug')`.
    
    Если вы используете консоль Friendly, используйте `www()`, чтобы
    выполнить поиск в Интернете для этого конкретного случая.
    
    Исключение возникло в строке `30` файла 'TESTS:\runtime\test_os_error.py'.
    
       27| old_debug = friendly_traceback.debug_helper.DEBUG
       28| friendly_traceback.debug_helper.DEBUG = False
       29| try:
    -->30|     raise OSError("Some unknown message")
       31| except OSError as e:

            OSError:  <class OSError>
        


OverflowError
-------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 6, in test_Generic
        2.0 ** 1600
    OverflowError: (34, 'Result too large')
    
    `OverflowError` возникает, когда результат арифметической операции слишком велик
    для того, чтобы его мог обработать процессор компьютера.
    
    Исключение возникло в строке `6` файла 'TESTS:\runtime\test_overflow_error.py'.
    
       4| def test_Generic():
       5|     try:
    -->6|         2.0 ** 1600
                  ^^^^^^^^^^^
       7|     except OverflowError as e:


Huge lenght
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 25, in test_Huge_lenght
        len(huge)
    OverflowError: Python int too large to convert to C ssize_t
    
    `OverflowError` возникает, когда результат арифметической операции слишком велик
    для того, чтобы его мог обработать процессор компьютера.
    
    Исключение возникло в строке `25` файла 'TESTS:\runtime\test_overflow_error.py'.
    
       22| def test_Huge_lenght():
       23|     huge = range(1<<10000)
       24|     try:
    -->25|         len(huge)
                   ^^^^^^^^^
       26|     except OverflowError as e:

            huge:  range(0, ...)
                   len(huge): Объект слишком велик для обработки Python.
        
            len:  <builtin function len>
        


RecursionError
--------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_recursion_error.py", line 8, in test_Generic
        a()
           ... Другие строки не показаны. ...
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
    RecursionError: maximum recursion depth exceeded
    
    `RecursionError` возникает, когда функция вызывает сама себя
    прямо или косвенно, слишком много раз.
    Это почти всегда указывает на то, что вы допустили ошибку в своем коде
    и что ваша программа никогда не завершится.
    
    Выполнение остановлено на строке `8` файла 'TESTS:\runtime\test_recursion_error.py'.
    
       5| def a():
       6|     return a()
       7| try:
    -->8|     a()
              ^^^
       9| except RecursionError as e:

            a:  <function a> defined in <function test_Generic>
        
    Исключение возникло в строке `6` файла 'TESTS:\runtime\test_recursion_error.py'.
    
       5| def a():
    -->6|     return a()
                     ^^^

            a:  <function a> defined in <function test_Generic>
        


TypeError
---------


Argument of object is not iterable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 843, in test_Argument_of_object_is_not_iterable
        a in b
    TypeError: argument of type 'object' is not iterable
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Итерабельность - это объект, способный возвращать свои члены по одному за раз.
    Контейнеры Python (`list, tuple, dict` и т.д.) являются итерабельными.
    'b' не является контейнером. Здесь требуется контейнер.
    
    Исключение возникло в строке `843` файла 'TESTS:\runtime\test_type_error.py'.
    
       840| a = object()
       841| b = object()
       842| try:
    -->843|     a in b
                ^^^^^^
       844| except TypeError as e:

            a:  <object object>
            b:  <object object>
        


Bad type for unary operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 427, in test_Bad_type_for_unary_operator
        a =+ "def"
    TypeError: bad operand type for unary +: 'str'
    
        Возможно, вы хотели написать `+=` вместо `=+`
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Вы попытались использовать унарный оператор '+'
    со следующим типом объекта: строка (`str`).
    Эта операция не определена для данного типа объекта.
    
    Возможно, вы хотели написать `+=` вместо `=+`
    
    Исключение возникло в строке `427` файла 'TESTS:\runtime\test_type_error.py'.
    
       422|     assert "You tried to use the unary operator '~'" in result
       423| 
       424| try:
       425|     # fmt: off
       426|     a = "abc"
    -->427|     a =+ "def"
                   ^^^^^^^
       428|     # fmt: on


Builtin has no len
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 901, in test_Builtin_has_no_len
        len("Hello world".split)
    TypeError: object of type 'builtin_function_or_method' has no len()
    
        Вы забыли вызвать `"Hello world".split`?
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Предполагаю, что вы забыли добавить круглые скобки для вызова `"Hello world".split`.
    Возможно, вы хотели написать:
    `len("Hello world".split())`.
    
    Исключение возникло в строке `901` файла 'TESTS:\runtime\test_type_error.py'.
    
       899| def test_Builtin_has_no_len():
       900|     try:
    -->901|         len("Hello world".split)
                    ^^^^^^^^^^^^^^^^^^^^^^^^
       902|     except TypeError as e:

            len:  <builtin function len>
            "Hello world".split:  <builtin method split of str object>
        


Can only concatenate
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 39, in test_Can_only_concatenate
        result = a_tuple + a_list
    TypeError: can only concatenate tuple (not "list") to tuple
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Вы попытались обьединить (сложить) два разных типа объектов:
    кортеж `tuple` и список `list`.
    
    Исключение возникло в строке `39` файла 'TESTS:\runtime\test_type_error.py'.
    
       36| try:
       37|     a_tuple = (1, 2, 3)
       38|     a_list = [1, 2, 3]
    -->39|     result = a_tuple + a_list
                        ^^^^^^^^^^^^^^^^
       40| except TypeError as e:

            a_list:  [1, 2, 3]
            a_tuple:  (1, 2, 3)
        


Cannot convert dictionary update sequence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 886, in test_Cannot_convert_dictionary_update_sequence
        dd.update([1, 2, 3])
    TypeError: cannot convert dictionary update sequence element #0 to a sequence
    
        Возможно, вам следует использовать метод `dict.fromkeys()`.
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    `dict.update()` не принимает последовательность в качестве аргумента.
    Вместо того, чтобы писать `dd.update([1, 2, 3])`
    возможно, следует использовать метод `dict.fromkeys()`: `dd.update( dict.fromkeys([1, 2, 3]) )`.
    
    Исключение возникло в строке `886` файла 'TESTS:\runtime\test_type_error.py'.
    
       882|     assert "you should use the `dict.fromkeys()`" in result
       883| 
       884| dd = {"a": "a"}
       885| try:
    -->886|     dd.update([1, 2, 3])
                ^^^^^^^^^^^^^^^^^^^^
       887| except TypeError as e:

            dd:  {'a': 'a'}
            dd.update:  <builtin method update of dict object>
        


Cannot multiply by non int
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 652, in test_Cannot_multiply_by_non_int
        "a" * "2"
    TypeError: can't multiply sequence by non-int of type 'str'
    
        Вы забыли преобразовать `"2"` в целое число?
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Вы можете умножать только последовательности, такие как список, кортежи,
    строки и т.д., на целые числа.
    Возможно, вы забыли преобразовать `"2"` в целое число.
    
    Исключение возникло в строке `652` файла 'TESTS:\runtime\test_type_error.py'.
    
       648| if friendly_traceback.get_lang() == "en":
       649|     assert "Did you forget to convert `c` into an integer?" in result
       650| 
       651| try:
    -->652|     "a" * "2"
                ^^^^^^^^^
       653| except TypeError as e:


Cannot unpack non iterable object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 857, in test_Cannot_unpack_non_iterable_object
        a, b = 42.0
    TypeError: cannot unpack non-iterable float object
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Распаковка является удобным способом присвоить имя
    каждому элементу итерирумого обьекта.
    Итерабельным является объект, способный возвращать свои элементы по одному за раз.
    Контейнеры Python (`list, tuple, dict` и т.д.) являются итерабельными,
    но не объекты типа `float`.
    
    Исключение возникло в строке `857` файла 'TESTS:\runtime\test_type_error.py'.
    
       855| def test_Cannot_unpack_non_iterable_object():
       856|     try:
    -->857|         a, b = 42.0
       858|     except TypeError as e:


Cant mod complex numbers
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 54, in test_Cant_mod_complex_numbers
        3 + 3j % 2
    TypeError: unsupported operand type(s) for %: 'complex' and 'int'
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    You cannot use complex numbers with the modulo operator `%`.
    
    Исключение возникло в строке `54` файла 'TESTS:\runtime\test_type_error.py'.
    
       52| def test_Cant_mod_complex_numbers():
       53|     try:
    -->54|         3 + 3j % 2
                       ^^^^^^
       55|     except TypeError as e:


Comparison not supported
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 375, in test_Comparison_not_supported
        b >= a
    TypeError: '>=' not supported between instances of 'int' and 'str'
    
        Вы забыли преобразовать строку `a` в целое число (`int`)?
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Вы попытались выполнить порядковое сравнение (>=)
    двух несовместимых типов объектов:
    целое число (`int`) и строка (`str`).
    Возможно, вы забыли преобразовать строку `a` в целое число (`int`).
    
    Исключение возникло в строке `375` файла 'TESTS:\runtime\test_type_error.py'.
    
       372| try:
       373|     a = "2"
       374|     b = 42
    -->375|     b >= a
                ^^^^^^
       376| except TypeError as e:

            a:  '2'
            b:  42
        


Derive from BaseException
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 594, in test_Derive_from_BaseException
        raise "exception"  # noqa
    TypeError: exceptions must derive from BaseException
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Exceptions must be derived from `BaseException`.
    It is recommended that user-defined exceptions derive from
    `Exception`, a subclass of `BaseException`.
    
    Исключение возникло в строке `594` файла 'TESTS:\runtime\test_type_error.py'.
    
       590| if friendly_traceback.get_lang() == "en":
       591|     assert "you must only have classes that derive from `BaseException`" in result
       592| 
       593| try:
    -->594|     raise "exception"  # noqa
       595| except TypeError as e:


Generator has no len
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 1062, in test_Generator_has_no_len
        nb = len(letter
    TypeError: object of type 'generator' has no len()
    
        You likely need to build a list first.
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    I am guessing that you were trying to count the number of elements
    produced by a generator expression. You first need to capture them
    in a list:
    
        len([letter                 for letter in "word"])
    
    Исключение возникло в строке `1062` файла 'TESTS:\runtime\test_type_error.py'.
    
       1060| def test_Generator_has_no_len():
       1061|     try:
    -->1062|         nb = len(letter
                          ^^^^^^^^^^
       1063|                  for letter in "word")
                              ^^^^^^^^^^^^^^^^^^^^^
       1064|     except TypeError as e:

            len:  <builtin function len>
        


Indices must be integers or slices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 736, in test_Indices_must_be_integers_or_slices
        [1, 2, 3]["2"]
    TypeError: list indices must be integers or slices, not str
    
        Вы забыли преобразовать `"2"` в целое число?
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    В выражении `[1, 2, 3]["2"]`
    то, что включено между квадратными скобками, `[...]`,
    должно быть либо целым числом, либо фрагментом
    (`start:stop` или `start:stop:step`) 
    а вы вместо этого использовали строка (`str`).
    
    Возможно, вы забыли преобразовать `"2"` в целое число.
    
    Исключение возникло в строке `736` файла 'TESTS:\runtime\test_type_error.py'.
    
       732| if friendly_traceback.get_lang() == "en":
       733|     assert "Perhaps you forgot to convert `2.0` into an integer." in result
       734| 
       735| try:
    -->736|     [1, 2, 3]["2"]
                ^^^^^^^^^^^^^^
       737| except TypeError as e:


Not an integer
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 698, in test_Not_an_integer
        range(c, d)
    TypeError: 'str' object cannot be interpreted as an integer
    
        Вы забыли преобразовать `c, d` в целые числа?
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Вы записали объект типа `str`, где ожидалось целочисленное значение.
    Возможно, вы забыли преобразовать `c, d` в целые числа.
    Исключение возникло в строке `698` файла 'TESTS:\runtime\test_type_error.py'.
    
       694|     assert "Perhaps you forgot to convert `1.0" in result
       695| 
       696| c, d = "2", "3"
       697| try:
    -->698|     range(c, d)
                ^^^^^^^^^^^
       699| except TypeError as e:

            c:  '2'
            d:  '3'
            range:  <class range>
        


Not callable
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 561, in test_Not_callable
        _ = [1, 2](a + b)
    TypeError: 'list' object is not callable
    
        Вы имели в виду `[1, 2][a + b]`?
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Из-за окружающих скобок, `(a + b)` 
    интерпретируется Python как вызов функции для 
    `[1, 2]`, которая является объектом типа `list`
    который не может быть вызван.
    
    `[1, 2]` -- это последовательность.
    Возможно, вы хотели использовать `[]` вместо `()` и написать
    `[1, 2][a + b]`
    
    Исключение возникло в строке `561` файла 'TESTS:\runtime\test_type_error.py'.
    
       557|     assert "b.a_list[3]" in result
       558| 
       559| try:
       560|     a, b = 3, 7
    -->561|     _ = [1, 2](a + b)
                    ^^^^^^^^^^^^^
       562| except TypeError as e:

            a:  3
            b:  7
            a + b:  10
        


Object is not iterable
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 826, in test_Object_is_not_iterable
        list(42)
    TypeError: 'int' object is not iterable
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Итерабельным является обьект, способный возвращать свои элементы по одному за раз.
    Контейнеры Python (`list, tuple, dict` и т.д.) являются итерабельными.
    
    Исключение возникло в строке `826` файла 'TESTS:\runtime\test_type_error.py'.
    
       824| def test_Object_is_not_iterable():
       825|     try:
    -->826|         list(42)
                    ^^^^^^^^
       827|     except TypeError as e:

            list:  <class list>
        


Object is not subscriptable
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 811, in test_Object_is_not_subscriptable
        a = f[1]
    TypeError: 'function' object is not subscriptable
    
        Вы имели в виду `f(1)`?
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Subscriptable objects обычно являются контейнерами, из которых
    вы можете получить элемент, используя нотацию `[...]`.
    
    Возможно, вы хотели написать `f(1)`.
    
    Исключение возникло в строке `811` файла 'TESTS:\runtime\test_type_error.py'.
    
       807| def f():
       808|     pass
       809| 
       810| try:
    -->811|     a = f[1]
                    ^^^^
       812| except TypeError as e:

            f:  <function f>
                defined in <function test_Object_is_not_subscriptable>
        


Slice indices must be integers or None
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 751, in test_Slice_indices_must_be_integers_or_None
        [1, 2, 3][1.0:2.0]
    TypeError: slice indices must be integers or None or have an __index__ method
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    При использовании среза для извлечения диапазона элементов
    из последовательности, то есть что-то вроде
    `[start:stop]` или `[start:stop:step]`.
    каждый из `start`, `stop`, `step` должен быть либо целым числом, либо `None`,
    либо каким-то другим объектом, имеющим метод `__index__`.
    
    Исключение возникло в строке `751` файла 'TESTS:\runtime\test_type_error.py'.
    
       749| def test_Slice_indices_must_be_integers_or_None():
       750|     try:
    -->751|         [1, 2, 3][1.0:2.0]
                    ^^^^^^^^^^^^^^^^^^
       752|     except TypeError as e:


Too few positional argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 500, in test_Too_few_positional_argument
        fn(1)
    TypeError: test_Too_few_positional_argument.<locals>.fn() missing 2 required positional arguments: 'b' and 'c'
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Видимо, вы вызвали функцию 'test_Too_few_positional_argument.<locals>.fn()' с
    меньшим количеством позиционных аргументов, чем требуется (2 missing).
    
    Исключение возникло в строке `500` файла 'TESTS:\runtime\test_type_error.py'.
    
       496| def fn(a, b, c):
       497|     pass
       498| 
       499| try:
    -->500|     fn(1)
                ^^^^^
       501| except TypeError as e:

            fn:  <function fn>
                defined in <function test_Too_few_positional_argument>
        


Too many positional argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 480, in test_Too_many_positional_argument
        A().f(1)
    TypeError: test_Too_many_positional_argument.<locals>.A.f() takes 1 positional argument but 2 were given
    
        Возможно, вы забыли `self` при обьявлении `A.f`.
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Вы, очевидно, вызвали функцию `A.f` с
    2 позиционным аргументом(ами), в то время как она требует
    позиционный(е) аргумент(ы) 1
    Возможно, вы забыли `self` при обьявлении `A.f`.
    
    Исключение возникло в строке `480` файла 'TESTS:\runtime\test_type_error.py'.
    
       476|     def f(x):
       477|         pass
       478| 
       479| try:
    -->480|     A().f(1)
                ^^^^^^^^
       481| except TypeError as e:

            A:  <class A>
                defined in <function test_type_error.test_Too_many_positional_argument>
        


Tuple no item assignment
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 446, in test_Tuple_no_item_assignment
        a[0] = 0
    TypeError: 'tuple' object does not support item assignment
    
        Вы хотели использовать список?
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    В Python некоторые объекты известны как неизменяемые,
    после определения их значение не может быть изменено.
    Вы можете изменить часть такого неизменяемого объекта: кортеж `tuple`,
    скорее всего, с помощью операции индексирования
    Возможно, вы хотели использовать список.
    
    Исключение возникло в строке `446` файла 'TESTS:\runtime\test_type_error.py'.
    
       443| def test_Tuple_no_item_assignment():
       444|     a = (1, 2, 3)
       445|     try:
    -->446|         a[0] = 0
                    ^^^^
       447|     except TypeError as e:

            a:  (1, 2, 3)
            a[0]:  1
        


Unhachable type
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 769, in test_Unhachable_type
        {[1, 2]: 1}
    TypeError: unhashable type: 'list'
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Только хешируемые объекты могут быть использованы
    в качестве элементов `set` или ключей `dict`.
    Хешируемые объекты - это объекты, которые не меняют своего значения после их создания.Вместо список `list` используйте кортеж `tuple`.
    
    Исключение возникло в строке `769` файла 'TESTS:\runtime\test_type_error.py'.
    
       767| def test_Unhachable_type():
       768|     try:
    -->769|         {[1, 2]: 1}
       770|     except TypeError as e:


Unsupported operand types
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 325, in test_Unsupported_operand_types
        a @= b
    TypeError: unsupported operand type(s) for @=: 'str' and 'int'
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Вы попытались использовать оператор @=
    используя два несовместимых типа объектов:
    строка (`str`) и целое число (`int`).
    Этот оператор обычно используется только
    для умножения матриц.
    
    Исключение возникло в строке `325` файла 'TESTS:\runtime\test_type_error.py'.
    
       322| try:
       323|     a = "a"
       324|     b = 2
    -->325|     a @= b
       326| except TypeError as e:

            a:  'a'
            b:  2
        


divmod
~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 69, in test_divmod
        result = divmod(a, b)
    TypeError: unsupported operand type(s) for divmod(): 'int' and 'complex'
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Аргументы `divmod` должны быть целыми (`int`) или вещественными (`float`) числами.
    По крайней мере один из аргументов был комплексным числом.
    
    Исключение возникло в строке `69` файла 'TESTS:\runtime\test_type_error.py'.
    
       66| a = 2
       67| b = 3 + 2j
       68| try:
    -->69|     result = divmod(a, b)
                        ^^^^^^^^^^^^
       70| except TypeError as e:

            a:  2
            b:  (3+2j)
            divmod:  <builtin function divmod>
        


function got multiple argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 996, in test_function_got_multiple_argument
        fn2(0, a=1)
    TypeError: test_function_got_multiple_argument.<locals>.fn2() got multiple values for argument 'a'
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Вы указали значение аргумента `a` более одного раза
    при вызове функции с именем `fn2`.
    Эта функция принимает следующие аргументы:
    `a, b=1`
    
    Исключение возникло в строке `996` файла 'TESTS:\runtime\test_type_error.py'.
    
       992| def fn2(a, b=1):
       993|     pass
       994| 
       995| try:
    -->996|     fn2(0, a=1)
                ^^^^^^^^^^^
       997| except TypeError as e:

            fn2:  <function fn2>
                defined in <function test_function_got_multiple_argument>
        


function has no len
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 919, in test_function_has_no_len
        len(bad)
    TypeError: object of type 'function' has no len()
    
        Вы забыли вызвать `bad`?
        
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Предполагаю, что вы забыли добавить круглые скобки для вызова `bad`.
    Возможно, вы хотели написать:
    `len(bad())`.
    
    Исключение возникло в строке `919` файла 'TESTS:\runtime\test_type_error.py'.
    
       915| def bad():
       916|     pass
       917| 
       918| try:
    -->919|     len(bad)
                ^^^^^^^^
       920| except TypeError as e:

            bad:  <function bad> defined in <function test_function_has_no_len>
            len:  <builtin function len>
        


getattr attribute name must be string
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 1044, in test_getattr_attribute_name_must_be_string
        getattr("__repr__", 1)  # as reported in issue #77
    TypeError: getattr(): attribute name must be string
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Второй аргумент функции `getattr()` должен быть строкой.
    
    Исключение возникло в строке `1044` файла 'TESTS:\runtime\test_type_error.py'.
    
       1037| if friendly_traceback.get_lang() == "en":
       1038|     assert (
       1039|         "The second argument of the function `hasattr()` must be a string."
       1040|         in result
       1041|     )
       1042| 
       1043| try:
    -->1044|     getattr("__repr__", 1)  # as reported in issue #77
                 ^^^^^^^^^^^^^^^^^^^^^^
       1045| except TypeError as e:

            getattr:  <builtin function getattr>
        


method got multiple argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 1016, in test_method_got_multiple_argument
        t.some_method(0, a=1)
    TypeError: test_method_got_multiple_argument.<locals>.T.some_method() got multiple values for argument 'a'
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Вы указали значение аргумента `a` более одного раза
    при вызове функции с именем `t.some_method`.
    Эта функция принимает только один аргумент: `a`.
    
    Исключение возникло в строке `1016` файла 'TESTS:\runtime\test_type_error.py'.
    
       1012|         pass
       1013| 
       1014| t = T()
       1015| try:
    -->1016|     t.some_method(0, a=1)
                 ^^^^^^^^^^^^^^^^^^^^^
       1017| except TypeError as e:

            t:  <T object>
                defined in <function test_type_error.test_method_got_multiple_argument>
            t.some_method:  <bound method T.some_method>
                of <T object>
                defined in <function test_type_error.test_method_got_multiple_argument>
        


vars arg must have dict
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 964, in test_vars_arg_must_have_dict
        vars(f)
    TypeError: vars() argument must have __dict__ attribute
    
    `TypeError` обычно возникает при попытке
    объединить два несовместимых типа объектов,
    вызовом функции с объектом неправильного типа,
    или при попытке выполнить операцию, недопустимую для данного типа объекта.
    
    Функция `vars` используется для перечисления содержимого атрибута
    `__dict__` объекта.
    Объект `f` использует `__slots__` вместо `__dict__`.
    
    Исключение возникло в строке `964` файла 'TESTS:\runtime\test_type_error.py'.
    
       960|     assert no_slots not in result
       961|     assert use_slots not in result
       962| 
       963| try:
    -->964|     vars(f)
                ^^^^^^^
       965| except TypeError as e:

            f:  <F object>
                defined in <function test_type_error.test_vars_arg_must_have_dict>
            vars:  <builtin function vars>
        


UnboundLocalError
-----------------


Missing both
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 65, in test_Missing_both
        outer_missing_both()
      File "TESTS:\runtime\test_unbound_local_error.py", line 22, in outer_missing_both
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 21, in inner
        spam_missing_both += 1
    UnboundLocalError: local variable 'spam_missing_both' referenced before assignment
    
        Вы забыли добавить
            `global spam_missing_both`
        или
            `nonlocal spam_missing_both`?
        
    В Python переменные, которые используются внутри функции, называются 
    локальными переменными. Перед использованием им должно быть присвоено значение.
    Переменная, которая используется до присвоения ей значения, считается
    определена вне этой функции; она известна как `global`
    (или иногда `nonlocal`) переменной. Вы не можете присвоить значение такой
    глобальной переменной внутри функции, не указав предварительно
    Python, что это глобальная переменная, иначе вы словите
    `UnboundLocalError`.
    
    Вы пытаетесь использовать имя `spam_missing_both`, идентифицированное Python как находящееся
    в локальной области видимости функции, прежде чем присвоить ему значение.
    
    Имя `spam_missing_both` существует как в глобальной, так и в нелокальной областях видимости. Это может привести к путанице и не рекомендуется.
    В зависимости от того, на какую переменную вы хотите сослаться, вам нужно добавить либо
        global spam_missing_both
    либо
        nonlocal spam_missing_both
    в качестве первой строки внутри вашей функции.
    
    Выполнение остановлено на строке `65` файла 'TESTS:\runtime\test_unbound_local_error.py'.
    
       63| def test_Missing_both():
       64|     try:
    -->65|         outer_missing_both()
                   ^^^^^^^^^^^^^^^^^^^^
       66|     except UnboundLocalError as e:

            global outer_missing_both:  <function outer_missing_both>
        
    Исключение возникло в строке `21` файла 'TESTS:\runtime\test_unbound_local_error.py'.
    
       20| def inner():
    -->21|     spam_missing_both += 1

            global spam_missing_both:  1
        


Missing global
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 27, in test_Missing_global
        outer_missing_global()
      File "TESTS:\runtime\test_unbound_local_error.py", line 10, in outer_missing_global
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 9, in inner
        spam_missing_global += 1
    UnboundLocalError: local variable 'spam_missing_global' referenced before assignment
    
        Вы забыли добавить `global spam_missing_global`?
        
    В Python переменные, которые используются внутри функции, называются 
    локальными переменными. Перед использованием им должно быть присвоено значение.
    Переменная, которая используется до присвоения ей значения, считается
    определена вне этой функции; она известна как `global`
    (или иногда `nonlocal`) переменной. Вы не можете присвоить значение такой
    глобальной переменной внутри функции, не указав предварительно
    Python, что это глобальная переменная, иначе вы словите
    `UnboundLocalError`.
    
    Вы пытаетесь использовать имя `spam_missing_global`, идентифицированное Python как находящееся
    в локальной области видимости функции, прежде чем присвоить ему значение.
    
    Имя `spam_missing_global` существует в области видимости global.
    Возможно,обьявление
    
        global spam_missing_global
    
    должно быть включено в качестве первой строки внутри вашей функции.
    
    Выполнение остановлено на строке `27` файла 'TESTS:\runtime\test_unbound_local_error.py'.
    
       25| def test_Missing_global():
       26|     try:
    -->27|         outer_missing_global()
                   ^^^^^^^^^^^^^^^^^^^^^^
       28|     except UnboundLocalError as e:

            global outer_missing_global:  <function outer_missing_global>
        
    Исключение возникло в строке `9` файла 'TESTS:\runtime\test_unbound_local_error.py'.
    
       8| def inner():
    -->9|     spam_missing_global += 1

            global spam_missing_global:  1
        


Missing nonlocal
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 46, in test_Missing_nonlocal
        outer_missing_nonlocal()
      File "TESTS:\runtime\test_unbound_local_error.py", line 16, in outer_missing_nonlocal
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 15, in inner
        spam_missing_nonlocal += 1
    UnboundLocalError: local variable 'spam_missing_nonlocal' referenced before assignment
    
        Вы забыли добавить `nonlocal spam_missing_nonlocal`?
        
    В Python переменные, которые используются внутри функции, называются 
    локальными переменными. Перед использованием им должно быть присвоено значение.
    Переменная, которая используется до присвоения ей значения, считается
    определена вне этой функции; она известна как `global`
    (или иногда `nonlocal`) переменной. Вы не можете присвоить значение такой
    глобальной переменной внутри функции, не указав предварительно
    Python, что это глобальная переменная, иначе вы словите
    `UnboundLocalError`.
    
    Вы пытаетесь использовать имя `spam_missing_nonlocal`, идентифицированное Python как находящееся
    в локальной области видимости функции, прежде чем присвоить ему значение.
    
    Имя `spam_missing_nonlocal` существует в области видимости nonlocal.
    Возможно,обьявление
    
        nonlocal spam_missing_nonlocal
    
    должно быть включено в качестве первой строки внутри вашей функции.
    
    Выполнение остановлено на строке `46` файла 'TESTS:\runtime\test_unbound_local_error.py'.
    
       44| def test_Missing_nonlocal():
       45|     try:
    -->46|         outer_missing_nonlocal()
                   ^^^^^^^^^^^^^^^^^^^^^^^^
       47|     except UnboundLocalError as e:

            global outer_missing_nonlocal:  <function outer_missing_nonlocal>
        
    Исключение возникло в строке `15` файла 'TESTS:\runtime\test_unbound_local_error.py'.
    
       14| def inner():
    -->15|     spam_missing_nonlocal += 1


Typo in local
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 104, in test_Typo_in_local
        test2()
      File "TESTS:\runtime\test_unbound_local_error.py", line 101, in test2
        alpha3 += 1
    UnboundLocalError: local variable 'alpha3' referenced before assignment
    
        Вы имели в виду `alpha1`?
        
    В Python переменные, которые используются внутри функции, называются 
    локальными переменными. Перед использованием им должно быть присвоено значение.
    Переменная, которая используется до присвоения ей значения, считается
    определена вне этой функции; она известна как `global`
    (или иногда `nonlocal`) переменной. Вы не можете присвоить значение такой
    глобальной переменной внутри функции, не указав предварительно
    Python, что это глобальная переменная, иначе вы словите
    `UnboundLocalError`.
    
    Вместо того, чтобы написать `alpha3`, возможно, вы имели в виду следующее:
    *  Локальная область видимости: `alpha1`, `alpha2`
    
    Выполнение остановлено на строке `104` файла 'TESTS:\runtime\test_unbound_local_error.py'.
    
       100|     alpha2 = 1
       101|     alpha3 += 1
       102| 
       103| try:
    -->104|     test2()
                ^^^^^^^
       105| except UnboundLocalError as e:

            test2:  <function test2> defined in <function test_Typo_in_local>
        
    Исключение возникло в строке `101` файла 'TESTS:\runtime\test_unbound_local_error.py'.
    
        98| def test2():
        99|     alpha1 = 1
       100|     alpha2 = 1
    -->101|     alpha3 += 1


Using name of builtin
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 125, in test_Using_name_of_builtin
        dist([])
      File "TESTS:\runtime\test_unbound_local_error.py", line 121, in dist
        max = max(points)
    UnboundLocalError: local variable 'max' referenced before assignment
    
    В Python переменные, которые используются внутри функции, называются 
    локальными переменными. Перед использованием им должно быть присвоено значение.
    Переменная, которая используется до присвоения ей значения, считается
    определена вне этой функции; она известна как `global`
    (или иногда `nonlocal`) переменной. Вы не можете присвоить значение такой
    глобальной переменной внутри функции, не указав предварительно
    Python, что это глобальная переменная, иначе вы словите
    `UnboundLocalError`.
    
    `max` -- это встроенная функция Python.
    Вы попытались присвоить значение `max` внутри функции
    при этом используя ее исходное значение в функции.
    
    Обратите внимание, что обычно не стоит давать локальной переменной
    то же имя, что и встроенной функции Python (например, `max`).
    
    Выполнение остановлено на строке `125` файла 'TESTS:\runtime\test_unbound_local_error.py'.
    
       122|     min = min(points)
       123|     return max - min
       124| try:
    -->125|     dist([])
                ^^^^^^^^
       126| except UnboundLocalError as e:

            dist:  <function dist> defined in <function test_Using_name_of_builtin>
        
    Исключение возникло в строке `121` файла 'TESTS:\runtime\test_unbound_local_error.py'.
    
       120| def dist(points):
    -->121|     max = max(points)
                      ^^^
       122|     min = min(points)

            max:  <builtin function max>
        


UnknownError
------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unknown_error.py", line 24, in test_Generic
        raise UnknownException("Some informative message about an unknown exception.")
    UnknownException: Some informative message about an unknown exception.
    
    Исключение типа `UnknownException` является наследником `Exception`.
    
    Nothing more specific is known about `UnknownException`.
    
    All built-in exceptions defined by Python are derived from `Exception`.
    All user-defined exceptions should also be derived from this class.
    
    Исключение возникло в строке `24` файла 'TESTS:\runtime\test_unknown_error.py'.
    
       20| result = friendly_traceback.get_output()
       21| assert "UnknownException -> Exception" in result
       22| 
       23| try:
    -->24|     raise UnknownException("Some informative message about an unknown exception.")
       25| except Exception as e:

            global UnknownException:  <class test_unknown_error.UnknownException>
        


ValueError
----------


Convert to int
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 194, in test_Convert_to_int
        int('13a')
    ValueError: invalid literal for int() with base 10: '13a'
    
    `ValueError` указывает на то, что функция или операция
    получила аргумент правильного типа, но несоответствующего значения.
    
    `'13a'` является недопустимым аргументом для `int()` в базе `10`.
    В базе `10`, `int()` чаще всего используется для преобразования строки,
    содержащей цифры от `0` до `9` в целое число.
    Недопустимы следующие символы: `a`.
    
    Исключение возникло в строке `194` файла 'TESTS:\runtime\test_value_error.py'.
    
       190| if english:
       191|     assert "needs to be first converted using `float()`" in result
       192| 
       193| try:
    -->194|     int('13a')
                ^^^^^^^^^^
       195| except ValueError as e:

            int:  <class int>
        


Could not convert to float
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 92, in test_Could_not_convert_to_float
        float("42b")
    ValueError: could not convert string to float: '42b'
    
    `ValueError` указывает на то, что функция или операция
    получила аргумент правильного типа, но несоответствующего значения.
    
    The string `42b` cannot be converted to a `float`
    as it does not represent a number.
    
    Исключение возникло в строке `92` файла 'TESTS:\runtime\test_value_error.py'.
    
       90| def test_Could_not_convert_to_float():
       91|     try:
    -->92|         float("42b")
                   ^^^^^^^^^^^^
       93|     except ValueError as e:

            float:  <class float>
        


Date invalid month
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 60, in test_Date_invalid_month
        d = date(2021, 13, 1)
    ValueError: month must be in 1..12
    
        Вы указали неправильный месяц?
        
    `ValueError` указывает на то, что функция или операция
    получила аргумент правильного типа, но несоответствующего значения.
    
    Предполагаю, что вы указали недопустимое значение для месяца
    в объекте `date`. Допустимыми значениями являются целые числа от 1 до 12.
    
    Исключение возникло в строке `60` файла 'TESTS:\runtime\test_value_error.py'.
    
       57| def test_Date_invalid_month():
       58|     from datetime import date
       59|     try:
    -->60|         d = date(2021, 13, 1)
                       ^^^^^^^^^^^^^^^^^
       61|     except ValueError as e:

            date:  <class datetime.date>
        


Not enough values to unpack
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 28, in test_Not_enough_values_to_unpack
        a, b, c = d
    ValueError: not enough values to unpack (expected 3, got 2)
    
    `ValueError` указывает на то, что функция или операция
    получила аргумент правильного типа, но несоответствующего значения.
    
    Распаковка является удобным способом присвоить имя
    каждому элементу итерирумого обьекта.
    В данном случае количество имен (3) больше,
    чем длина итерируемого объекта, строка (`str`) длиной 2.
    
    Исключение возникло в строке `28` файла 'TESTS:\runtime\test_value_error.py'.
    
       24| assert "ValueError: not enough values to unpack (expected 3, got 2)" in result
       25| 
       26| d = "ab"
       27| try:
    -->28|     a, b, c = d
       29| except ValueError as e:

            d:  'ab'
        


Pow third arg cannot be zero
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 108, in test_Pow_third_arg_cannot_be_zero
        pow(2, 4, a)
    ValueError: pow() 3rd argument cannot be 0
    
    `ValueError` указывает на то, что функция или операция
    получила аргумент правильного типа, но несоответствующего значения.
    
    Третий аргумент функции `pow()` не может быть нулём.
    
    Исключение возникло в строке `108` файла 'TESTS:\runtime\test_value_error.py'.
    
       105| def test_Pow_third_arg_cannot_be_zero():
       106|     a = 0
       107|     try:
    -->108|         pow(2, 4, a)
                    ^^^^^^^^^^^^
       109|     except ValueError as e:

            a:  0
            pow:  <builtin function pow>
        


Slots conflicts with class variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 75, in test_Slots_conflicts_with_class_variable
        class F:
    ValueError: 'a' in __slots__ conflicts with class variable
    
    `ValueError` указывает на то, что функция или операция
    получила аргумент правильного типа, но несоответствующего значения.
    
    Имя `a` используется и как имя переменной класса,
    и как строковый элемент в классе `__slots__`. Это недопустимо.
    
    Исключение возникло в строке `75` файла 'TESTS:\runtime\test_value_error.py'.
    
       73| def test_Slots_conflicts_with_class_variable():
       74|     try:
    -->75|         class F:
       76|             __slots__ = ["a", "b"]


Too many values to unpack
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 44, in test_Too_many_values_to_unpack
        a, b = c
    ValueError: too many values to unpack (expected 2)
    
    `ValueError` указывает на то, что функция или операция
    получила аргумент правильного типа, но несоответствующего значения.
    
    Распаковка является удобным способом присвоить имя
    каждому элементу итерирумого обьекта.
    В данном случае имен (2) меньше,
    чем длина итерируемого объекта, список `list` длиной 3.
    
    Исключение возникло в строке `44` файла 'TESTS:\runtime\test_value_error.py'.
    
       41| def test_Too_many_values_to_unpack():
       42|     c = [1, 2, 3]
       43|     try:
    -->44|         a, b = c
       45|     except ValueError as e:

            c:  [1, 2, 3]
        


int base not in range
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 209, in test_int_base_not_in_range
        int('18', base=37)
    ValueError: int() base must be >= 2 and <= 36, or 0
    
    `ValueError` указывает на то, что функция или операция
    получила аргумент правильного типа, но несоответствующего значения.
    
    Аргумент `base` функции `int()` должен быть либо нулем
    или любым целым числом от 2 до 36.
    Вы написали 37, что недопустимо.
    
    Исключение возникло в строке `209` файла 'TESTS:\runtime\test_value_error.py'.
    
       207| def test_int_base_not_in_range():
       208|     try:
    -->209|         int('18', base=37)
                    ^^^^^^^^^^^^^^^^^^
       210|     except ValueError as e:

            int:  <class int>
        


remove item not in list
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 236, in test_remove_item_not_in_list
        a_list.remove(b)
    ValueError: list.remove(x): x not in list
    
    `ValueError` указывает на то, что функция или операция
    получила аргумент правильного типа, но несоответствующего значения.
    
    You have attempted to remove `b` from the list `a_list`.
    However, `a_list` does not contain `b`.
    
    Исключение возникло в строке `236` файла 'TESTS:\runtime\test_value_error.py'.
    
       233| a_list = [1, 2, 3]
       234| b = 4
       235| try:
    -->236|     a_list.remove(b)
                ^^^^^^^^^^^^^^^^
       237| except ValueError as e:

            a_list:  [1, 2, 3]
            b:  4
            a_list.remove:  <builtin method remove of list object>
        


time strptime incorrect format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 133, in test_time_strptime_incorrect_format
        time.strptime("2020-01-01", "%d %m %Y")
    ValueError: time data '2020-01-01' does not match format '%d %m %Y'
    
    `ValueError` указывает на то, что функция или операция
    получила аргумент правильного типа, но несоответствующего значения.
    
    Значение, которое вы указали для времени, не соответствует указанному формату.
    Убедитесь, что между элементами используется одинаковый разделитель
    (например, между днем и месяцем) и соблюдайте одинаковый порядок
    как в предоставленных данных, так и в указанном вами формате.
    Следующая таблица может оказаться полезной:
    https://docs.python.org/3/library/time.html#time.strftime
    Следующий сайт также может быть полезен: https://www.strfti.me/
    
    Исключение возникло в строке `133` файла 'TESTS:\runtime\test_value_error.py'.
    
       129|     return
       130| 
       131| import time
       132| try:
    -->133|     time.strptime("2020-01-01", "%d %m %Y")
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       134| except ValueError as e:

            time:  <module time (builtin)>
            time.strptime:  <builtin function strptime>
        


ZeroDivisionError
-----------------


Complex division
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 180, in test_Complex_division
        1 / zero
    ZeroDivisionError: complex division by zero
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Вы делите на следующее выражение
    
         zero
    
    которое равно нулю.
    
    Исключение возникло в строке `180` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
       177| def test_Complex_division():
       178|     zero = 0j
       179|     try:
    -->180|         1 / zero
                    ^^^^^^^^
       181|     except ZeroDivisionError as e:

            zero:  0j
        


Division by zero literal
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 229, in test_Division_by_zero_literal
        1.0 / 0
    ZeroDivisionError: float division by zero
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Вы делите на ноль.
    
    Исключение возникло в строке `229` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
       225| if friendly_traceback.get_lang() == "en":
       226|     assert "Using the modulo operator, `%`, you are dividing by zero" in result
       227| 
       228| try:
    -->229|     1.0 / 0
                ^^^^^^^
       230| except ZeroDivisionError as e:


Division operator
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 20, in test_Division_operator
        1 / zero
    ZeroDivisionError: division by zero
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Вы делите на следующее выражение
    
         zero
    
    которое равно нулю.
    
    Исключение возникло в строке `20` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
       13| if friendly_traceback.get_lang() == "en":
       14|     assert (
       15|         "The following mathematical expression includes a division by zero"
       16|         in result
       17|     )
       18| 
       19| try:
    -->20|     1 / zero
               ^^^^^^^^
       21| except ZeroDivisionError as e:

            zero:  0
        


Divmod
~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 100, in test_Divmod
        divmod(1, zero)
    ZeroDivisionError: integer division or modulo by zero
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Второй аргумент функции `divmod()` равен нулю.
    
    Исключение возникло в строке `100` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
        97| def test_Divmod():
        98|     zero = 0
        99|     try:
    -->100|         divmod(1, zero)
                    ^^^^^^^^^^^^^^^
       101|     except ZeroDivisionError as e:

            zero:  0
            divmod:  <builtin function divmod>
        


Float division
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 148, in test_Float_division
        1 / zero
    ZeroDivisionError: float division by zero
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Вы делите на следующее выражение
    
         zero
    
    которое равно нулю.
    
    Исключение возникло в строке `148` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
       145| def test_Float_division():
       146|     zero = 0.0
       147|     try:
    -->148|         1 / zero
                    ^^^^^^^^
       149|     except ZeroDivisionError as e:

            zero:  0.0
        


Float divmod
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 164, in test_Float_divmod
        divmod(1, zero)
    ZeroDivisionError: float divmod()
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Второй аргумент функции `divmod()` равен нулю.
    
    Исключение возникло в строке `164` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
       161| def test_Float_divmod():
       162|     zero = 0.0
       163|     try:
    -->164|         divmod(1, zero)
                    ^^^^^^^^^^^^^^^
       165|     except ZeroDivisionError as e:

            zero:  0.0
            divmod:  <builtin function divmod>
        


Float modulo
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 132, in test_Float_modulo
        1 % zero
    ZeroDivisionError: float modulo
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Using the modulo operator, `%`, you are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Исключение возникло в строке `132` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
       125|     assert (
       126|         "The following mathematical expression includes a division by zero"
       127|         in result
       128|     )
       129|     assert "done using the modulo operator" in result
       130| 
       131| try:
    -->132|     1 % zero
                ^^^^^^^^
       133| except ZeroDivisionError as e:

            zero:  0.0
        


Integer division operator
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 49, in test_Integer_division_operator
        1 // zero
    ZeroDivisionError: integer division or modulo by zero
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Вы делите на следующее выражение
    
         zero
    
    которое равно нулю.
    
    Исключение возникло в строке `49` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
       42| if friendly_traceback.get_lang() == "en":
       43|     assert (
       44|         "The following mathematical expression includes a division by zero"
       45|         in result
       46|     )
       47| 
       48| try:
    -->49|     1 // zero
               ^^^^^^^^^
       50| except ZeroDivisionError as e:

            zero:  0
        


Mixed operations
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 243, in test_Mixed_operations
        a = divmod(8, 1 // 2)
    ZeroDivisionError: integer division or modulo by zero
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Следующее математическое выражение включает в себя деление на ноль:
    
        divmod(8, 1 // 2)
    
    Исключение возникло в строке `243` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
       241| def test_Mixed_operations():
       242|     try:
    -->243|         a = divmod(8, 1 // 2)
                        ^^^^^^^^^^^^^^^^^
       244|     except ZeroDivisionError as e:

            divmod:  <builtin function divmod>
            1 // 2:  0
        


Modulo operator
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 81, in test_Modulo_operator
        1 % zero
    ZeroDivisionError: integer division or modulo by zero
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Using the modulo operator, `%`, you are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Исключение возникло в строке `81` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
       74| if friendly_traceback.get_lang() == "en":
       75|     assert (
       76|         "The following mathematical expression includes a division by zero"
       77|         in result
       78|     )
       79| 
       80| try:
    -->81|     1 % zero
               ^^^^^^^^
       82| except ZeroDivisionError as e:

            zero:  0
        


Raise zero negative power
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 196, in test_Raise_zero_negative_power
        zero**-1
    ZeroDivisionError: 0.0 cannot be raised to a negative power
    
    `ZeroDivisionError` возникает, когда вы пытаетесь разделить значение
    на ноль либо напрямую, либо с помощью другой математической операции.
    
    Вы пытаетесь возвести число 0 в отрицательную степень.
    что эквивалентно делению на ноль.
    
    Исключение возникло в строке `196` файла 'TESTS:\runtime\test_zero_division_error.py'.
    
       193| def test_Raise_zero_negative_power():
       194|     zero = 0
       195|     try:
    -->196|         zero**-1
                    ^^^^^^^^
       197|     except ZeroDivisionError as e:

            zero:  0
        

