
Friendly tracebacks - en español
======================================

Friendly tiene como objetivo proporcionar comentarios más amigables
cuando se produce una excepción
se plantea que lo que hace Python  (translated by Google Translate).

Below, we can find some examples. SyntaxError cases, as well as TabError and
IndentationError cases, are shown in a separate page.
Not all cases handled by friendly are included here.

.. note::

     The content of this page is generated by running
     `trb_spanish.py` located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

Friendly-traceback version: 0.4.78
Python version: 3.9.5



ArithmeticError
---------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_arithmetic_error.py", line 9, in test_Generic
        raise ArithmeticError('error')
    ArithmeticError: error
    
    `ArithmeticError` es la clase base para aquellas excepciones integradas al lenguaje
    que se producen por diversos errores aritméticos.
    Es inusual que veas esta excepción;
    normalmente, una excepción más específica debería haber sido lanzada.
    
    Excepción elevada en la linea 9 del archivo TESTS:\runtime\test_arithmetic_error.py.
    
        4: def test_Generic():
        5:     try:
        6:         # I am not aware of any way in which this error is raised directly
        7:         # Usually, a subclass such as ZeroDivisionError, etc., would
        8:         # likely be raised.
    --> 9:         raise ArithmeticError('error')
       10:     except ArithmeticError as e:

            ArithmeticError:  <class ArithmeticError>
        


AssertionError
--------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_assertion_error.py", line 8, in test_Generic
        raise AssertionError("Fake message")
    AssertionError: Fake message
    
    En Python, la palabra clave `assert` se utiliza en sentencias de la forma
    `assert condition`, para confirmar que `condition` no es `False`,
    ni equivalente a `False`, como una lista vacía, etc.
    
    Si `condición` es `False` o equivalente, se produce un `AssertionError`.
    
    Excepción elevada en la linea 8 del archivo TESTS:\runtime\test_assertion_error.py.
    
       4: def test_Generic():
       5:     try:
       6:         # We raise it explicitly, rather than with the keyword assert, since
       7:         # we don't want pytest to rewrite out test.
    -->8:         raise AssertionError("Fake message")
       9:     except AssertionError as e:

            AssertionError:  <class AssertionError>
        


AttributeError
--------------


Attribute from other module
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 323, in test_Attribute_from_other_module
        keyword.pi
    AttributeError: module 'keyword' has no attribute 'pi'
    
        ¿Querías utilizar uno de los módulos: `math, cmath`?
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    En lugar del modulo `keyword`, quizás querías usar el
    atributo `pi` de uno de los siguientes módulos:
    `math, cmath.
    
    Excepción elevada en la linea 323 del archivo TESTS:\runtime\test_attribute_error.py.
    
       319:         assert "Did you mean `math`?" in result
       321:     import cmath
       322:     try:
    -->323:         keyword.pi
       324:     except AttributeError as e:

            keyword:  <module keyword> from PYTHON_LIB:\keyword.py
        


Builtin function
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 221, in test_Builtin_function
        len.text
    AttributeError: 'builtin_function_or_method' object has no attribute 'text'
    
        ¿Querías decir `len(text)`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    `len` es una función. Quizás quisiste escribir
    `len(text)`
    
    Excepción elevada en la linea 221 del archivo TESTS:\runtime\test_attribute_error.py.
    
       218: def test_Builtin_function():
       219:     text = 'Hello world!'
       220:     try:
    -->221:         len.text
       222:     except AttributeError as e:

            text:  'Hello world!'
            len:  <builtin function len>
        


Builtin module with no file
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 238, in test_Builtin_module_with_no_file
        sys.foo
    AttributeError: module 'sys' has no attribute 'foo'
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Python nos indica que no se encuentra ningún objeto con nombre `foo` en
    el módulo  `sys`.
    
    Excepción elevada en la linea 238 del archivo TESTS:\runtime\test_attribute_error.py.
    
       234:     """Issue 116"""
       235:     import sys
       237:     try:
    -->238:         sys.foo
       239:     except AttributeError as e:

            sys:  <module sys (builtin)>
        


Circular import
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 353, in test_Circular_import
        import my_turtle1
      File "TESTS:\my_turtle1.py", line 4, in <module>
        a = my_turtle1.something
    AttributeError: partially initialized module 'my_turtle1' has no attribute 'something' (most likely due to a circular import)
    
        ¿Has dado a tu programa el mismo nombre que un módulo de Python?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Sospecho que has utilizado el nombre `my_turtle1.py` para tu programa
    y que también querías importar un módulo con el mismo nombre
    de la biblioteca estándar de Python.
    Si es así, deberías usar un nombre diferente para tu programa.
    
    La ejecución se detuvo en la linea 353 del archivo TESTS:\runtime\test_attribute_error.py.
    
       350:     from friendly_traceback.runtime_errors import stdlib_modules
       351:     stdlib_modules.names.append("my_turtle1")
       352:     try:
    -->353:        import my_turtle1
       354:     except AttributeError as e:

    Excepción elevada en la linea 4 del archivo TESTS:\my_turtle1.py.
    
       1: """To test attribute error of partially initialized module."""
       2: import my_turtle1
    -->4: a = my_turtle1.something
              ^^^^^^^^^^^^^^^^^^^^

            my_turtle1:  <module my_turtle1> from TESTS:\my_turtle1.py
        


Circular import b
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 370, in test_Circular_import_b
        import circular_c
      File "TESTS:\circular_c.py", line 4, in <module>
        a = circular_c.something
    AttributeError: partially initialized module 'circular_c' has no attribute 'something' (most likely due to a circular import)
    
        Tienes un import circular.
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Python indicó que el módulo `{module}` no fue importado completamente.
    Esto puede ocurrir si, durante la ejecución del código del módulo `circular_c`
    se intenta importar de nuevo el mismo módulo.
    
    La ejecución se detuvo en la linea 370 del archivo TESTS:\runtime\test_attribute_error.py.
    
       368: def test_Circular_import_b():
       369:     try:
    -->370:         import circular_c
       371:     except AttributeError as e:

    Excepción elevada en la linea 4 del archivo TESTS:\circular_c.py.
    
       1: # Attribute error for partially initialize module
       2: import circular_c
    -->4: a = circular_c.something
              ^^^^^^^^^^^^^^^^^^^^

            circular_c:  <module circular_c> from TESTS:\circular_c.py
        


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 24, in test_Generic
        A.x  # testing type
    AttributeError: type object 'A' has no attribute 'x'
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Un objeto de tipo `A` no tiene ningún atributo llamado `x`.
    
    Excepción elevada en la linea 24 del archivo TESTS:\runtime\test_attribute_error.py.
    
       20:     class A:
       21:         pass
       23:     try:
    -->24:         A.x  # testing type
       25:     except AttributeError as e:

            A:  <class A> defined in <function test_attribute_error.test_Generic>
        


Generic different frame
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 47, in test_Generic_different_frame
        a.attr
    AttributeError: 'A' object has no attribute 'attr'
    
        ¿Quieres decir `attr2`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    El objeto `a` no tiene ningún atributo llamado `attr`.
    Tal vez quiso escribir `a.attr2` en lugar de `a.attr`
    
    Excepción elevada en la linea 47 del archivo TESTS:\runtime\test_attribute_error.py.
    
       43:         return A()
       45:     a = f()
       46:     try:
    -->47:         a.attr
       48:     except AttributeError as e:

            a:  <A object>
                defined in <function test_attribute_error.test_Generic_different_frame.<locals>.f>
        


Generic instance
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 65, in test_Generic_instance
        a.x
    AttributeError: 'A' object has no attribute 'x'
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Un objeto de tipo `a` no tiene ningún atributo llamado `x`.
    
    Excepción elevada en la linea 65 del archivo TESTS:\runtime\test_attribute_error.py.
    
       62:         pass
       63:     a = A()
       64:     try:
    -->65:         a.x
       66:     except AttributeError as e:

            a:  <A object>
                defined in <function test_attribute_error.test_Generic_instance>
        


Module attribute typo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 142, in test_Module_attribute_typo
        math.cost
    AttributeError: module 'math' has no attribute 'cost'
    
        ¿Quieres decir `cos`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    En lugar de escribir `math.cost`, quizás quisiste escribir uno de los
    siguientes nombres que son atributos del módulo `math`:
    `cos, cosh, acos`
    
    Excepción elevada en la linea 142 del archivo TESTS:\runtime\test_attribute_error.py.
    
       137:         assert "Did you mean `ascii_lowercase`" in result
       139:     import math
       141:     try:
    -->142:         math.cost
       143:     except AttributeError as e:

            math:  <module math (builtin)>
        


Nonetype
~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 181, in test_Nonetype
        a.b
    AttributeError: 'NoneType' object has no attribute 'b'
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Está intentando acceder al atributo `b`
    de una variable cuyo valor es `None`.
    Excepción elevada en la linea 181 del archivo TESTS:\runtime\test_attribute_error.py.
    
       178: def test_Nonetype():
       179:     a = None
       180:     try:
    -->181:         a.b
       182:     except AttributeError as e:

            a:  None
        


Object attribute typo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 81, in test_Object_attribute_typo
        a.appendh(4)
    AttributeError: 'list' object has no attribute 'appendh'
    
        ¿Quieres decir `append`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    El objeto `a` no tiene ningún atributo llamado `appendh`.
    Tal vez quiso escribir `a.append` en lugar de `a.appendh`
    
    Excepción elevada en la linea 81 del archivo TESTS:\runtime\test_attribute_error.py.
    
       77: def test_Object_attribute_typo():
       78:     #
       79:     try:
       80:         a = [1, 2, 3]
    -->81:         a.appendh(4)
                   ^^^^^^^^^
       82:     except AttributeError as e:

            a:  [1, 2, 3]
        


Perhaps comma
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 201, in test_Perhaps_comma
        a = [abcd
    AttributeError: 'str' object has no attribute 'defg'
    
        ¿Te refieres a separar los nombres de los objetos con una coma?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    `defg` is not an attribute of `abcd`.
    However, both `abcd` and `defg` are known objects.
    Perhaps you wrote a period to separate these two objects, 
    instead of using a comma.
    
    Excepción elevada en la linea 201 del archivo TESTS:\runtime\test_attribute_error.py.
    
       197:     defg = "world"
       199:     # fmt: off
       200:     try:
    -->201:         a = [abcd
       202:         .defg]
       203:     # fmt: on

            abcd:  'hello'
            defg:  'world'
        


Read only
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 278, in test_Read_only
        f.b = 1
    AttributeError: 'F' object attribute 'b' is read-only
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    El objeto `f` utiliza `__slots__` para indicar que atributos pueden
    cambiar. Puntualmente, el valor del atributo `f.b` no puede ser cambiado.
    The only attribute of `f` whose value can be changed is`a`.
    
    Excepción elevada en la linea 278 del archivo TESTS:\runtime\test_attribute_error.py.
    
       274:         b = 2
       276:     f = F()
       277:     try:
    -->278:         f.b = 1
       279:     except AttributeError as e:

            f:  <F object>
                defined in <function test_attribute_error.test_Read_only>
            f.b:  2
        


Shadow stdlib module
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 163, in test_Shadow_stdlib_module
        turtle.Pen
    AttributeError: module 'turtle' has no attribute 'Pen'
    
        ¿Has dado a tu programa el mismo nombre que un módulo de Python?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Importaste un modulo llamado`turtle` desde `TESTS:\turtle.py`.
    Pero también existe un modulo llamado `turtle` en la librería estándar de Python.
    Quizás debas cambiar el nombre de tu módulo.
    
    Excepción elevada en la linea 163 del archivo TESTS:\runtime\test_attribute_error.py.
    
       159: def test_Shadow_stdlib_module():
       160:     import turtle
       162:     try:
    -->163:         turtle.Pen
       164:     except AttributeError as e:

            turtle:  <module turtle> from TESTS:\turtle.py
        


Tuple by accident
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 293, in test_Tuple_by_accident
        something.upper()
    AttributeError: 'tuple' object has no attribute 'upper'
    
        ¿Escribiste una coma por error?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    `something` is a tuple that contains a single item
    which does have `'upper'` as an attribute.
    Perhaps you added a trailing comma by mistake at the end of the line
    where you defined `something`.
    
    Excepción elevada en la linea 293 del archivo TESTS:\runtime\test_attribute_error.py.
    
       290: def test_Tuple_by_accident():
       291:     something = "abc",  # note trailing comma
       292:     try:
    -->293:         something.upper()
                    ^^^^^^^^^^^^^^^
       294:     except AttributeError as e:

            something:  ('abc',)
        


Use builtin
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 97, in test_Use_builtin
        a.length()
    AttributeError: 'list' object has no attribute 'length'
    
        Did you mean `len(a)`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    The object `a` has no attribute named `length`.
    Perhaps you can use the Python builtin function `len` instead:
    `len(a)`.
    Excepción elevada en la linea 97 del archivo TESTS:\runtime\test_attribute_error.py.
    
       93: def test_Use_builtin():
       94:     #
       95:     try:
       96:         a = [1, 2, 3]
    -->97:         a.length()
                   ^^^^^^^^
       98:     except AttributeError as e:

            a:  [1, 2, 3]
        


Use join with str
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 337, in test_Use_join_with_str
        a = ['a', '2'].join('abc') + ['b', '3'].join('\n')
    AttributeError: 'list' object has no attribute 'join'
    
        Did you mean `'abc'.join(['a', '2'])`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    The object `['a', '2']` has no attribute named `join`.
    Perhaps you wanted something like `'abc'.join(['a', '2'])`.
    
    Excepción elevada en la linea 337 del archivo TESTS:\runtime\test_attribute_error.py.
    
       335: def test_Use_join_with_str():
       336:     try:
    -->337:         a = ['a', '2'].join('abc') + ['b', '3'].join('\n')
                        ^^^^^^^^^^^^^^^
       338:     except AttributeError as e:


Use synonym
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 113, in test_Use_synonym
        a.add(4)
    AttributeError: 'list' object has no attribute 'add'
    
        ¿Quieres decir `append`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    El objeto `a` no tiene ningún atributo llamado `add`.
    Sin embargo, `a` tiene los siguientes atributos con significados similares:
    `append, extend, insert`.
    
    Excepción elevada en la linea 113 del archivo TESTS:\runtime\test_attribute_error.py.
    
       109: def test_Use_synonym():
       110:     #
       111:     try:
       112:         a = [1, 2, 3]
    -->113:         a.add(4)
                    ^^^^^
       114:     except AttributeError as e:

            a:  [1, 2, 3]
        


Using slots
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 258, in test_Using_slots
        f.b = 1
    AttributeError: 'F' object has no attribute 'b'
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Un objeto de tipo `f` no tiene ningún atributo llamado `b`.
    Tenga en cuenta que el objeto `f` utiliza `__slots__`
    que impide la creación de nuevos atributos.
    A continuación se detallan algunos de sus atributos conocidos:
    `a`.
    Excepción elevada en la linea 258 del archivo TESTS:\runtime\test_attribute_error.py.
    
       254:         __slots__ = ["a"]
       256:     f = F()
       257:     try:
    -->258:         f.b = 1
       259:     except AttributeError as e:

            f:  <F object>
                defined in <function test_attribute_error.test_Using_slots>
        


FileNotFoundError
-----------------


Directory not found
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 70, in test_Directory_not_found
        open("does_not_exist/file.txt")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist/file.txt'
    
    Una excepción `FileNotFoundError` indica que estas
    tratando de abrir un archivo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del archivo.
    
    En su programa, el nombre del archivo
    que no se puede encontrar es `file.txt`.
    does_not_exist
    no es un directorio valido.
    
    Excepción elevada en la linea 70 del archivo TESTS:\runtime\test_file_not_found_error.py.
    
       68: def test_Directory_not_found():
       69:     try:
    -->70:         open("does_not_exist/file.txt")
       71:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 7, in test_Filename_not_found
        open("does_not_exist")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist'
    
    Una excepción `FileNotFoundError` indica que estas
    tratando de abrir un archivo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del archivo.
    
    En su programa, el nombre del archivo
    que no se puede encontrar es `does_not_exist`.
    Se esperaba encontrarlo en el directorio
    directorio `C:\Users\andre\friendly-traceback\friendly-traceback\tests`.
    No tengo información adicional para usted.
    
    Excepción elevada en la linea 7 del archivo TESTS:\runtime\test_file_not_found_error.py.
    
       5: def test_Filename_not_found():
       6:     try:
    -->7:         open("does_not_exist")
       8:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found 2
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 30, in test_Filename_not_found_2
        open("setupp.py")
    FileNotFoundError: [Errno 2] No such file or directory: 'setupp.py'
    
        ¿Quieres decir `setup.py`?
        
    Una excepción `FileNotFoundError` indica que estas
    tratando de abrir un archivo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del archivo.
    
    En su programa, el nombre del archivo
    que no se puede encontrar es `setupp.py`.
    Se esperaba encontrarlo en el directorio
    directorio `C:\Users\andre\friendly-traceback\friendly-traceback`.
    El archivo `setup.py` tiene un nombre similar.
    
    Excepción elevada en la linea 30 del archivo TESTS:\runtime\test_file_not_found_error.py.
    
       26:     if chdir:
       27:         os.chdir("..")
       29:     try:
    -->30:         open("setupp.py")
       31:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found 3
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 52, in test_Filename_not_found_3
        open("setup.pyg")
    FileNotFoundError: [Errno 2] No such file or directory: 'setup.pyg'
    
        ¿Quieres decir `setup.py`?
        
    Una excepción `FileNotFoundError` indica que estas
    tratando de abrir un archivo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del archivo.
    
    En su programa, el nombre del archivo
    que no se puede encontrar es `setup.pyg`.
    Se esperaba encontrarlo en el directorio
    directorio `C:\Users\andre\friendly-traceback\friendly-traceback`.
    Tal vez se refiera a uno de los siguientes archivos con nombres similares:
    `setup.py`, `setup.cfg`
    
    Excepción elevada en la linea 52 del archivo TESTS:\runtime\test_file_not_found_error.py.
    
       49:     if chdir:
       50:         os.chdir("..")
       51:     try:
    -->52:         open("setup.pyg")
       53:     except FileNotFoundError as e:

            open:  <builtin function open>
        


ImportError
-----------


Circular import
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 58, in test_Circular_import
        import circular_a
      File "TESTS:\circular_a.py", line 2, in <module>
        import circular_b
      File "TESTS:\circular_b.py", line 2, in <module>
        from circular_a import a
    ImportError: cannot import name 'a' from partially initialized module 'circular_a' (most likely due to a circular import) (C:\Users\andre\friendly-traceback\friendly-traceback\tests\circular_a.py)
    
    Una excepción `ImportError` indica que un determinado objeto no pudo
    importarse de un módulo o paquete. La mayoría de las veces, esto se debe a que
    porque el nombre del objeto no está escrito correctamente.
    
    The object that could not be imported is `a`.
    The module or package where it was 
    expected to be found is `circular_a`.
    
    The problem was likely caused by what is known as a 'circular import'.
    First, Python imported and started executing the code in file
       'TESTS:\runtime\test_import_error.py'.
    which imports module `circular_a`.
    During this process, the code in another file,
       'TESTS:\circular_b.py'
    was executed. However in this last file, an attempt was made
    to import the original module `circular_a`
    a second time, before Python had completed the first import.
    
    La ejecución se detuvo en la linea 58 del archivo TESTS:\runtime\test_import_error.py.
    
       56: def test_Circular_import():
       57:     try:
    -->58:         import circular_a
       59:     except ImportError as e:

    Excepción elevada en la linea 2 del archivo TESTS:\circular_b.py.
    
       1: """File used in for test_circular_import() in test_import_error.py"""
    -->2: from circular_a import a


Simple import error
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 44, in test_Simple_import_error
        from math import Pi
    ImportError: cannot import name 'Pi' from 'math' (unknown location)
    
        ¿Quieres decir `pi`?
        
    Una excepción `ImportError` indica que un determinado objeto no pudo
    importarse de un módulo o paquete. La mayoría de las veces, esto se debe a que
    porque el nombre del objeto no está escrito correctamente.
    
    Perhaps you meant to import `pi` (from `math`) instead of `Pi`
    
    Excepción elevada en la linea 44 del archivo TESTS:\runtime\test_import_error.py.
    
       40:     no_suggestion()
       41:     multiple_import_on_same_line()
       43:     try:
    -->44:         from math import Pi
       45:     except ImportError as e:


IndexError
----------


Assignment
~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 76, in test_Assignment
        a[13] = 1
    IndexError: list assignment index out of range
    
    Un `IndexError` se produce cuando se intenta obtener un elemento de una lista
    una tupla, o un objeto similar (secuencia), y utiliza un índice que
    no existe; normalmente, esto ocurre porque el índice que se da
    es mayor que la longitud de la secuencia.
    
    You have tried to assign a value to index `13` of `a`,
    una `list` of length `10`.
    The valid index values of `a` are integers ranging from
    `-10` to `9`.
    
    Excepción elevada en la linea 76 del archivo TESTS:\runtime\test_index_error.py.
    
       72:         assert "You have tried to assign a value to index `1` of `b`," in result
       73:         assert "a `list` which contains no item." in result
       75:     try:
    -->76:         a[13] = 1
       77:     except IndexError as e:

            a:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        


Empty
~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 38, in test_Empty
        c = a[1]
    IndexError: list index out of range
    
        a`no contiene items.
        
    Un `IndexError` se produce cuando se intenta obtener un elemento de una lista
    una tupla, o un objeto similar (secuencia), y utiliza un índice que
    no existe; normalmente, esto ocurre porque el índice que se da
    es mayor que la longitud de la secuencia.
    
    You have tried to get the item with index `1` of `a`,
    una `list` which contains no item.
    
    Excepción elevada en la linea 38 del archivo TESTS:\runtime\test_index_error.py.
    
       35: def test_Empty():
       36:     a = []
       37:     try:
    -->38:         c = a[1]
                       ^^^^
       39:     except IndexError as e:

            a:  []
        


Long list
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 24, in test_Long_list
        print(a[60], b[0])
    IndexError: list index out of range
    
    Un `IndexError` se produce cuando se intenta obtener un elemento de una lista
    una tupla, o un objeto similar (secuencia), y utiliza un índice que
    no existe; normalmente, esto ocurre porque el índice que se da
    es mayor que la longitud de la secuencia.
    
    You have tried to get the item with index `60` of `a`,
    una `list` of length `40`.
    The valid index values of `a` are integers ranging from
    `-40` to `39`.
    
    Excepción elevada en la linea 24 del archivo TESTS:\runtime\test_index_error.py.
    
       21:     a = list(range(40))
       22:     b = tuple(range(50))
       23:     try:
    -->24:         print(a[60], b[0])
                         ^^^^^
       25:     except IndexError as e:

            a:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...]
                len(a): 40
        
        


Short tuple
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 8, in test_Short_tuple
        print(a[3], b[2])
    IndexError: tuple index out of range
    
        Remember: the first item of una `tuple` is not at index 1 but at index 0.
        
    Un `IndexError` se produce cuando se intenta obtener un elemento de una lista
    una tupla, o un objeto similar (secuencia), y utiliza un índice que
    no existe; normalmente, esto ocurre porque el índice que se da
    es mayor que la longitud de la secuencia.
    
    You have tried to get the item with index `3` of `a`,
    una `tuple` of length `3`.
    The valid index values of `a` are integers ranging from
    `-3` to `2`.
    
    Excepción elevada en la linea 8 del archivo TESTS:\runtime\test_index_error.py.
    
       5:     a = (1, 2, 3)
       6:     b = [1, 2, 3]
       7:     try:
    -->8:         print(a[3], b[2])
                        ^^^^
       9:     except IndexError as e:

            a:  (1, 2, 3)
        


KeyError
--------


ChainMap
~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\collections\__init__.py", line 1008, in pop
        return self.maps[0].pop(key, *args)
    KeyError: 42
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 62, in test_ChainMap
        d.pop(42)
    KeyError: 'Key not found in the first mapping: 42'
    
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    The key `42` cannot be found in `d`, an object of type `ChainMap`.
    
    Excepción elevada en la linea 62 del archivo TESTS:\runtime\test_key_error.py.
    
       59:     from collections import ChainMap
       60:     d = ChainMap({}, {})
       61:     try:
    -->62:         d.pop(42)
       63:     except KeyError as e:

            d:  ChainMap({}, {})
            d.pop:  <bound method ChainMap.pop> of ChainMap({}, {})
        


Forgot to convert to string
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 115, in test_Forgot_to_convert_to_string
        print(squares[2])
    KeyError: 2
    
        Did you forget to convert `2` into a string?
        
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    The key `2` cannot be found in the dict `squares`.
    `squares` contains a string key which is identical to `str(2)`.
    Perhaps you forgot to convert the key into a string.
    
    Excepción elevada en la linea 115 del archivo TESTS:\runtime\test_key_error.py.
    
       112: def test_Forgot_to_convert_to_string():
       113:     squares = {"1": 1, "2": 4, "3": 9}
       114:     try:
    -->115:         print(squares[2])
                          ^^^^^^^^^^
       116:     except KeyError as e:

            squares:  {'1': 1, '2': 4, '3': 9}
        


Generic key error
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 44, in test_Generic_key_error
        d["c"]
    KeyError: 'c'
    
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    The key `'c'` cannot be found in the dict `d`.
    
    Excepción elevada en la linea 44 del archivo TESTS:\runtime\test_key_error.py.
    
       41: def test_Generic_key_error():
       42:     d = {"a": 1, "b": 2}
       43:     try:
    -->44:         d["c"]
       45:     except KeyError as e:

            d:  {'a': 1, 'b': 2}
        


Popitem empty ChainMap
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\collections\__init__.py", line 1001, in popitem
        return self.maps[0].popitem()
    KeyError: 'popitem(): dictionary is empty'
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 26, in test_Popitem_empty_ChainMap
        alpha.popitem()
    KeyError: 'No keys found in the first mapping.'
    
        `alpha` es un `ChainMap` vacío.
        
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    Has intentado recuperar un elemento de `alpha` que es un `ChainMap` vacío.
    
    Excepción elevada en la linea 26 del archivo TESTS:\runtime\test_key_error.py.
    
       23:     from collections import ChainMap
       24:     alpha = ChainMap({}, {})
       25:     try:
    -->26:         alpha.popitem()
       27:     except KeyError as e:

            alpha:  ChainMap({}, {})
            alpha.popitem:  <bound method ChainMap.popitem> of ChainMap({}, {})
        


Popitem empty dict
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 8, in test_Popitem_empty_dict
        d.popitem()
    KeyError: 'popitem(): dictionary is empty'
    
        `d` es un `dict` vacío.
        
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    You tried to retrieve an item from `d` which is an empty `dict`.
    
    Excepción elevada en la linea 8 del archivo TESTS:\runtime\test_key_error.py.
    
       5: def test_Popitem_empty_dict():
       6:     d = {}
       7:     try:
    -->8:         d.popitem()
       9:     except KeyError as e:

            d:  {}
            d.popitem:  <builtin method popitem of dict object>
        


Similar names
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 145, in test_Similar_names
        a = second["alpha"]
    KeyError: 'alpha'
    
        ¿Quieres decir `'alpha0'`?
        
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    The key `'alpha'` cannot be found in the dict `second`.
    `second` has some keys similar to `'alpha'` including:
    `'alpha0', 'alpha12', 'alpha11'`.
    
    Excepción elevada en la linea 145 del archivo TESTS:\runtime\test_key_error.py.
    
       141:         assert ok, diff
       143:     second = {"alpha0": 1, "alpha11": 2, "alpha12": 3}
       144:     try:
    -->145:         a = second["alpha"]
                        ^^^^^^^^^^^^^^^
       146:     except KeyError as e:

            second:  {'alpha0': 1, 'alpha11': 2, 'alpha12': 3}
        


String by mistake
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 98, in test_String_by_mistake
        d["(0, 0)"]
    KeyError: '(0, 0)'
    
        Did you convert `(0, 0)` into a string by mistake?
        
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    The key `'(0, 0)'` cannot be found in the dict `d`.
    `'(0, 0)'` is a string.
    There is a key of `d` whose string representation
    is identical to `'(0, 0)'`.
    
    Excepción elevada en la linea 98 del archivo TESTS:\runtime\test_key_error.py.
    
       94:     chain_map_string_by_mistake()  # do not show in docs
       96:     d = {(0, 0): "origin"}
       97:     try:
    -->98:         d["(0, 0)"]
       99:     except KeyError as e:

            d:  {(0, 0): 'origin'}
        


LookupError
-----------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_lookup_error.py", line 10, in test_Generic
        raise LookupError("Fake message")
    LookupError: Fake message
    
    `LookupError` es la clase base para las excepciones que se producen
    cuando una clave o índice utilizado en un mapeo o secuencia no es válido.
    También puede ser elevada directamente por codecs.lookup().
    
    Excepción elevada en la linea 10 del archivo TESTS:\runtime\test_lookup_error.py.
    
        4: def test_Generic():
        5:     try:
        6:         # LookupError is the base class for KeyError and IndexError.
        7:         # It should normally not be raised by user code,
        8:         # other than possibly codecs.lookup(), which is why we raise
        9:         # it directly here for our example.
    -->10:         raise LookupError("Fake message")
       11:     except LookupError as e:

            LookupError:  <class LookupError>
        


ModuleNotFoundError
-------------------


Need to install module
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 76, in test_Need_to_install_module
        import alphabet
    ModuleNotFoundError: No module named 'alphabet'
    
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    No se puede importar el módulo llamado `alphabet`.
    Tal vez sea necesario instalarlo.
    
    Excepción elevada en la linea 76 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       74: def test_Need_to_install_module():
       75:     try:
    -->76:         import alphabet
       77:     except ModuleNotFoundError as e:


Not a package
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 22, in test_Not_a_package
        import os.xxx
    ModuleNotFoundError: No module named 'os.xxx'; 'os' is not a package
    
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    `xxx` no puede ser importado desde `os`.
    
    Excepción elevada en la linea 22 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       19: def test_Not_a_package():
       21:     try:
    -->22:         import os.xxx
       23:     except ModuleNotFoundError as e:


Not a package similar name
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 36, in test_Not_a_package_similar_name
        import os.pathh
    ModuleNotFoundError: No module named 'os.pathh'; 'os' is not a package
    
        Did you mean `import os.path`?
        
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    Perhaps you meant `import os.path`.
    `path` is a name similar to `pathh` and is a module that
    can be imported from `os`.
    Other objects with similar names that are part of
     `os` include `fspath`.
    
    Excepción elevada en la linea 36 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       34: def test_Not_a_package_similar_name():
       35:     try:
    -->36:         import os.pathh
       37:     except ModuleNotFoundError as e:


Object not module
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 49, in test_Object_not_module
        import os.open
    ModuleNotFoundError: No module named 'os.open'; 'os' is not a package
    
        Did you mean `from os import open`?
        
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    `open` is not a separate module but an object that is part of `os`.
    
    Excepción elevada en la linea 49 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       47: def test_Object_not_module():
       48:     try:
    -->49:         import os.open
       50:     except ModuleNotFoundError as e:

            open:  <builtin function open>
        


Similar object not module
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 62, in test_Similar_object_not_module
        import os.opend
    ModuleNotFoundError: No module named 'os.opend'; 'os' is not a package
    
        Did you mean `from os import open`?
        
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    Perhaps you meant `from os import open`.
    `open` is a name similar to `opend` and is an object that
    can be imported from `os`.
    Other objects with similar names that are part of
     `os` include `popen, fdopen`.
    
    Excepción elevada en la linea 62 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       60: def test_Similar_object_not_module():
       61:     try:
    -->62:         import os.opend
       63:     except ModuleNotFoundError as e:


Standard library module
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 7, in test_Standard_library_module
        import Tkinter
    ModuleNotFoundError: No module named 'Tkinter'
    
        ¿Quieres decir `tkinter`?
        
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    No se puede importar el módulo llamado `Tkinter`.
    Tal vez sea necesario instalarlo.
    `tkinter` es un módulo existente que tiene un nombre similar.
    
    Excepción elevada en la linea 7 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       5: def test_Standard_library_module():
       6:     try:
    -->7:         import Tkinter
       8:     except ModuleNotFoundError as e:


no curses
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 92, in test_no_curses
        import curses
    ModuleNotFoundError: No module named '_curses'
    
        El módulo curses rara vez se instala con Python en Windows.
        
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    Ha intentado importar el módulo curses.
    El módulo curses rara vez se instala con Python en Windows.
    
    Excepción elevada en la linea 92 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       90:     def test_no_curses():
       91:         try:
    -->92:             import curses
       93:         except ModuleNotFoundError as e:


NameError
---------


Annotated variable
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 24, in test_Annotated_variable
        y = x
    NameError: name 'x' is not defined
    
        ¿Ha utilizado dos puntos en lugar del signo de igualdad?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    In your program, no object with the name `x` exists.
    Se ha encontrado un type hint para `x` en el ámbito global.
    Tal vez haya utilizado dos puntos en lugar de un signo de igualdad y haya escrito
    
        x : 3
    
    en lugar de
    
        x = 3
    
    Excepción elevada en la linea 24 del archivo TESTS:\runtime\test_name_error.py.
    
       22: def test_Annotated_variable():
       23:     try:
    -->24:         y = x
                       ^
       25:     except NameError as e:


Custom name
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 165, in test_Custom_name
        python
    NameError: name 'python' is not defined
    
        ¡Ya estás usando Python!
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    ¡Ya estás usando Python!
    Excepción elevada en la linea 165 del archivo TESTS:\runtime\test_name_error.py.
    
       163: def test_Custom_name():
       164:     try:
    -->165:         python
       166:     except NameError as e:


Free variable referenced
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 149, in test_Free_variable_referenced
        outer()
      File "TESTS:\runtime\test_name_error.py", line 145, in outer
        inner()
      File "TESTS:\runtime\test_name_error.py", line 144, in inner
        return var
    NameError: free variable 'var' referenced before assignment in enclosing scope
    
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    In your program, `var` is an unknown name
    that exists in an enclosing scope,
    but has not yet been assigned a value.
    
    La ejecución se detuvo en la linea 149 del archivo TESTS:\runtime\test_name_error.py.
    
       145:         inner()
       146:         var = 4
       148:     try:
    -->149:         outer()
       150:     except NameError as e:

            outer:  <function outer>
                defined in <function test_Free_variable_referenced>
        
    Excepción elevada en la linea 144 del archivo TESTS:\runtime\test_name_error.py.
    
       143:         def inner():
    -->144:             return var
                               ^^^


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 9, in test_Generic
        this = something
    NameError: name 'something' is not defined
    
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    In your program, no object with the name `something` exists.
    No tengo información adicional para usted.
    
    Excepción elevada en la linea 9 del archivo TESTS:\runtime\test_name_error.py.
    
        7: def test_Generic():
        8:     try:
    --> 9:         this = something
                          ^^^^^^^^^
       10:     except NameError as e:


Missing import
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 129, in test_Missing_import
        unicodedata.something
    NameError: name 'unicodedata' is not defined
    
        ¿Olvidaste importar `unicodedata`?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    The name `unicodedata` is not defined in your program.
    Perhaps you forgot to import `unicodedata` which is found
    in Python's standard library.
    
    Excepción elevada en la linea 129 del archivo TESTS:\runtime\test_name_error.py.
    
       125:     if friendly_traceback.get_lang() == "en":
       126:         assert "I have no additional information for you." in result
       128:     try:
    -->129:         unicodedata.something
                    ^^^^^^^^^^^
       130:     except NameError as e:


Missing module name
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 249, in test_Missing_module_name
        frame = Frame()
    NameError: name 'Frame' is not defined
    
        ¿Has olvidado añadir `tkinter.`?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    In your program, no object with the name `Frame` exists.
    
    The local object `tkinter`
    has an attribute named `Frame`.
    Perhaps you should have written `tkinter.Frame`
    instead of `Frame`.
    
    Excepción elevada en la linea 249 del archivo TESTS:\runtime\test_name_error.py.
    
       246: def test_Missing_module_name():
       247:     import tkinter
       248:     try:
    -->249:         frame = Frame()
                            ^^^^^
       250:     except NameError as e:


Missing self 1
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 200, in test_Missing_self_1
        str(a)
      File "TESTS:\runtime\test_name_error.py", line 191, in __str__
        toys_list = add_toy(  # ensure that it can see 'self' on following line
    NameError: name 'add_toy' is not defined
    
        ¿Escribiste `self` en el lugar equivocado?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    In your program, no object with the name `add_toy` exists.
    
    The local object `<Pet object> defined in <function test_name_error.test_Missing_self_1>`
    has an attribute named `add_toy`.
    Perhaps you should have written `self.add_toy(...`
    instead of `add_toy(self, ...`.
    
    La ejecución se detuvo en la linea 200 del archivo TESTS:\runtime\test_name_error.py.
    
       196:                 return "{} has no toys".format(self.name)
       198:     a = Pet('Fido')
       199:     try:
    -->200:         str(a)
       201:     except NameError as e:

            a:  <Pet object>
                defined in <function test_name_error.test_Missing_self_1>
            str:  <class str>
        
    Excepción elevada en la linea 191 del archivo TESTS:\runtime\test_name_error.py.
    
       189:         def __str__(self):
       190:             # self at the wrong place
    -->191:             toys_list = add_toy(  # ensure that it can see 'self' on following line
                                    ^^^^^^^
       192:                                 self, 'something')
       193:             if self.toys:


Missing self 2
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 234, in test_Missing_self_2
        str(a)
      File "TESTS:\runtime\test_name_error.py", line 226, in __str__
        toys_list = add_toy('something')
    NameError: name 'add_toy' is not defined
    
        ¿Has olvidado añadir `self.`?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    In your program, no object with the name `add_toy` exists.
    
    A local object, `<Pet object> defined in <function test_name_error.test_Missing_self_2>`,
    has an attribute named `add_toy`.
    Perhaps you should have written `self.add_toy`
    instead of `add_toy`.
    
    La ejecución se detuvo en la linea 234 del archivo TESTS:\runtime\test_name_error.py.
    
       230:                 return "{} has no toys".format(self.name)
       232:     a = Pet('Fido')
       233:     try:
    -->234:         str(a)
       235:     except NameError as e:

            a:  <Pet object>
                defined in <function test_name_error.test_Missing_self_2>
            str:  <class str>
        
    Excepción elevada en la linea 226 del archivo TESTS:\runtime\test_name_error.py.
    
       224:         def __str__(self):
       225:             # Missing self.
    -->226:             toys_list = add_toy('something')
                                    ^^^^^^^
       227:             if self.toys:


Synonym
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 89, in test_Synonym
        cost  # wrote from math import * above
    NameError: name 'cost' is not defined
    
        ¿Quieres decir `cos`?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    In your program, no object with the name `cost` exists.
    Instead of writing `cost`, perhaps you meant one of the following:
    *   alcance global: `cos`, `cosh`, `acos`
    
    Excepción elevada en la linea 89 del archivo TESTS:\runtime\test_name_error.py.
    
       85:     if friendly_traceback.get_lang() == "en":
       86:         assert "The Python builtin `chr` has a similar name." in result
       88:     try:
    -->89:         cost  # wrote from math import * above
       90:     except NameError as e:


OsError
-------


Urllib error
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\urllib\request.py", line 1346, in do_open
           ... Más lineas no mostradas. ...
      File "PYTHON_LIB:\socket.py", line 822, in create_connection
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
      File "PYTHON_LIB:\socket.py", line 953, in getaddrinfo
        for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
    socket.gaierror: [Errno 11001] getaddrinfo failed
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 8, in test_Urllib_error
        request.urlopen("http://does_not_exist")
    URLError: <urlopen error [Errno 11001] getaddrinfo failed>
    
    Una excepción del tipo `URLError` es subclase de `OSError`.
    El sistema operativo suele lanzar una excepción `OSError` para indicar que una operación
    para indicar que una operación no está permitida o que
    un recurso no está disponible.
    
    Sospecho que está intentando conectarse a un servidor y
    que no se puede realizar la conexión.
    
    Si ese es el caso, verifique que la URL sea correcta
    y compruebe su conectividad a Internet.
    
    Excepción elevada en la linea 8 del archivo TESTS:\runtime\test_os_error.py.
    
       5: def test_Urllib_error():
       6:     from urllib import request, error
       7:     try:
    -->8:         request.urlopen("http://does_not_exist")
       9:     except error.URLError as e:

            request:  <module urllib.request> from PYTHON_LIB:\urllib\request.py
            request.urlopen:  <function urlopen>
        


invalid argument
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 46, in test_invalid_argument
        open("c:\test.txt")
    OSError: [Errno 22] Invalid argument: 'c:\test.txt'
    
        Tal vez sea necesario duplicar las barras invertidas.
        
    El sistema operativo suele lanzar una excepción `OSError` para indicar que una operación
    para indicar que una operación no está permitida o que
    un recurso no está disponible.
    
    I suspect that you wrote a filename or path that contains
    at least one backslash character, `\`.
    Python likely interpreted this as indicating the beginning of
    what is known as an escape sequence.
    To solve the problem, either write a so-called 'raw string'
    by adding the letter `r` as a prefix in
    front of the filename or path, or replace all single backslash
    characters, `\`, by double ones: `\\`.
    
    Excepción elevada en la linea 46 del archivo TESTS:\runtime\test_os_error.py.
    
       43:     if os.name != "nt":
       44:         return "Windows test only", "No result"
       45:     try:
    -->46:         open("c:\test.txt")
       47:     except OSError as e:

            open:  <builtin function open>
        


no information
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 27, in test_no_information
        raise OSError("Some unknown message")
    OSError: Some unknown message
    
        Friendly-traceback no conoce la causa de este error.
        
    El sistema operativo suele lanzar una excepción `OSError` para indicar que una operación
    para indicar que una operación no está permitida o que
    un recurso no está disponible.
    
    No se conoce ninguna información sobre esta excepción.
    Por favor, informe de este ejemplo a
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    Si está utilizando un REPL, utilice `www('bug')` para hacerlo.
    
    Si está utilizando la consola Friendly, utilice `www()` para
    hacer una búsqueda en Internet para este caso en particular.
    
    Excepción elevada en la linea 27 del archivo TESTS:\runtime\test_os_error.py.
    
       24:     old_debug = friendly_traceback.debug_helper.DEBUG
       25:     friendly_traceback.debug_helper.DEBUG = False
       26:     try:
    -->27:         raise OSError("Some unknown message")
       28:     except OSError as e:

            OSError:  <class OSError>
        


OverflowError
-------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 6, in test_Generic
        2.0 ** 1600
    OverflowError: (34, 'Result too large')
    
    Se produce un `OverflowError` cuando el resultado de una operación aritmética
    es demasiado grande para ser manejado por el procesador del ordenador.
    
    Excepción elevada en la linea 6 del archivo TESTS:\runtime\test_overflow_error.py.
    
       4: def test_Generic():
       5:     try:
    -->6:         2.0 ** 1600
       7:     except OverflowError as e:


RecursionError
--------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_recursion_error.py", line 8, in test_Generic
        a()
           ... Más lineas no mostradas. ...
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
    RecursionError: maximum recursion depth exceeded
    
    Un `RecursionError` se levanta cuando una función se llama a sí misma
    directa o indirectamente, demasiadas veces.
    Casi siempre indica que has cometido un error en tu código
    y que su programa nunca se detendrá.
    
    La ejecución se detuvo en la linea 8 del archivo TESTS:\runtime\test_recursion_error.py.
    
       5:     def a():
       6:         return a()
       7:     try:
    -->8:         a()
       9:     except RecursionError as e:

            a:  <function a> defined in <function test_Generic>
        
    Excepción elevada en la linea 6 del archivo TESTS:\runtime\test_recursion_error.py.
    
       5:     def a():
    -->6:         return a()
                         ^^^

            a:  <function a> defined in <function test_Generic>
        


TypeError
---------


Bad type for unary operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 371, in test_Bad_type_for_unary_operator
        a =+ "def"
    TypeError: bad operand type for unary +: 'str'
    
        Perhaps you meant to write `+=` instead of `=+`
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    You tried to use the unary operator '+'
    with the following type of object: un string (`str`).
    This operation is not defined for this type of object.
    
    Perhaps you meant to write `+=` instead of `=+`
    
    Excepción elevada en la linea 371 del archivo TESTS:\runtime\test_type_error.py.
    
       366:         assert "You tried to use the unary operator '~'" in result
       368:     try:
       369:         # fmt: off
       370:         a = "abc"
    -->371:         a =+ "def"
                       ^^^^^^^
       372:         # fmt: on


Builtin has no len
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 780, in test_Builtin_has_no_len
        len("Hello world".split)
    TypeError: object of type 'builtin_function_or_method' has no len()
    
        Did you forget to call `"Hello world".split`?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    I suspect that you forgot to add parentheses to call `"Hello world".split`.
    You might have meant to write:
    `len("Hello world".split())`
    
    Excepción elevada en la linea 780 del archivo TESTS:\runtime\test_type_error.py.
    
       778: def test_Builtin_has_no_len():
       779:     try:
    -->780:         len("Hello world".split)
       781:     except TypeError as e:

            len:  <builtin function len>
            "Hello world".split:  <builtin method split of str object>
        


Can only concatenate
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 37, in test_Can_only_concatenate
        result = a_tuple + a_list
    TypeError: can only concatenate tuple (not "list") to tuple
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    You tried to concatenate (add) two different types of objects:
    una `tuple` and una `list`.
    
    Excepción elevada en la linea 37 del archivo TESTS:\runtime\test_type_error.py.
    
       34:     try:
       35:         a_tuple = (1, 2, 3)
       36:         a_list = [1, 2, 3]
    -->37:         result = a_tuple + a_list
                            ^^^^^^^^^^^^^^^^
       38:     except TypeError as e:

            a_list:  [1, 2, 3]
            a_tuple:  (1, 2, 3)
        


Cannot convert dictionary update sequence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 766, in test_Cannot_convert_dictionary_update_sequence
        dd.update([1, 2, 3])
    TypeError: cannot convert dictionary update sequence element #0 to a sequence
    
        Perhaps you need to use the `dict.fromkeys()` method.
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    `dict.update()` does not accept a sequence as an argument.
    Instead of writing `dd.update([1, 2, 3])`
    perhaps you should use the `dict.fromkeys()` method: `dd.update( dict.fromkeys([1, 2, 3]) )`.
    
    Excepción elevada en la linea 766 del archivo TESTS:\runtime\test_type_error.py.
    
       762:         assert "you should use the `dict.fromkeys()`" in result
       764:     dd = {"a": "a"}
       765:     try:
    -->766:         dd.update([1, 2, 3])
       767:     except TypeError as e:

            dd:  {'a': 'a'}
            dd.update:  <builtin method update of dict object>
        


Cannot multiply by non int
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 570, in test_Cannot_multiply_by_non_int
        "a" * "2"
    TypeError: can't multiply sequence by non-int of type 'str'
    
        Did you forget to convert `"2"` into an integer?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    You can only multiply sequences, such as list, tuples,
     strings, etc., by integers.
    Perhaps you forgot to convert `"2"` into an integer.
    
    Excepción elevada en la linea 570 del archivo TESTS:\runtime\test_type_error.py.
    
       566:     if friendly_traceback.get_lang() == "en":
       567:         assert "Did you forget to convert `c` into an integer?" in result
       569:     try:
    -->570:         "a" * "2"
       571:     except TypeError as e:


Cannot unpack non iterable object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 738, in test_Cannot_unpack_non_iterable_object
        a, b = 42.0
    TypeError: cannot unpack non-iterable float object
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Unpacking is a convenient way to assign a name,
    to each item of an iterable.
    An iterable is an object capable of returning its members one at a time.
    Python containers (`list, tuple, dict`, etc.) are iterables,
    but not objects of type `float`.
    
    Excepción elevada en la linea 738 del archivo TESTS:\runtime\test_type_error.py.
    
       736: def test_Cannot_unpack_non_iterable_object():
       737:     try:
    -->738:         a, b = 42.0
       739:     except TypeError as e:


Comparison not supported
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 320, in test_Comparison_not_supported
        b >= a
    TypeError: '>=' not supported between instances of 'int' and 'str'
    
        ¿Has olvidado convertir el string `a` al tipo un número entero (`int`)?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    You tried to do an order comparison (>=)
    between two incompatible types of objects:
    un número entero (`int`) and un string (`str`).
    Perhaps you forgot to convert the string `a` into un número entero (`int`).
    
    Excepción elevada en la linea 320 del archivo TESTS:\runtime\test_type_error.py.
    
       317:     try:
       318:         a = "2"
       319:         b = 42
    -->320:         b >= a
       321:     except TypeError as e:

            a:  '2'
            b:  42
        


Derive from BaseException
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 513, in test_Derive_from_BaseException
        raise "exception"  # noqa
    TypeError: exceptions must derive from BaseException
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    En Python 3, las excepciones deben derivarse de `BaseException`.
    
    Excepción elevada en la linea 513 del archivo TESTS:\runtime\test_type_error.py.
    
       511: def test_Derive_from_BaseException():
       512:     try:
    -->513:         raise "exception"  # noqa
       514:     except TypeError as e:


Indices must be integers or slices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 652, in test_Indices_must_be_integers_or_slices
        [1, 2, 3]["2"]
    TypeError: list indices must be integers or slices, not str
    
        Did you forget to convert `"2"` into an integer?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    In the expression `[1, 2, 3]["2"]`
    what is included between the square brackets, `[...]`,
    must be either an integer or a slice
    (`start:stop` or `start:stop:step`) 
    and you have used un string (`str`) instead.
    
    Perhaps you forgot to convert `"2"` into an integer.
    
    Excepción elevada en la linea 652 del archivo TESTS:\runtime\test_type_error.py.
    
       648:     if friendly_traceback.get_lang() == "en":
       649:         assert "Perhaps you forgot to convert `2.0` into an integer." in result
       651:     try:
    -->652:         [1, 2, 3]["2"]
       653:     except TypeError as e:


Not an integer
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 615, in test_Not_an_integer
        range(c, d)
    TypeError: 'str' object cannot be interpreted as an integer
    
        Did you forget to convert `c, d` into integers?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    You wrote an object of type `str` where an integer was expected.
    Perhaps you forgot to convert `c, d` into integers.
    Excepción elevada en la linea 615 del archivo TESTS:\runtime\test_type_error.py.
    
       611:         assert "Perhaps you forgot to convert `1.0" in result
       613:     c, d = "2", "3"
       614:     try:
    -->615:         range(c, d)
       616:     except TypeError as e:

            c:  '2'
            d:  '3'
            range:  <class range>
        


Not callable
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 500, in test_Not_callable
        _ = [1, 2](a + b)
    TypeError: 'list' object is not callable
    
        Did you mean `[1, 2][a + b]`?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Because of the surrounding parenthesis, `(a + b)` 
    is interpreted by Python as indicating a function call for 
    `[1, 2]`, which is an object of type `list`
    which cannot be called.
    
    However, `[1, 2]` is a sequence.
    Perhaps you meant to use `[]` instead of `()` and write
    `[1, 2][a + b]`
    
    Excepción elevada en la linea 500 del archivo TESTS:\runtime\test_type_error.py.
    
       496:         assert "b.a_list[3]" in result
       498:     try:
       499:         a, b = 3, 7
    -->500:         _ = [1, 2](a + b)
                        ^^^^^^^^^^^^^
       501:     except TypeError as e:

            a:  3
            b:  7
            a + b:  10
        


Object is not iterable
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 724, in test_Object_is_not_iterable
        list(42)
    TypeError: 'int' object is not iterable
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    An iterable is an object capable of returning its members one at a time.
    Python containers (`list, tuple, dict`, etc.) are iterables.
    An iterable is required here.
    
    Excepción elevada en la linea 724 del archivo TESTS:\runtime\test_type_error.py.
    
       722: def test_Object_is_not_iterable():
       723:     try:
    -->724:         list(42)
       725:     except TypeError as e:

            list:  <class list>
        


Object is not subscriptable
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 710, in test_Object_is_not_subscriptable
        a = f[1]
    TypeError: 'function' object is not subscriptable
    
        ¿Quieres decir `f(1)`?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Subscriptable objects are typically containers from which
    you can retrieve item using the notation `[...]`.
    
    Perhaps you meant to write `f(1)`.
    
    Excepción elevada en la linea 710 del archivo TESTS:\runtime\test_type_error.py.
    
       706:     def f():
       707:         pass
       709:     try:
    -->710:         a = f[1]
                        ^^^^
       711:     except TypeError as e:

            f:  <function f>
                defined in <function test_Object_is_not_subscriptable>
        


Slice indices must be integers or None
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 666, in test_Slice_indices_must_be_integers_or_None
        [1, 2, 3][1.0:2.0]
    TypeError: slice indices must be integers or None or have an __index__ method
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    When using a slice to extract a range of elements
    from a sequence, that is something like
    `[start:stop]` or `[start:stop:step]`
    each of `start`, `stop`, `step` must be either an integer, `None`,
    or possibly some other object having an `__index__` method.
    
    Excepción elevada en la linea 666 del archivo TESTS:\runtime\test_type_error.py.
    
       664: def test_Slice_indices_must_be_integers_or_None():
       665:     try:
    -->666:         [1, 2, 3][1.0:2.0]
       667:     except TypeError as e:


Too few positional argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 441, in test_Too_few_positional_argument
        fn(1)
    TypeError: fn() missing 2 required positional arguments: 'b' and 'c'
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    You apparently have called the function 'fn()' with
    fewer positional arguments than it requires (2 missing).
    
    Excepción elevada en la linea 441 del archivo TESTS:\runtime\test_type_error.py.
    
       437:     def fn(a, b, c):
       438:         pass
       440:     try:
    -->441:         fn(1)
       442:     except TypeError as e:

            fn:  <function fn>
                defined in <function test_Too_few_positional_argument>
        


Too many positional argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 422, in test_Too_many_positional_argument
        A().f(1)
    TypeError: f() takes 1 positional argument but 2 were given
    
        Perhaps you forgot `self` when defining `f`.
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    You apparently have called the function `f` with
    2 positional argument(s) while it requires 1
    such positional argument(s).
    Perhaps you forgot `self` when defining `f`.
    
    Excepción elevada en la linea 422 del archivo TESTS:\runtime\test_type_error.py.
    
       418:         def f(x):
       419:             pass
       421:     try:
    -->422:         A().f(1)
       423:     except TypeError as e:

            A:  <class A>
                defined in <function test_type_error.test_Too_many_positional_argument>
        


Tuple no item assignment
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 389, in test_Tuple_no_item_assignment
        a[0] = 0
    TypeError: 'tuple' object does not support item assignment
    
        ¿Querías usar una lista?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    In Python, some objects are known as immutable:
    once defined, their value cannot be changed.
    You tried change part of such an immutable object: una `tuple`,
    most likely by using an indexing operation.
    Tal vez quisiste usar una lista en su lugar.
    
    Excepción elevada en la linea 389 del archivo TESTS:\runtime\test_type_error.py.
    
       386: def test_Tuple_no_item_assignment():
       387:     a = (1, 2, 3)
       388:     try:
    -->389:         a[0] = 0
       390:     except TypeError as e:

            a:  (1, 2, 3)
            a[0]:  1
        


Unhachable type
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 683, in test_Unhachable_type
        {[1, 2]: 1}
    TypeError: unhashable type: 'list'
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Only hashable objects can be used
    as elements of `set` or keys of `dict`.
    Hashable objects are objects that do not change value
    once they have been created.Instead of using una `list`, consider using una `tuple`.
    
    Excepción elevada en la linea 683 del archivo TESTS:\runtime\test_type_error.py.
    
       681: def test_Unhachable_type():
       682:     try:
    -->683:         {[1, 2]: 1}
       684:     except TypeError as e:


Unsupported operand types
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 283, in test_Unsupported_operand_types
        a @= b
    TypeError: unsupported operand type(s) for @=: 'str' and 'int'
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    You tried to use the operator @=
    using two incompatible types of objects:
    un string (`str`) and un número entero (`int`).
    This operator is normally used only
    for multiplication of matrices.
    
    Excepción elevada en la linea 283 del archivo TESTS:\runtime\test_type_error.py.
    
       280:     try:
       281:         a = "a"
       282:         b = 2
    -->283:         a @= b
       284:     except TypeError as e:

            a:  'a'
            b:  2
        


function got multiple argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 872, in test_function_got_multiple_argument
        fn2(0, a=1)
    TypeError: fn2() got multiple values for argument 'a'
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    You have specified the value of argument `a` more than once
    when calling the function named `fn2`.
    This function has the following arguments:
    `a, b=1`
    
    Excepción elevada en la linea 872 del archivo TESTS:\runtime\test_type_error.py.
    
       868:     def fn2(a, b=1):
       869:         pass
       871:     try:
    -->872:         fn2(0, a=1)
       873:     except TypeError as e:

            fn2:  <function fn2>
                defined in <function test_function_got_multiple_argument>
        


function has no len
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 797, in test_function_has_no_len
        len(bad)
    TypeError: object of type 'function' has no len()
    
        Did you forget to call `bad`?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    I suspect that you forgot to add parentheses to call `bad`.
    You might have meant to write:
    `len(bad())`
    
    Excepción elevada en la linea 797 del archivo TESTS:\runtime\test_type_error.py.
    
       793:     def bad():
       794:         pass
       796:     try:
    -->797:         len(bad)
       798:     except TypeError as e:

            bad:  <function bad> defined in <function test_function_has_no_len>
            len:  <builtin function len>
        


getattr attribute name must be string
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 918, in test_getattr_attribute_name_must_be_string
        getattr("__repr__", 1)  # as reported in issue #77
    TypeError: getattr(): attribute name must be string
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    The second argument of the function `getattr()` must be a string.
    
    Excepción elevada en la linea 918 del archivo TESTS:\runtime\test_type_error.py.
    
       911:     if friendly_traceback.get_lang() == "en":
       912:         assert (
       913:             "The second argument of the function `hasattr()` must be a string."
       914:             in result
       915:         )
       917:     try:
    -->918:         getattr("__repr__", 1)  # as reported in issue #77
       919:     except TypeError as e:

            getattr:  <builtin function getattr>
        


method got multiple argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 891, in test_method_got_multiple_argument
        t.some_method(0, a=1)
    TypeError: some_method() got multiple values for argument 'a'
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    You have specified the value of argument `a` more than once
    when calling the function named `t.some_method`.
    This function has only one argument: `a`
    
    Excepción elevada en la linea 891 del archivo TESTS:\runtime\test_type_error.py.
    
       887:             pass
       889:     t = T()
       890:     try:
    -->891:         t.some_method(0, a=1)
       892:     except TypeError as e:

            t:  <T object>
                defined in <function test_type_error.test_method_got_multiple_argument>
            t.some_method:  <bound method T.some_method>
                of <T object>
                defined in <function test_type_error.test_method_got_multiple_argument>
        


vars arg must have dict
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 841, in test_vars_arg_must_have_dict
        vars(f)
    TypeError: vars() argument must have __dict__ attribute
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    The function `vars` is used to list the content of the
    `__dict__` attribute of an object.
    Object `f` uses `__slots__` instead of `__dict__`.
    
    Excepción elevada en la linea 841 del archivo TESTS:\runtime\test_type_error.py.
    
       837:         assert no_slots not in result
       838:         assert use_slots not in result
       840:     try:
    -->841:         vars(f)
       842:     except TypeError as e:

            f:  <F object>
                defined in <function test_type_error.test_vars_arg_must_have_dict>
            vars:  <builtin function vars>
        


UnboundLocalError
-----------------


Missing both
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 63, in test_Missing_both
        outer_missing_both()
      File "TESTS:\runtime\test_unbound_local_error.py", line 22, in outer_missing_both
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 21, in inner
        spam_missing_both += 1
    UnboundLocalError: local variable 'spam_missing_both' referenced before assignment
    
        Did you forget to add either `global spam_missing_both` or 
        `nonlocal spam_missing_both`?
        
    En Python, las variables que se utilizan dentro de una función sé conocen
    como variables locales. Previo a ser empleadas, se les debe asignar un valor.
    Una variable que se emplea antes de que se le asigne
    un valor se supone que está definida fuera de esa función; se 
    conoce como `global` (o a veces `no local`). No se puede asignar un
    valor a dicha variable global dentro de una función sin indicar primero a
    Python que se trata de una variable global, de lo contrario verá
    un `UnboundLocalError`.
    
    The name `spam_missing_both` exists in both the global and nonlocal scope.
    This can be rather confusing and is not recommended.
    Depending on which variable you wanted to refer to, you needed to add either
    
        global spam_missing_both
    
    or
    
        nonlocal spam_missing_both
    
    as the first line inside your function.
    
    La ejecución se detuvo en la linea 63 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       61: def test_Missing_both():
       62:     try:
    -->63:         outer_missing_both()
       64:     except UnboundLocalError as e:

            global outer_missing_both:  <function outer_missing_both>
        
    Excepción elevada en la linea 21 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       20:     def inner():
    -->21:         spam_missing_both += 1

            global spam_missing_both:  1
        


Missing global
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 27, in test_Missing_global
        outer_missing_global()
      File "TESTS:\runtime\test_unbound_local_error.py", line 10, in outer_missing_global
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 9, in inner
        spam_missing_global += 1
    UnboundLocalError: local variable 'spam_missing_global' referenced before assignment
    
        Did you forget to add `global spam_missing_global`?
        
    En Python, las variables que se utilizan dentro de una función sé conocen
    como variables locales. Previo a ser empleadas, se les debe asignar un valor.
    Una variable que se emplea antes de que se le asigne
    un valor se supone que está definida fuera de esa función; se 
    conoce como `global` (o a veces `no local`). No se puede asignar un
    valor a dicha variable global dentro de una función sin indicar primero a
    Python que se trata de una variable global, de lo contrario verá
    un `UnboundLocalError`.
    
    The name `spam_missing_global` exists in the global scope.
    Perhaps the statement
    
        global spam_missing_global
    
    should have been included as the first line inside your function.
    
    La ejecución se detuvo en la linea 27 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       25: def test_Missing_global():
       26:     try:
    -->27:         outer_missing_global()
       28:     except UnboundLocalError as e:

            global outer_missing_global:  <function outer_missing_global>
        
    Excepción elevada en la linea 9 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       8:     def inner():
    -->9:         spam_missing_global += 1

            global spam_missing_global:  1
        


Missing nonlocal
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 45, in test_Missing_nonlocal
        outer_missing_nonlocal()
      File "TESTS:\runtime\test_unbound_local_error.py", line 16, in outer_missing_nonlocal
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 15, in inner
        spam_missing_nonlocal += 1
    UnboundLocalError: local variable 'spam_missing_nonlocal' referenced before assignment
    
        Did you forget to add `nonlocal spam_missing_nonlocal`?
        
    En Python, las variables que se utilizan dentro de una función sé conocen
    como variables locales. Previo a ser empleadas, se les debe asignar un valor.
    Una variable que se emplea antes de que se le asigne
    un valor se supone que está definida fuera de esa función; se 
    conoce como `global` (o a veces `no local`). No se puede asignar un
    valor a dicha variable global dentro de una función sin indicar primero a
    Python que se trata de una variable global, de lo contrario verá
    un `UnboundLocalError`.
    
    The name `spam_missing_nonlocal` exists in the nonlocal scope.
    Perhaps the statement
    
        nonlocal spam_missing_nonlocal
    
    should have been included as the first line inside your function.
    
    La ejecución se detuvo en la linea 45 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       43: def test_Missing_nonlocal():
       44:     try:
    -->45:         outer_missing_nonlocal()
       46:     except UnboundLocalError as e:

            global outer_missing_nonlocal:  <function outer_missing_nonlocal>
        
    Excepción elevada en la linea 15 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       14:     def inner():
    -->15:         spam_missing_nonlocal += 1


Typo in local
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 101, in test_Typo_in_local
        test2()
      File "TESTS:\runtime\test_unbound_local_error.py", line 98, in test2
        alpha3 += 1
    UnboundLocalError: local variable 'alpha3' referenced before assignment
    
        ¿Quieres decir `alpha2`?
        
    En Python, las variables que se utilizan dentro de una función sé conocen
    como variables locales. Previo a ser empleadas, se les debe asignar un valor.
    Una variable que se emplea antes de que se le asigne
    un valor se supone que está definida fuera de esa función; se 
    conoce como `global` (o a veces `no local`). No se puede asignar un
    valor a dicha variable global dentro de una función sin indicar primero a
    Python que se trata de una variable global, de lo contrario verá
    un `UnboundLocalError`.
    
    Instead of writing `alpha3`, perhaps you meant one of the following:
    *   alcance local: `alpha2`, `alpha1`
    
    La ejecución se detuvo en la linea 101 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
        97:         alpha2 = 1
        98:         alpha3 += 1
       100:     try:
    -->101:         test2()
       102:     except UnboundLocalError as e:

            test2:  <function test2> defined in <function test_Typo_in_local>
        
    Excepción elevada en la linea 98 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       95:     def test2():
       96:         alpha1 = 1
       97:         alpha2 = 1
    -->98:         alpha3 += 1


Using name of builtin
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 121, in test_Using_name_of_builtin
        dist([])
      File "TESTS:\runtime\test_unbound_local_error.py", line 117, in dist
        max = max(points)
    UnboundLocalError: local variable 'max' referenced before assignment
    
    En Python, las variables que se utilizan dentro de una función sé conocen
    como variables locales. Previo a ser empleadas, se les debe asignar un valor.
    Una variable que se emplea antes de que se le asigne
    un valor se supone que está definida fuera de esa función; se 
    conoce como `global` (o a veces `no local`). No se puede asignar un
    valor a dicha variable global dentro de una función sin indicar primero a
    Python que se trata de una variable global, de lo contrario verá
    un `UnboundLocalError`.
    
    `max` is a Python builtin function.
    You have tried to assign a value to `max` inside a function
    while also using its original meaning in the function.
    
    Note that it is generally not a good idea to give a local variable
    the same name as a Python builtin function (like `max`).
    
    La ejecución se detuvo en la linea 121 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       118:         min = min(points)
       119:         return max - min
       120:     try:
    -->121:         dist([])
       122:     except UnboundLocalError as e:

            dist:  <function dist> defined in <function test_Using_name_of_builtin>
        
    Excepción elevada en la linea 117 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       116:     def dist(points):
    -->117:         max = max(points)
                    ^^^
       118:         min = min(points)

            max:  <builtin function max>
        


UnknownError
------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unknown_error.py", line 12, in test_Generic
        raise UnknownException("Some informative message about an unknown exception.")
    UnknownException: Some informative message about an unknown exception.
    
    No se conoce ninguna información sobre esta excepción.
    Por favor, informe de este ejemplo a
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    Si está utilizando un REPL, utilice `www('bug')` para hacerlo.
    
    Si está utilizando la consola Friendly, utilice `www()` para
    hacer una búsqueda en Internet para este caso en particular.
    
    Excepción elevada en la linea 12 del archivo TESTS:\runtime\test_unknown_error.py.
    
        9:     old_debug = friendly_traceback.debug_helper.DEBUG
       10:     friendly_traceback.debug_helper.DEBUG = False
       11:     try:
    -->12:         raise UnknownException("Some informative message about an unknown exception.")
       13:     except Exception as e:

            global UnknownException:  <class test_unknown_error.UnknownException>
        


ValueError
----------


Date invalid month
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 58, in test_Date_invalid_month
        d = date(2021, 13, 1)
    ValueError: month must be in 1..12
    
        Did you specify an invalid month?
        
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    I am guessing that you specify an invalid value for a month
    in a `date` object. Valid values are integers, from 1 to 12.
    
    Excepción elevada en la linea 58 del archivo TESTS:\runtime\test_value_error.py.
    
       55: def test_Date_invalid_month():
       56:     from datetime import date
       57:     try:
    -->58:         d = date(2021, 13, 1)
                       ^^^^^^^^^^^^^^^^^
       59:     except ValueError as e:

            date:  <class datetime.date>
        


Not enough values to unpack
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 28, in test_Not_enough_values_to_unpack
        a, b, c = d
    ValueError: not enough values to unpack (expected 3, got 2)
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    Unpacking is a convenient way to assign a name,
    to each item of an iterable.
    In this instance, there are more names (3)
    than the length of the iterable, un string (`str`) of length 2.
    
    Excepción elevada en la linea 28 del archivo TESTS:\runtime\test_value_error.py.
    
       24:     assert "ValueError: not enough values to unpack (expected 3, got 2)" in result
       26:     d = "ab"
       27:     try:
    -->28:         a, b, c = d
       29:     except ValueError as e:

            d:  'ab'
        


Too many values to unpack
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 43, in test_Too_many_values_to_unpack
        a, b = c
    ValueError: too many values to unpack (expected 2)
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    Unpacking is a convenient way to assign a name,
    to each item of an iterable.
    In this instance, there are fewer names (2)
    than the length of the iterable, una `list` of length 3.
    
    Excepción elevada en la linea 43 del archivo TESTS:\runtime\test_value_error.py.
    
       40: def test_Too_many_values_to_unpack():
       41:     c = [1, 2, 3]
       42:     try:
    -->43:         a, b = c
       44:     except ValueError as e:

            c:  [1, 2, 3]
        


slots conflicts with class variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 72, in test_slots_conflicts_with_class_variable
        class F:
    ValueError: 'a' in __slots__ conflicts with class variable
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    The name `a` is used both as the name of a class variable
    and as a string item in the class `__slots__`;
    this is not allowed.
    
    Excepción elevada en la linea 72 del archivo TESTS:\runtime\test_value_error.py.
    
       70: def test_slots_conflicts_with_class_variable():
       71:     try:
    -->72:         class F:
       73:             __slots__ = ["a", "b"]


time strptime incorrect format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 98, in test_time_strptime_incorrect_format
        time.strptime("2020-01-01", "%d %m %Y")
    ValueError: time data '2020-01-01' does not match format '%d %m %Y'
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    The value you gave for the time is not in the format you specified.
    Make sure to use the same separator between items
    (for example, between day and month) and keep the order the same
    in both the data provided and the format you specified.
    The following table might be useful:
    https://docs.python.org/3/library/time.html#time.strftime
    The following site might also be useful: https://www.strfti.me/
    
    Excepción elevada en la linea 98 del archivo TESTS:\runtime\test_value_error.py.
    
       94:         return
       96:     import time
       97:     try:
    -->98:         time.strptime("2020-01-01", "%d %m %Y")
       99:     except ValueError as e:

            time:  <module time (builtin)>
            time.strptime:  <builtin function strptime>
        


ZeroDivisionError
-----------------


Complex division
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 155, in test_Complex_division
        1 / zero
    ZeroDivisionError: complex division by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    You are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Excepción elevada en la linea 155 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       152: def test_Complex_division():
       153:     zero = 0j
       154:     try:
    -->155:         1 / zero
       156:     except ZeroDivisionError as e:

            zero:  0j
        


Division by zero literal
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 199, in test_Division_by_zero_literal
        1. / 0
    ZeroDivisionError: float division by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Estás dividiendo por cero.
    
    Excepción elevada en la linea 199 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       194:     if friendly_traceback.get_lang() == "en":
       195:         assert "Using the modulo operator, you are dividing by zero" in result
       198:     try:
    -->199:         1. / 0
       200:     except ZeroDivisionError as e:


Division operator
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 17, in test_Division_operator
        1 / zero
    ZeroDivisionError: division by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    You are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Excepción elevada en la linea 17 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       13:     if friendly_traceback.get_lang() == "en":
       14:         assert "The following mathematical expression includes a division by zero" in result
       16:     try:
    -->17:         1 / zero
       18:     except ZeroDivisionError as e:

            zero:  0
        


Divmod
~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 82, in test_Divmod
        divmod(1, zero)
    ZeroDivisionError: integer division or modulo by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    The second argument of the `divmod()` function is zero.
    
    Excepción elevada en la linea 82 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       79: def test_Divmod():
       80:     zero = 0
       81:     try:
    -->82:         divmod(1, zero)
       83:     except ZeroDivisionError as e:

            zero:  0
            divmod:  <builtin function divmod>
        


Float division
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 125, in test_Float_division
        1 / zero
    ZeroDivisionError: float division by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    You are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Excepción elevada en la linea 125 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       122: def test_Float_division():
       123:     zero = 0.
       124:     try:
    -->125:         1 / zero
       126:     except ZeroDivisionError as e:

            zero:  0.0
        


Float divmod
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 140, in test_Float_divmod
        divmod(1, zero)
    ZeroDivisionError: float divmod()
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    The second argument of the `divmod()` function is equal to zero.
    
    Excepción elevada en la linea 140 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       137: def test_Float_divmod():
       138:     zero = 0.
       139:     try:
    -->140:         divmod(1, zero)
       141:     except ZeroDivisionError as e:

            zero:  0.0
            divmod:  <builtin function divmod>
        


Float modulo
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 110, in test_Float_modulo
        1 % zero
    ZeroDivisionError: float modulo
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Using the modulo operator, you are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Excepción elevada en la linea 110 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       106:         assert "The following mathematical expression includes a division by zero" in result
       107:         assert "done using the modulo operator" in result
       109:     try:
    -->110:         1 % zero
       111:     except ZeroDivisionError as e:

            zero:  0.0
        


Integer division operator
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 42, in test_Integer_division_operator
        1 // zero
    ZeroDivisionError: integer division or modulo by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    You are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Excepción elevada en la linea 42 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       38:     if friendly_traceback.get_lang() == "en":
       39:         assert "The following mathematical expression includes a division by zero" in result
       41:     try:
    -->42:         1 // zero
       43:     except ZeroDivisionError as e:

            zero:  0
        


Mixed operations
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 212, in test_Mixed_operations
        a = divmod(8, 1 // 2)
    ZeroDivisionError: integer division or modulo by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    The following mathematical expression includes a division by zero:
    
        divmod(8, 1 // 2)
    
    Excepción elevada en la linea 212 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       210: def test_Mixed_operations():
       211:     try:
    -->212:         a = divmod(8, 1 // 2)
                        ^^^^^^^^^^^^^^^^^
       213:     except ZeroDivisionError as e:

            divmod:  <builtin function divmod>
            1 // 2:  0
        


Modulo operator
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 67, in test_Modulo_operator
        1 % zero
    ZeroDivisionError: integer division or modulo by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Using the modulo operator, you are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Excepción elevada en la linea 67 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       63:     if friendly_traceback.get_lang() == "en":
       64:         assert "The following mathematical expression includes a division by zero" in result
       66:     try:
    -->67:         1 % zero
       68:     except ZeroDivisionError as e:

            zero:  0
        


Raise zero negative power
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 170, in test_Raise_zero_negative_power
        zero ** -1
    ZeroDivisionError: 0.0 cannot be raised to a negative power
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    You are attempting to raise the number 0 to a negative power
    which is equivalent to dividing by zero.
    
    Excepción elevada en la linea 170 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       167: def test_Raise_zero_negative_power():
       168:     zero = 0
       169:     try:
    -->170:         zero ** -1
       171:     except ZeroDivisionError as e:

            zero:  0
        

