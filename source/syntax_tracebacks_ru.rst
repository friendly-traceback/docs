
Friendly SyntaxError tracebacks - in Русский
==========================================================

Friendly aims to provide friendlier feedback when an exception
is raised than what is done by Python.

This file contains only examples of SyntaxError and its sub-classes.
Some tests may appear to be repetitive to a human reader
but they are may be included to ensure more complete test coverage.

.. note::

     The content of this page is generated by running
     `trb_syntax_russian.py` located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.
     On Windows, if Sphinx is installed on your computer, it is suggested
     instead to run make_trb.bat in the root directory as it will create
     similar files for all languages *and* update the documentation.

Friendly-traceback version: 0.7.49
Python version: 3.10.6



(1) Using 'and' in import statement
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\and_in_import_statement.py", line 1
        from math import sin and cos
                             ^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\and_in_import_statement.py'
    в указанном ^ месте.
    
    
       1| from math import sin and cos
                               ^^^

    Ключевое слово Python 'and' можно использовать только для булевых выражений.
    Возможно, вы хотели написать
    
    `from math import sin , cos`
    

(2) Using 'and' after comma in import statement
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\and_in_import_statement_2.py", line 1
        from math import sin, tan, and cos
                                   ^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\and_in_import_statement_2.py'
    в указанном ^ месте.
    
    
       1| from math import sin, tan, and cos
                                     ^^^

    Ключевое слово Python 'and' можно использовать только для булевых выражений.
    Возможно, вы хотели написать
    
    `from math import sin, tan,  cos`
    

(3) Annotated name cannot be global
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\annotated_name_global.py", line 4
        var:int = 1
        ^^^^^^^^^^^
    SyntaxError: annotated name 'var' can't be global
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\annotated_name_global.py'
    в указанном ^ месте.
    
    
       4|     var:int = 1
              ^^^

    Объект с именем `var` определен с аннотацией типа
    как локальная переменная. Он не может быть объявлен как глобальная переменная.
    

(4) Incorrect use of 'from module import ... as ...
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\as_instead_of_comma_in_import.py", line 2
        from math import (sin, cos) as funcs
                                    ^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\as_instead_of_comma_in_import.py'
    в указанном ^ месте.
    
    
       2| from math import (sin, cos) as funcs
                                      ^^

    Предполагаю, что вы пытаетесь импортировать по крайней мере один объект
    из модуля `math` и переименовать его с помощью ключевого слова Python `as`;
    Это ключевое слово может быть использовано только для переименования одного объекта за раз
    и только используя четко определенный синтаксис.
    Каждый обьект переименовывается в отдельной строке следующим образом:
    
        from math import object_1 as name_1
        from math import object_2 as name_2  # если необходимо
    

(5) Assign instead of equal (or walrus).
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_instead_of_equal.py", line 1
        a = (b = 2)  # issue #65
             ^^^^^
    SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?
    
        Возможно, правильнее использовать `==` или `:=` вместо `=`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_instead_of_equal.py'
    в указанном ^ месте.
    
    
       1| a = (b = 2)  # issue #65
               ^^^^^

    Вы использовали оператор присваивания `=`; но, возможно,
    хотели использовать оператор равенства `==`
    или моржовый оператор `:=`.
    

(6) Name assigned prior to global declaration
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_global_1.py", line 7
        global aa, bb, cc, dd
        ^^^^^^^^^^^^^^^^^^^^^
    SyntaxError: name 'cc' is assigned to before global declaration
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_name_before_global_1.py'
    в указанном ^ месте.
    
    
       7|     global aa, bb, cc, dd
              ^^^^^^         ^^

    Вы присвоили значение переменной `cc`,
    прежде чем объявить ее как глобальную.
    

(7) Name used prior to global declaration
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_global_2.py", line 7
        global var
        ^^^^^^^^^^
    SyntaxError: name 'var' is used prior to global declaration
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_name_before_global_2.py'
    в указанном ^ месте.
    
    
       7|     global var
              ^^^^^^ ^^^

    Вы использовали переменную `var`
    прежде чем объявить ее глобальной переменной.
    

(8) Name used prior to nonlocal declaration
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_nonlocal_1.py", line 11
        nonlocal pp, qq
        ^^^^^^^^^^^^^^^
    SyntaxError: name 'qq' is used prior to nonlocal declaration
    
        Вы забыли сначала написать `nonlocal`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_name_before_nonlocal_1.py'
    в указанном ^ месте.
    
    
       11|         nonlocal pp, qq
                   ^^^^^^^^     ^^

    Вы использовали переменную `qq`
    прежде чем объявить ее как нелокальную переменную.
    

(9) Name assigned prior to nonlocal declaration
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_nonlocal_2.py", line 9
        nonlocal s
        ^^^^^^^^^^
    SyntaxError: name 's' is assigned to before nonlocal declaration
    
        Вы забыли добавить `nonlocal`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_name_before_nonlocal_2.py'
    в указанном ^ месте.
    
    
       9|         nonlocal s
                  ^^^^^^^^ ^

    Вы присвоили значение переменной `s`
    прежде чем объявить ее как нелокальную.
    

(10) Assign to conditional expression
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_conditional.py", line 3
        a if 1 else b = 1
        ^^^^^^^^^^^^^
    SyntaxError: cannot assign to conditional expression
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_conditional.py'
    в указанном ^ месте.
    
    
       3| a if 1 else b = 1
          ^^^^^^^^^^^^^

    С левой стороны от знака равенства находится
    условное выражение вместо имени переменной.
    a if 1 else b = ...
    ^^^^^^^^^^^^^
    
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    

(11) Assignment to keyword (__debug__)
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_debug.py", line 4
        __debug__ = 1
        ^^^^^^^^^
    SyntaxError: cannot assign to __debug__
    
        Вы не можете присвоить значение `__debug__`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_debug.py'
    в указанном ^ месте.
    
    
       4| __debug__ = 1
          ^^^^^^^^^

    `__debug__` является константой в Python; вы не можете присвоить ему другое значение.
    
    

(12) Assignment to keyword (__debug__)
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_debug2.py", line 4
        a.__debug__ = 1
        ^^^^^^^^^^^
    SyntaxError: cannot assign to __debug__
    
        Вы не можете присвоить значение `__debug__`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_debug2.py'
    в указанном ^ месте.
    
    
       4| a.__debug__ = 1
            ^^^^^^^^^

    `__debug__` является константой в Python; вы не можете присвоить ему другое значение.
    
    

(13) Assignment to Ellipsis symbol
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_ellipsis.py", line 4
        ... = 1
        ^^^
    SyntaxError: cannot assign to ellipsis here. Maybe you meant '==' instead of '='?
    
        Многоточию (ellipsis) [`...`] нельзя присвоить значение.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_ellipsis.py'
    в указанном ^ месте.
    
    
       4| ... = 1
          ^^^

    Многоточие (ellipsis) `...` является константой в Python; вы не можете присвоить ему другое значение.
    

(14) Cannot assign to f-string
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_f_string.py", line 6
        f'{x}' = 42
        ^^^^^^
    SyntaxError: cannot assign to f-string expression here. Maybe you meant '==' instead of '='?
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_f_string.py'
    в указанном ^ месте.
    
    
       6| f'{x}' = 42
          ^^^^^^

    Вы написали выражение, в котором f-строка `f'{x}'`
    находится слева от знака равенства.
    f-строка должна находиться только справа от знака равенства.
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    

(15) Cannot assign to function call: single = sign
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_function_call_1.py", line 6
        len('a') = 3
        ^^^^^^^^
    SyntaxError: cannot assign to function call here. Maybe you meant '==' instead of '='?
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_function_call_1.py'
    в указанном ^ месте.
    
    
       6| len('a') = 3
          ^^^^^^^^

    Вы написали выражение
    
        len('a') = ...
        ^^^^^^^^
    где `len('a')`, слева от знака равенства, либо является
    либо включает вызов функции и не является просто именем переменной.
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    

(16) Cannot assign to function call: two = signs
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_function_call_2.py", line 6
        func(a, b=3) = 4
        ^^^^^^^^^^^^
    SyntaxError: cannot assign to function call here. Maybe you meant '==' instead of '='?
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_function_call_2.py'
    в указанном ^ месте.
    
    
       6| func(a, b=3) = 4
          ^^^^^^^^^^^^

    Вы написали выражение
    
        func(a, b=3) = ...
        ^^^^^^^^^^^^
    где `func(a, b=3)`, слева от знака равенства, либо является
    либо включает вызов функции и не является просто именем переменной.
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    

(17) Cannot assign to function call: continues on second line
-------------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_function_call_3.py", line 6
        a = f(1, 2,  # this is a comment
            ^^^^^^^^^^^^^^^^^^^^^^^^^^^^-->
    SyntaxError: cannot assign to function call
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_function_call_3.py'
    в указанном ^ месте.
    
    
    -->6| a = f(1, 2,  # this is a comment
              ^^^^^^^-->
       7|       3, 4) = 5

    Вы написали выражение
    
        f(1, 2,...) = ...
        ^^^^^^^-->
    где `f(1, 2,...)`, слева от знака равенства, либо является
    либо включает вызов функции и не является просто именем переменной.
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    

(18) Assign to generator expression
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_generator.py", line 3
        (x for x in x) = 1
        ^^^^^^^^^^^^^^
    SyntaxError: cannot assign to generator expression
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_generator.py'
    в указанном ^ месте.
    
    
       3| (x for x in x) = 1
          ^^^^^^^^^^^^^^

    Слева от знака равенства генераторное выражение
    вместо имени переменной.
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    

(19) Cannot assign to literal - 4
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_dict.py", line 7
        {1 : 2, 2 : 4} = 5
        ^^^^^^^^^^^^^^
    SyntaxError: cannot assign to dict literal here. Maybe you meant '==' instead of '='?
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_literal_dict.py'
    в указанном ^ месте.
    
    
       7| {1 : 2, 2 : 4} = 5
          ^^^^^^^^^^^^^^

    Вы написали выражение типа
    
        {1 : 2, 2 : 4} = 5
    где `{1 : 2, 2 : 4}`, слева от знака равенства,
    является или включает в себя реальный объект типа `dict`
    а не просто имя переменной.
    
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    

(20) Cannot assign to literal int
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_int.py", line 3
        1 = a
        ^
    SyntaxError: cannot assign to literal here. Maybe you meant '==' instead of '='?
    
        Возможно, вы хотели написать `a = 1`
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_literal_int.py'
    в указанном ^ месте.
    
    
       3| 1 = a
          ^

    Вы написали выражение типа
    
        1 = a
    где `1`, слева от знака равенства,
    является или включает в себя реальный объект типа `int`
    а не просто имя переменной.
    Возможно, вы хотели написать:
    
        a = 1
    
    

(21) Cannot assign to literal int - 2
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_int_2.py", line 3
        1 = 2
        ^
    SyntaxError: cannot assign to literal here. Maybe you meant '==' instead of '='?
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_literal_int_2.py'
    в указанном ^ месте.
    
    
       3| 1 = 2
          ^

    Вы написали выражение типа
    
        1 = 2
    где `1`, слева от знака равенства,
    является или включает в себя реальный объект типа `int`
    а не просто имя переменной.
    
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    

(22) Cannot assign to literal - 5
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_int_3.py", line 4
        1 = a = b
        ^
    SyntaxError: cannot assign to literal
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_literal_int_3.py'
    в указанном ^ месте.
    
    
       4| 1 = a = b
          ^

    Вы написали выражение типа
    
        1 = variable_name
    где `1`, слева от знака равенства,
    является или включает в себя реальный объект типа `int`
    а не просто имя переменной.
    
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    

(23) Cannot assign to literal - 3
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_set.py", line 7
        {1, 2, 3} = 4
        ^^^^^^^^^
    SyntaxError: cannot assign to set display here. Maybe you meant '==' instead of '='?
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_literal_set.py'
    в указанном ^ месте.
    
    
       7| {1, 2, 3} = 4
          ^^^^^^^^^

    Вы написали выражение типа
    
        {1, 2, 3} = 4
    где `{1, 2, 3}`, слева от знака равенства,
    является или включает в себя реальный объект типа `set`
    а не просто имя переменной.
    
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    

(24) Assign to keyword def
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_keyword_def.py", line 3
        def = 2
            ^
    SyntaxError: invalid syntax
    
        Ключевые слова Python нельзя использовать в качестве идентификаторов
        (имен переменных).
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_keyword_def.py'
    в указанном ^ месте.
    
    
       3| def = 2
          ^^^

    Вы пытались присвоить значение `def`, ключевому слову Python.
    Это недопустимо.
    
    

(25) Assign to keyword else
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_keyword_else.py", line 3
        else = 1
        ^^^^
    SyntaxError: invalid syntax
    
        Ключевые слова Python нельзя использовать в качестве идентификаторов
        (имен переменных).
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_keyword_else.py'
    в указанном ^ месте.
    
    
       3| else = 1
          ^^^^

    Вы пытались присвоить значение `else`, ключевому слову Python.
    Это недопустимо.
    
    

(26) Assignment to keyword (None)
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_keyword_none.py", line 4
        None = 1
        ^^^^
    SyntaxError: cannot assign to None
    
        Вы не можете присвоить значение `None`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_keyword_none.py'
    в указанном ^ месте.
    
    
       4| None = 1
          ^^^^

    `None` является константой в Python; вы не можете присвоить ему другое значение.
    
    

(27) Assign to math operation
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_operation.py", line 4
        a + 1 = 2
        ^^^^^
    SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?
    
        Возможно, вам нужно `==` вместо `=`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_operation.py'
    в указанном ^ месте.
    
    
       4| a + 1 = 2
          ^^^^^

    Вы написали выражение, включающее некоторые математические операции
    слева от знака равенства, который следует
    использовать только для присвоения значения переменной.
    

(28) Assign to yield expression
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_yield_expression.py", line 1
        (yield i) = 3
         ^^^^^^^
    SyntaxError: cannot assign to yield expression here. Maybe you meant '==' instead of '='?
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assign_to_yield_expression.py'
    в указанном ^ месте.
    
    
       1| (yield i) = 3
           ^^^^^

    Вы написали выражение, которое содержит ключевое слово `yield`
    слева от знака равенства. Такому выражению нельзя присвоить значение.
    Обратите внимание, что, как и ключевое слово `return`,
    `yield` можно использовать только внутри функции.
    

(29) Augmented assignment inside comprehension
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assignment_expression_cannot_rebind.py", line 1
        a = [(i := 1) for i in [1]]
              ^
    SyntaxError: assignment expression cannot rebind comprehension iteration variable 'i'
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assignment_expression_cannot_rebind.py'
    в указанном ^ месте.
    
    
       1| a = [(i := 1) for i in [1]]
                ^

    Вы используете дополненный (моржовый) оператор присваивания `:=` внутри comprehension
    для присвоения значения итерационной переменной `i`.
    Эта переменная предназначена для использования только внутри comprehension.
    Дополненный оператор присваивания обычно используется для присвоения значения переменной, чтобы ее можно было использовать повторно.
    Это невозможно для переменной `i`.
    

(30) Augmented assignment inside comprehension - inner loop
-----------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assignment_expression_cannot_rebind_2.py", line 1
        [i for i in range(5) if (j := 0) for k[j + 1] in range(5)]
                                               ^
    SyntaxError: comprehension inner loop cannot rebind assignment expression target 'j'
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\assignment_expression_cannot_rebind_2.py'
    в указанном ^ месте.
    
    
       1| [i for i in range(5) if (j := 0) for k[j + 1] in range(5)]
                                                 ^

    Вы используете дополненный (моржовый) оператор присваивания `:=` внутри comprehension
    для присвоения значения итерационной переменной `j`.
    Эта переменная предназначена для использования только внутри comprehension.
    Дополненный оператор присваивания обычно используется для присвоения значения переменной, чтобы ее можно было использовать повторно.
    Это невозможно для переменной `j`.
    

(31) def: missing parentheses
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\async_def_missing_parens.py", line 1
        async def name:
                      ^
    SyntaxError: invalid syntax
    
        Вы забыли про скобки?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\async_def_missing_parens.py'
    в указанном ^ месте.
    
    
       1| async def name:
                        ^

    Возможно, вы забыли поставить круглые скобки.
    Возможно, вы хотели написать
    
        async def name():
    

(32) Augmented assignment to literal
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\augmented_assignment_to_literal.py", line 1
        if "word" := True:
           ^^^^^^
    SyntaxError: cannot use assignment expressions with literal
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\augmented_assignment_to_literal.py'
    в указанном ^ месте.
    
    
       1| if "word" := True:
             ^^^^^^

    Вы не можете использовать дополненный оператор присваивания `:=`,
    иногда называемый моржовым оператором, с литералами типа `"word"`.
    Вы можете присваивать объекты только идентификаторам (именам переменных).
    

(33) Walrus/Named assignment depending on Python version
--------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\augmented_assigment_with_true.py", line 4
        (True := 1)
         ^^^^
    SyntaxError: cannot use assignment expressions with True
    
        Вы не можете присвоить значение `True`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\augmented_assigment_with_true.py'
    в указанном ^ месте.
    
    
       4| (True := 1)
           ^^^^

    `True` является константой в Python; вы не можете присвоить ему другое значение.
    
    

(34) Backslash instead of slash
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\backslash_instead_of_slash.py", line 1
        a = 3 \ 4.0
               ^
    SyntaxError: unexpected character after line continuation character
    
        Вы хотели разделить на 4.0?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\backslash_instead_of_slash.py'
    в указанном ^ месте.
    
    
       1| a = 3 \ 4.0
                  ^^^

    Вы используете символ продолжения `\` вне строки
    и за ним следует какой-то другой символ (символы).
    Предполагаю, что вы хотели разделить на число 4.0 
    и написали \ вместо /.

(35) Brackets instead of parentheses
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\bracket_instead_of_paren.py", line 1
        print(sum[i for i in [1, 2, 3] if i%2==0])
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    SyntaxError: invalid syntax. Perhaps you forgot a comma?
    
        Вы что-то пропустили между `sum` и `[`
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\bracket_instead_of_paren.py'
    в указанном ^ месте.
    
    
       1| print(sum[i for i in [1, 2, 3] if i%2==0])
                ^^^^

    Python указывает, что ошибка вызвана `[`, написанным сразу после `sum`.
    Возможно, вы забыли поставить запятую между элементами кортежа, 
    или между аргументами функции, место отмечено ^.
    Возможно, вы хотели вставить оператор типа `+, -, *`
    между `sum` и `[`.
    Следующие строки кода не вызовут `SyntaxError`:
        print(sum, [i for i in [1, 2, 3] if i%2==0])
        print(sum + [i for i in [1, 2, 3] if i%2==0])
        print(sum - [i for i in [1, 2, 3] if i%2==0])
        print(sum * [i for i in [1, 2, 3] if i%2==0])
    Примечание: это только некоторые из возможных вариантов и
    некоторые из них могут вызывать другие типы исключений.
    
    Существует и другая возможность.
    Вы использовали квадратные скобки `[...]` вместо круглых.
    Возможно, вы хотели написать:
    
        print(sum(i for i in [1, 2, 3] if i%2==0))

(36) break outside loop
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\break_outside_loop.py", line 4
        break
        ^^^^^
    SyntaxError: 'break' outside loop
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\break_outside_loop.py'
    в указанном ^ месте.
    
    
       4|     break
              ^^^^^

    Ключевое слово Python `break` можно использовать
    только внутри циклов `for` или `while`.
    

(37) Cannot assign to attribute here.
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_assign_to_attribute_here.py", line 1
        if x.a = 1:
           ^^^
    SyntaxError: cannot assign to attribute here. Maybe you meant '==' instead of '='?
    
        Возможно, вам нужно `==` вместо `=`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\cannot_assign_to_attribute_here.py'
    в указанном ^ месте.
    
    
       1| if x.a = 1:
             ^^^

    Скорее всего, вы использовали оператор присваивания `=`
    вместо оператора равенства `==`.
    Следующее утверждение не будет содержать синтаксической ошибки:
    
        if x.a == 1:
    

(38) Cannot guess the cause
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_guess_the_cause.py", line 1
        SyntaxErrors can be annoying!
                     ^^^
    SyntaxError: invalid syntax
    
        Friendly-traceback не определил причину возникновения этой ошибки.
        
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\cannot_guess_the_cause.py'
    в указанном ^ месте.
    
    
       1| SyntaxErrors can be annoying!
                       ^^^

    В настоящее время я не могу предположить вероятную причину этой ошибки.
    Попробуйте внимательно изучить указанную строку, а также строку
    расположенную непосредственно над ней, и попробуйте определить,не написано ли какое-нибудь слово или
    недостающие символы, такие как (, ), [, ], :, и т.д.
    
    Если только в вашем коде не используются аннотации типов, которые выходят за рамки нашей темы.
    Если вы считаете, что это то, что должно быть обработано
    более корректно, пожалуйста, сообщите об этом случае по адресу
    https://github.com/friendly-traceback/friendly-traceback/issues
    

(39) Cannot use star operator
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_use_star.py", line 3
        *a
        ^^
    SyntaxError: can't use starred expression here
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\cannot_use_star.py'
    в указанном ^ месте.
    
    
       3| *a
          ^^

    Оператор 'звезда' `*` интерпретируется как означающий, что
    распаковка последовательности должна использоваться для присвоения имени
    каждому элементу последовательности, что в данном случае не имеет смысла.
    

(40) Cannot use double star operator
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_use_double_star.py", line 4
        (**k)
         ^^
    SyntaxError: f-string: cannot use double starred expression here
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\cannot_use_double_star.py'
    в указанном ^ месте.
    
    
       4|     print(f"{**k}")
                            ^

    Double star оператор `**`, вероятно, будет интерпретирован как означающий, что используется dict-распаковка,
    что в данном случае недопустимо или не имеет смысла.
    

(41) Missing class name
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\class_missing_name.py", line 1
        class:
             ^
    SyntaxError: invalid syntax
    
        Классу необходимо задать имя.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\class_missing_name.py'
    в указанном ^ месте.
    
    
       1| class:
               ^

    Утверждение `class` требует указания имени:
    
        class SomeName:
            ...
    
    

(42) Missing () for tuples in comprehension
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\comprehension_missing_tuple_paren.py", line 1
        x = [i, i**2 for i in range(10)]
             ^^^^^^^
    SyntaxError: did you forget parentheses around the comprehension target?
    
        Вы забыли про скобки?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\comprehension_missing_tuple_paren.py'
    в указанном ^ месте.
    
    
       1| x = [i, i**2 for i in range(10)]
               ^^^^^^^

    Предполагаю, что вы писали comprehension или генераторное выражение,
    но забыли поставить круглые скобки вокруг кортежей.
    В качестве примера, вместо того, чтобы написать
        [i, i**2 for i in range(10)]
    вам нужно написать
        [(i, i**2) for i in range(10)]
    

(43) Comprehension with condition (no else)
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\comprehension_with_condition_no_else.py", line 1
        a = [f(x) if condition for x in sequence]
             ^^^^^^^^^^^^^^^^^
    SyntaxError: expected 'else' after 'if' expression
    
        Вы забыли добавить `else`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\comprehension_with_condition_no_else.py'
    в указанном ^ месте.
    
    
       1| a = [f(x) if condition for x in sequence]
               ^^^^^^^^^^^^^^^^^

    После выражения `if` ожидалось появление выражения `else some_value`.
    

(44) Comprehension with condition (with else)
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\comprehension_with_condition_with_else.py", line 1
        a = [f(x) for x in sequence if condition else other]
                                                 ^^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\comprehension_with_condition_with_else.py'
    в указанном ^ месте.
    
    
       1| a = [f(x) for x in sequence if condition else other]
                                                   ^^^^

    Предполагаю, что вы писали comprehension или генераторное выражение
    и использовали неправильный порядок для условия.
    Правильный порядок зависит от наличия или отсутствия условия `else`.
    Например, правильным порядком для представления списков с
    условием может быть либо:
    
        [f(x) if condition else other for x in sequence] # 'if' перед 'for'
    
    либо, если нет `else`:
    
        [f(x) for x in sequence if condition] # 'if' после 'for'.
    
    

(45) continue outside loop
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\continue_outside_loop.py", line 4
        continue
        ^^^^^^^^
    SyntaxError: 'continue' not properly in loop
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\continue_outside_loop.py'
    в указанном ^ месте.
    
    
       4|     continue
              ^^^^^^^^

    Ключевое слово Python `continue` можно использовать только
    внутри циклов `for` или `while`.
    

(46) Copy/paste from interpreter
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\copy_pasted_code.py", line 2
        >>> print("Hello World!")
        ^^
    SyntaxError: invalid syntax
    
        Вы использовали copy-paste?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\copy_pasted_code.py'
    в указанном ^ месте.
    
    
       2| >>> print("Hello World!")
          ^^^

    Похоже, что вы скопипастили вывод интерпретатора.
    Приглашение интерпретатора '>>>', не должно быть включено в ваш код.
    

(47) Copy/paste from interpreter - 2
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\copy_pasted_code_2.py", line 2
        ... print("Hello World!")
            ^^^^^
    SyntaxError: invalid syntax
    
        Вы использовали copy-paste?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\copy_pasted_code_2.py'
    в указанном ^ месте.
    
    
       2| ... print("Hello World!")
          ^^^

    Похоже, что вы скопипастили вывод интерпретатора.
    Вывод интерпретатора '...' не должен быть включен в ваш код.
    

(48) def: positional arg after kwargs
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_arg_after_kwarg.py", line 1
        def test(a, **kwargs, b):
                              ^
    SyntaxError: invalid syntax
    
        Позиционные аргументы должны идти перед ключевыми аргументами.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_arg_after_kwarg.py'
    в указанном ^ месте.
    
    
       1| def test(a, **kwargs, b):
                                ^

    Позиционные аргументы должны идти перед ключевыми аргументами.
    `b` -- это позиционный аргумент, который находится после одного или
    нескольких ключевых аргументов в определении вашей функции.
    

(49) def: named arguments must follow bare *
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_bare_star_arg.py", line 4
        def f(*):
              ^
    SyntaxError: named arguments must follow bare *
    
        Вы забыли что-то после `*`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_bare_star_arg.py'
    в указанном ^ месте.
    
    
       4| def f(*):
                ^

    Если предположить, что вы определяете функцию, вам нужно
    заменить `*` на `*arguments` или на
    `*, named_argument=value`.
    

(50) def: misused as code block
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_code_block.py", line 3
        def :
            ^
    SyntaxError: invalid syntax
    
        Функция нуждается в имени.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_code_block.py'
    в указанном ^ месте.
    
    
       3| def :
              ^

    Вы пытались определить функцию и использовали неправильный синтаксис.
    Правильный синтаксис следующий:
    
        def name ( ... ):
    

(51) def: misused as code block - 2
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_code_block_2.py", line 2
        def :
            ^
    SyntaxError: invalid syntax
    
        Функции и методы нуждаются в именах.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_code_block_2.py'
    в указанном ^ месте.
    
    
       2|     def :
                  ^

    Вы пытались определить функцию или метод и использовали неправильный синтаксис.
    Правильный синтаксис следующий:
    
        def name ( ... ):
    

(52) Dotted name as function argument
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dotted_argument.py", line 3
        def test(x.y):
                  ^
    SyntaxError: invalid syntax
    
        Вы хотели поставить запятую?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_dotted_argument.py'
    в указанном ^ месте.
    
    
       3| def test(x.y):
                    ^

    Нельзя использовать точечные имена в качестве аргументов функций.
    Возможно, вы хотели поставить запятую.
    

(53) Dotted name as function argument
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dotted_argument_2.py", line 2
        def test(x., y):
                  ^
    SyntaxError: invalid syntax
    
        Нельзя использовать точечные имена в качестве аргументов функций.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_dotted_argument_2.py'
    в указанном ^ месте.
    
    
       2| def test(x., y):
                    ^

    Нельзя использовать точечные имена в качестве аргументов функций.
    

(54) Dotted function name
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dotted_function_name.py", line 3
        def test.x():
                ^
    SyntaxError: invalid syntax
    
        В именах функций нельзя использовать точки.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_dotted_function_name.py'
    в указанном ^ месте.
    
    
       3| def test.x():
                  ^

    В именах функций нельзя использовать точки.
    

(55) def: dict as argument
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dict_as_arg.py", line 1
        def test({'a': 1}, y):  # dict as first argument
                 ^
    SyntaxError: invalid syntax
    
        В качестве аргументов функции нельзя использовать явные словари или множества.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_dict_as_arg.py'
    в указанном ^ месте.
    
    
       1| def test({'a': 1}, y):  # dict as first argument
                   ^

    В качестве аргументов функции нельзя использовать явные словари или множества.
    В качестве аргументов функций можно использовать только идентификаторы (имена переменных).
    

(56) def: arguments must be unique in function definition
---------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_duplicate_arg.py", line 4
        def f(aa=1, aa=2):
                    ^^
    SyntaxError: duplicate argument 'aa' in function definition
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_duplicate_arg.py'
    в указанном ^ месте.
    
    
       4| def f(aa=1, aa=2):
                ^^    ^^

    Вы определили функцию, в которой дублируется аргумент
    
        `aa`.
    Каждый аргумент должен появляться только один раз в определении функции.
    

(57) def: semicolon after colon
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_extra_semi_colon.py", line 1
        def test():;
                   ^
    SyntaxError: invalid syntax
    
        После двоеточия вы написали что-то по ошибке?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_extra_semi_colon.py'
    в указанном ^ месте.
    
    
       1| def test():;
                     ^

    Оператор определения функции должен заканчиваться двоеточием.
    Блок кода должен идти после двоеточия.
    Удаление `;` может решить проблему.
    

(58) def: extra comma
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_extra_comma.py", line 1
        def test(a,,b):
                   ^
    SyntaxError: invalid syntax
    
        Вы хотели написать `,`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_extra_comma.py'
    в указанном ^ месте.
    
    
       1| def test(a,,b):
                     ^

    Предполагаю, что вы допустили опечатку и добавили `,` по ошибке.
    Следующий оператор не содержит синтаксических ошибок:
    
        def test(a,b):

(59) def: unspecified keywords before /
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_1.py", line 1
        def test(a, **kwargs, /):
                              ^
    SyntaxError: invalid syntax
    
        Ключевые аргументы должны идти после символа `/`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_forward_slash_1.py'
    в указанном ^ месте.
    
    
       1| def test(a, **kwargs, /):
                                ^

    `/` указывает, что предыдущие аргументы в определении функции
    являются позиционными аргументами.
    У вас есть неопределенные аргументы в виде ключевых слов, которые идут
    перед символом `/`.
    

(60) def: / before star
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_2.py", line 1
        def test(a, *, b, /):
                          ^
    SyntaxError: invalid syntax
    
        `*` должен идти после `/` в определении функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_forward_slash_2.py'
    в указанном ^ месте.
    
    
       1| def test(a, *, b, /):
                            ^

    `/` указывает, что предыдущие аргументы в определении функции
    являются позиционными аргументами.
    `*` указывает, что аргументы,
    которые следуют за ним, должны быть ключевыми.
    Когда они используются вместе, `/` должно идти перед `*`.
    

(61) def: / before star arg
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_3.py", line 1
        def test(a, *arg, /):
                          ^
    SyntaxError: invalid syntax
    
        `*arg` должно идти после `/` в определении функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_forward_slash_3.py'
    в указанном ^ месте.
    
    
       1| def test(a, *arg, /):
                            ^

    `/` указывает, что предыдущие аргументы в определении функции
    являются позиционными аргументами.
    `*arg` должно идти после `/` в определении функции.
    

(62) def: / used twice
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_4.py", line 1
        def test(a, /, b, /):
                          ^
    SyntaxError: invalid syntax
    
        Вы можете использовать `/` только один раз в определении функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_forward_slash_4.py'
    в указанном ^ месте.
    
    
       1| def test(a, /, b, /):
                            ^

    Вы можете использовать `/` только один раз в определении функции.
    

(63) def: non-identifier as a function name
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_function_name_invalid.py", line 3
        def 2be():
            ^
    SyntaxError: invalid decimal literal
    
        Это недопустимое имя функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_function_name_invalid.py'
    в указанном ^ месте.
    
    
       3| def 2be():
              ^^

    Python сообщает, что вы записали недопустимое число.
    Однако я думаю, что проблема может заключаться в следующем.
    
    Имя функции должно быть допустимым идентификатором Python,
    то есть именем, которое начинается с буквы или символа подчеркивания, `_`,
    и которое содержит только буквы, цифры или символ подчеркивания.
    

(64) def: using a string as a function name
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_function_name_string.py", line 3
        def "function"():
            ^^^^^^^^^^
    SyntaxError: invalid syntax
    
        Имя функции должно быть допустимым идентификатором Python,
        то есть именем, которое начинается с буквы или символа подчеркивания, `_`,
        и которое содержит только буквы, цифры или символ подчеркивания.
        Вы попытались использовать строку в качестве имени функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_function_name_string.py'
    в указанном ^ месте.
    
    
       3| def "function"():
              ^^^^^^^^^^

    Имя функции должно быть допустимым идентификатором Python,
    то есть именем, которое начинается с буквы или символа подчеркивания, `_`,
    и которое содержит только буквы, цифры или символ подчеркивания.
    Вы попытались использовать строку в качестве имени функции.
    

(65) def: keyword cannot be argument in def - 1
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_1.py", line 5
        def f(None=1):
              ^^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_keyword_as_arg_1.py'
    в указанном ^ месте.
    
    
       5| def f(None=1):
                ^^^^

    Предполагаю, что вы пытались использовать ключевое слово Python
    `None` в качестве аргумента в определении функции
    где ожидался идентификатор (имя переменной).
    

(66) def: keyword cannot be argument in def - 2
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_2.py", line 5
        def f(x, True):
                 ^^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_keyword_as_arg_2.py'
    в указанном ^ месте.
    
    
       5| def f(x, True):
                   ^^^^

    Предполагаю, что вы пытались использовать ключевое слово Python
    `True` в качестве аргумента в определении функции
    где ожидался идентификатор (имя переменной).
    

(67) def: keyword cannot be argument in def - 3
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_3.py", line 5
        def f(*None):
               ^^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_keyword_as_arg_3.py'
    в указанном ^ месте.
    
    
       5| def f(*None):
                 ^^^^

    Предполагаю, что вы пытались использовать ключевое слово Python
    `None` в качестве аргумента в определении функции
    где ожидался идентификатор (имя переменной).
    

(68) def: keyword cannot be argument in def - 4
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_4.py", line 5
        def f(**None):
                ^^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_keyword_as_arg_4.py'
    в указанном ^ месте.
    
    
       5| def f(**None):
                  ^^^^

    Предполагаю, что вы пытались использовать ключевое слово Python
    `None` в качестве аргумента в определении функции
    где ожидался идентификатор (имя переменной).
    

(69) def: Python keyword as function name
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_name.py", line 3
        def pass():
            ^^^^
    SyntaxError: invalid syntax
    
        Вы не можете использовать ключевое слово Python в качестве имени функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_keyword_as_name.py'
    в указанном ^ месте.
    
    
       3| def pass():
              ^^^^

    Вы попытались использовать ключевое слово Python `pass`
    в качестве имени функции.
    
    В дальнейшем в вашем коде будет больше синтаксических ошибок.
    

(70) def: list as argument - 1
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_list_as_arg_1.py", line 1
        def test([x], y):  # list as first argument
                 ^
    SyntaxError: invalid syntax
    
        Вы не можете иcпользовать явные списки в качестве аргументов функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_list_as_arg_1.py'
    в указанном ^ месте.
    
    
       1| def test([x], y):  # list as first argument
                   ^

    Вы не можете иcпользовать явные списки в качестве аргументов функции.
    В качестве аргументов функций можно использовать только идентификаторы (имена переменных).
    

(71) def: list as argument - 2
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_list_as_arg_2.py", line 1
        def test(x, [y]):  # list as second argument, after comma
                    ^
    SyntaxError: invalid syntax
    
        Вы не можете иcпользовать явные списки в качестве аргументов функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_list_as_arg_2.py'
    в указанном ^ месте.
    
    
       1| def test(x, [y]):  # list as second argument, after comma
                      ^

    Вы не можете иcпользовать явные списки в качестве аргументов функции.
    В качестве аргументов функций можно использовать только идентификаторы (имена переменных).
    

(72) def: missing colon
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_colon.py", line 1
        def test()
                  ^
    SyntaxError: expected ':'
    
        Вы забыли двоеточие `:`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_missing_colon.py'
    в указанном ^ месте.
    
    
       1| def test()
                    ^

    Вы написали утверждение, начинающееся с
    `def`, но забыли добавить двоеточие `:` в конце.
    

(73) def: missing comma between function args
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_comma.py", line 4
        def a(b, c d):
                   ^
    SyntaxError: invalid syntax
    
        Вы забыли поставить запятую?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_missing_comma.py'
    в указанном ^ месте.
    
    
       4| def a(b, c d):
                   ^^^

    Python указывает, что ошибка вызвана `d`, написанным сразу после `c`.
    Возможно, вы забыли поставить запятую между элементами кортежа, 
    или между аргументами функции, место отмечено ^.
    Возможно, вы имели в виду `
    
        def a(b, c, d):
                  ^
    
    `

(74) def: missing parentheses
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_parens.py", line 3
        def name:
                ^
    SyntaxError: invalid syntax
    
        Вы забыли про скобки?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_missing_parens.py'
    в указанном ^ месте.
    
    
       3| def name:
                  ^

    Возможно, вы забыли поставить круглые скобки.
    Возможно, вы хотели написать
    
        def name():
    

(75) def: missing parentheses around arguments
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_parens_2.py", line 2
        def name a, b:
                 ^
    SyntaxError: invalid syntax
    
        Вы забыли про скобки?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_missing_parens_2.py'
    в указанном ^ месте.
    
    
       2| def name a, b:
                   ^

    Возможно, вы забыли поставить круглые скобки.
    Возможно, вы хотели написать
    
        def name (a, b):
    

(76) def: missing function name
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_name.py", line 3
        def ( arg )  :
            ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_missing_name.py'
    в указанном ^ месте.
    
    
       3| def ( arg )  :
              ^

    Вы забыли назвать свою функцию.
    Правильный синтаксис следующий:
    
        def name ( ... ):
    

(77) def: name is parameter and global
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_name_is_parameter_and_global.py", line 6
        global x
        ^^^^^^^^
    SyntaxError: name 'x' is parameter and global
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_name_is_parameter_and_global.py'
    в указанном ^ месте.
    
    
       6|     global x
              ^^^^^^^^

    Вы включаете утверждение
    
            global x
    
    
    указывая, что `x` является переменной, определенной вне функции.
    Вы также используете то же самое `x`
    в качестве аргумента для этой функции.
    тем самым указывая, что это должна быть переменная, которая видна только
    внутри этой функции, что противоположно тому, что подразумевает `global`.
    

(78) def: non-default argument follows default argument
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_non_default_after_default.py", line 5
        def test(a=1, b):
                      ^
    SyntaxError: non-default argument follows default argument
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_non_default_after_default.py'
    в указанном ^ месте.
    
    
       5| def test(a=1, b):
                        ^

    В Python вы можете определять функции только с позиционными аргументами
    
        def test(a, b, c): ...
    
    или только ключевыми аргументами
    
        def test(a=1, b=2, c=3): ...
    
    или их комбинацией
    
        def test(a, b, c=3): ...
    
    но при этом аргументы с ключевыми словами передаются после всех позиционных аргументов.
    Python говорит, что вы передали позиционные аргументы после ключевых.
    

(79) Single number used as arg in function def
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_number_as_arg.py", line 1
        def f(1):
              ^
    SyntaxError: invalid syntax
    
        Вы не можете использовать числа в качестве аргументов функций.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_number_as_arg.py'
    в указанном ^ месте.
    
    
       1| def f(1):
                ^

    Вы использовали число в качестве аргумента при определении функции.
    В качестве аргументов функции можно использовать только идентификаторы (имена переменных).
    

(80) Operator after ``**``
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_after_2star.py", line 1
        def test(**):
                   ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_operator_after_2star.py'
    в указанном ^ месте.
    
    
       1| def test(**):
                     ^

    За оператором `**` должен следовать идентификатор (имя переменной).
    

(81) def: operator instead of comma
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_instead_of_comma.py", line 1
        def test(a + b):
                   ^
    SyntaxError: invalid syntax
    
        Вы хотели поставить запятую?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_operator_instead_of_comma.py'
    в указанном ^ месте.
    
    
       1| def test(a + b):
                     ^

    Вы не можете использовать операторы в качестве аргументов функции.
    Предполагаю, что вы допустили опечатку и написали `+` вместо запятой.
    Следующее утверждение не содержит синтаксической ошибки:
    
        def test(a , b):

(82) def: operator instead of equal
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_instead_of_equal.py", line 1
        def test(a, b=3, c+None):
                          ^
    SyntaxError: invalid syntax
    
        Вы хотели поставить знак равенства?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_operator_instead_of_equal.py'
    в указанном ^ месте.
    
    
       1| def test(a, b=3, c+None):
                            ^

    Вы не можете использовать операторы в качестве аргументов функции.
    Предполагаю, что вы допустили опечатку и написали `+`
    вместо знака равенства.
    Следующее утверждение не содержит синтаксической ошибки:
    
        def test(a, b=3, c=None):

(83) def: operator instead of name
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_instead_of_name.py", line 1
        def test(a, +, b):
                    ^
    SyntaxError: invalid syntax
    
        Вы не можете использовать `+` в качестве аргумента.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_operator_instead_of_name.py'
    в указанном ^ месте.
    
    
       1| def test(a, +, b):
                      ^

    Предполагаю, что вы допустили опечатку и по ошибке написали `+`.
    Если вы замените его на уникальное имя переменной,
    результат не будет содержать синтаксической ошибки.
    

(84) def: positional argument follows keyword argument
------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_positional_after_keyword_arg.py", line 5
        test(a=1, b)
                   ^
    SyntaxError: positional argument follows keyword argument
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_positional_after_keyword_arg.py'
    в указанном ^ месте.
    
    
       5| test(a=1, b)
                     ^

    В Python вы можете вызывать функции только с позиционными аргументами
    
        test(1, 2, 3)
    
    или только ключевыми аргументами
    
        test(a=1, b=2, c=3)
    
    или их комбинацией
    
        test(1, 2, c=3)
    
    но при этом ключевые аргументы идут после всех позиционных аргументов.
    Согласно Python, вы передали позиционные аргументы после ключевых.
    

(85) def: semicolon instead of colon
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_semi_colon_instead_of_colon.py", line 1
        def test();
                  ^
    SyntaxError: expected ':'
    
        Вы забыли про двоеточие?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_semi_colon_instead_of_colon.py'
    в указанном ^ месте.
    
    
       1| def test();
                    ^

    В указанном месте Python ожидал увидеть двоеточие.
    Вы поставили `;` вместо двоеточия.
    

(86) def: set as argument
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_set_as_arg.py", line 1
        def test(y, {'a', 'b'}):  # set as second argument, after comma
                    ^
    SyntaxError: invalid syntax
    
        В качестве аргументов функции нельзя использовать явные словари или множества.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_set_as_arg.py'
    в указанном ^ месте.
    
    
       1| def test(y, {'a', 'b'}):  # set as second argument, after comma
                      ^

    В качестве аргументов функции нельзя использовать явные словари или множества.
    В качестве аргументов функций можно использовать только идентификаторы (имена переменных).
    

(87) def: ``*arg`` before /
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_arg_before_slash.py", line 1
        def test(a, *arg, /):
                          ^
    SyntaxError: invalid syntax
    
        `*arg` должно идти после `/` в определении функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_star_arg_before_slash.py'
    в указанном ^ месте.
    
    
       1| def test(a, *arg, /):
                            ^

    `/` указывает, что предыдущие аргументы в определении функции
    являются позиционными аргументами.
    `*arg` должно идти после `/` в определении функции.
    

(88) def: ``*`` used twice
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_used_only_once.py", line 1
        def test(a, *arg, *, b=1):
                          ^
    SyntaxError: invalid syntax
    
        Вы можете использовать `*` только один раз в определении функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_star_used_only_once.py'
    в указанном ^ месте.
    
    
       1| def test(a, *arg, *, b=1):
                            ^

    Вы можете использовать `*` только один раз в определении функции.
    Он должен использоваться либо сам по себе, `*`,
    либо в виде `*arg`, но не в обоих случаях.
    

(89) def: ``*`` used twice
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_used_only_once_1.py", line 1
        def test(a, *, *):
                       ^
    SyntaxError: invalid syntax
    
        Вы можете использовать `*` только один раз в определении функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_star_used_only_once_1.py'
    в указанном ^ месте.
    
    
       1| def test(a, *, *):
                         ^

    Вы можете использовать `*` только один раз в определении функции.
    

(90) def: ``*`` used twice
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_used_only_once_2.py", line 1
        def test(a, *arg, *other):
                          ^
    SyntaxError: invalid syntax
    
        Вы можете использовать `*` только один раз в определении функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_star_used_only_once_2.py'
    в указанном ^ месте.
    
    
       1| def test(a, *arg, *other):
                            ^

    Вы можете использовать `*` только один раз в определении функции.
    Вы использовали его дважды, с `*arg` и `*other`.
    

(91) def: ``*`` after ``**``
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_after_2star.py", line 1
        def test(**kw, *arg):
                       ^
    SyntaxError: invalid syntax
    
        Вы можете использовать `*` только один раз в определении функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_star_after_2star.py'
    в указанном ^ месте.
    
    
       1| def test(**kw, *arg):
                         ^

    `*arg` должен идти перед `**kw`.
    

(92) def: ``*`` after ``**``
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_after_2star_2.py", line 1
        def test(**kw, *):
                       ^
    SyntaxError: invalid syntax
    
        Вы можете использовать `*` только один раз в определении функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_star_after_2star_2.py'
    в указанном ^ месте.
    
    
       1| def test(**kw, *):
                         ^

    `**kw` должны идти после оператора `*`.
    

(93) Single string used as arg in function def
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_string_as_arg.py", line 1
        def f("1"):
              ^^^
    SyntaxError: invalid syntax
    
        Вы не можете использовать строки в качестве аргументов функций.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_string_as_arg.py'
    в указанном ^ месте.
    
    
       1| def f("1"):
                ^^^

    Вы использовали строку в качестве аргумента при определении функции.
    В качестве аргументов функции можно использовать только идентификаторы (имена переменных).
    

(94) def: tuple as function argument
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_tuple_as_arg_1.py", line 1
        def test((a, b), c):
                 ^
    SyntaxError: invalid syntax
    
        Вы не можете иметь явные кортежи в качестве аргументов функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_tuple_as_arg_1.py'
    в указанном ^ месте.
    
    
       1| def test((a, b), c):
                   ^

    Вы не можете иметь явные кортежи в качестве аргументов функции.
    В качестве аргументов функции можно использовать только идентификаторы (имена переменных).
    Присвойте любой кортеж параметру и распакуйте его в теле функции.
    

(95) def: tuple as function argument - 2
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_tuple_as_arg_2.py", line 1
        def test(a, (b, c)):
                    ^
    SyntaxError: invalid syntax
    
        Вы не можете иметь явные кортежи в качестве аргументов функции.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\def_tuple_as_arg_2.py'
    в указанном ^ месте.
    
    
       1| def test(a, (b, c)):
                      ^

    Вы не можете иметь явные кортежи в качестве аргументов функции.
    В качестве аргументов функции можно использовать только идентификаторы (имена переменных).
    Присвойте любой кортеж параметру и распакуйте его в теле функции.
    

(96) Deleting star expression - 1
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\del_paren_star_1.py", line 1
        del (*x)
             ^^
    SyntaxError: cannot use starred expression here
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\del_paren_star_1.py'
    в указанном ^ месте.
    
    
       1| del (*x)
               ^^

    Оператор 'звезда' `*` интерпретируется как означающий, что
    распаковка последовательности должна использоваться для присвоения имени
    каждому элементу последовательности, что в данном случае не имеет смысла.
    Вы можете удалять только имена объектов или элементы в изменяемых контейнерах, таких как `list`, `set` или `dict`.
    

(97) Deleting star expression - 2
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\del_paren_star_2.py", line 1
        del (*x,)
             ^^
    SyntaxError: cannot delete starred
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\del_paren_star_2.py'
    в указанном ^ месте.
    
    
       1| del (*x,)
               ^^

    Оператор 'звезда' `*` интерпретируется как означающий, что
    распаковка последовательности должна использоваться для присвоения имени
    каждому элементу последовательности, что в данном случае не имеет смысла.
    Вы можете удалять только имена объектов или элементы в изменяемых контейнерах, таких как `list`, `set` или `dict`.
    

(98) Cannot delete a constant
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_constant_keyword.py", line 1
        del True
            ^^^^
    SyntaxError: cannot delete True
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\delete_constant_keyword.py'
    в указанном ^ месте.
    
    
       1| del True
              ^^^^

    Вы не можете удалить константу `True`.
    Вы можете удалять только имена объектов или элементы в изменяемых контейнерах, таких как `list`, `set` или `dict`.
    

(99) Cannot delete expression
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_expression.py", line 1
        del a.b.c[0] + 2
            ^^^^^^^^^^^^
    SyntaxError: cannot delete expression
    
        Вы можете удалять только имена объектов или элементы в изменяемых контейнерах, таких как `list`, `set` или `dict`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\delete_expression.py'
    в указанном ^ месте.
    
    
       1| del a.b.c[0] + 2
              ^^^^^^^^^^^^

    Вы не можете удалить выражение `a.b.c[0] + 2`.
    Вы можете удалять только имена объектов или элементы в изменяемых контейнерах, таких как `list`, `set` или `dict`.
    

(100) Cannot delete function call
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_function_call.py", line 5
        del f(a)
            ^^^^
    SyntaxError: cannot delete function call
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\delete_function_call.py'
    в указанном ^ месте.
    
    
       5| del f(a)
              ^^^^

    Вы попытались удалить вызов функции
    
        del f(a)
    вместо того, чтобы удалить имя функции
    
        del f
    

(101) Cannot delete named expression
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_named_expression.py", line 1
        del (a := 5)
             ^^^^^^
    SyntaxError: cannot delete named expression
    
        Вы можете удалять только имена объектов или элементы в изменяемых контейнерах, таких как `list`, `set` или `dict`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\delete_named_expression.py'
    в указанном ^ месте.
    
    
       1| del (a := 5)
               ^^^^^^

    Вы не можете удалить именованное выражение `(a := 5)`.
    Вы можете удалять только имена объектов или элементы в изменяемых контейнерах, таких как `list`, `set` или `dict`.
    

(102) Delete only names or items
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_names_or_items.py", line 1
        del a += b
              ^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\delete_names_or_items.py'
    в указанном ^ месте.
    
    
       1| del a += b
                ^^

    Вы можете удалять только имена объектов или элементы в изменяемых контейнерах, таких как `list`, `set` или `dict`.
    

(103) Deleting string literal
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_string_literal.py", line 1
        del "Hello world!"
            ^^^^^^^^^^^^^^
    SyntaxError: cannot delete literal
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\delete_string_literal.py'
    в указанном ^ месте.
    
    
       1| del "Hello world!"
              ^^^^^^^^^^^^^^

    Вы не можете удалить литерал `"Hello world!"`.
    Вы можете удалять только имена объектов или элементы в изменяемых контейнерах, таких как `list`, `set` или `dict`.
    

(104) Value missing in dict - 1
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_1.py", line 1
        a = {1:2, 3}
                  ^
    SyntaxError: ':' expected after dictionary key
    
        Вы забыли записать в словарь значение ?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\dict_value_missing_1.py'
    в указанном ^ месте.
    
    
       1| a = {1:2, 3}
                    ^

    Похоже, что ошибка возникла, когда вы добавляли `key` в словарь Python.
    Возможно, вы записали `key` без соответствующего `value`.
    

(105) Value missing in dict - 2
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_2.py", line 2
        a = {1:2, 3:}
                   ^
    SyntaxError: expression expected after dictionary key and ':'
    
        Вы забыли записать в словарь значение ?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\dict_value_missing_2.py'
    в указанном ^ месте.
    
    
       2| a = {1:2, 3:}
                     ^

    Похоже, что ошибка возникла, когда вы писали в словарь Python.
    Возможно, вы забыли написать значение после двоеточия.
    

(106) Value missing in dict - 3
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_3.py", line 3
        a = {1:2, 3, 4:5}
                  ^
    SyntaxError: ':' expected after dictionary key
    
        Вы забыли записать в словарь значение ?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\dict_value_missing_3.py'
    в указанном ^ месте.
    
    
       3| a = {1:2, 3, 4:5}
                    ^

    Похоже, что ошибка возникла, когда вы добавляли `key` в словарь Python.
    Возможно, вы записали `key` без соответствующего `value`.
    

(107) Value missing in dict - 4
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_4.py", line 4
        a = {1:2, 3:, 4:5}
                   ^
    SyntaxError: expression expected after dictionary key and ':'
    
        Вы забыли записать в словарь значение ?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\dict_value_missing_4.py'
    в указанном ^ месте.
    
    
       4| a = {1:2, 3:, 4:5}
                     ^

    Похоже, что ошибка возникла, когда вы писали в словарь Python.
    Возможно, вы забыли написать значение после двоеточия.
    

(108) Different operators in a row
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\different_operators_in_a_row.py", line 1
        3 */ 4
           ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\different_operators_in_a_row.py'
    в указанном ^ месте.
    
    
       1| 3 */ 4
            ^^

    Так нельзя: два оператора, `*` и `/` следуют друг за другом.
    Возможно, вы написали один из них по ошибке
    или забыли поместить что-то между ними.
    

(109) Dot followed by parenthesis
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dot_before_paren.py", line 3
        print(len.('hello'))
                  ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\dot_before_paren.py'
    в указанном ^ месте.
    
    
       3| print(len.('hello'))
                    ^

    За точкой `.` не может следовать `(`.
    Возможно, вам следует заменить точку запятой.
    

(110) Extra token
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\duplicate_token.py", line 1
        print(1 , , 2)
                  ^
    SyntaxError: invalid syntax
    
        Вы по ошибке написали `,` дважды?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\duplicate_token.py'
    в указанном ^ месте.
    
    
       1| print(1 , , 2)
                    ^

    Предполагаю, что вы по ошибке написали `,` два раза подряд.
    Если это так, вам нужно удалить второй.
    

(111) elif with no matching if
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\elif_not_matching_if.py", line 3
        elif True:
        ^^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\elif_not_matching_if.py'
    в указанном ^ месте.
    
    
       3|    elif True:
             ^^^^

    Ключевое слово `elif` не начинает блок кода, который соответствует блоку `if`.
    Возможно, потому что `elif` имеет неправильный отступ.
    

(112) Ellipsis written with extra dot
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\ellipsis_extra_dot.py", line 2
        ....
            ^
    SyntaxError: invalid syntax
    
        Вы хотели написать `...`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\ellipsis_extra_dot.py'
    в указанном ^ месте.
    
    
       2|     ....
                 ^

    It looks like you meant to write `...` but added an extra `.` by mistake.
    

(113) else with no matching statement
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\else_no_matching_statement.py", line 3
        else:
        ^^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\else_no_matching_statement.py'
    в указанном ^ месте.
    
    
       3|    else:
             ^^^^

    Ключевое слово `else` не начинает соответствующий блок кода.
    Возможно, потому что `else` имеет неправильный отступ.
    

(114) Write elif, not else if
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\else_if_instead_of_elif.py", line 5
        else if True:
             ^^
    SyntaxError: expected ':'
    
        Возможно, вы хотели написать `elif`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\else_if_instead_of_elif.py'
    в указанном ^ месте.
    
    
       5| else if True:
          ^^^^^^^

    Python сообщил нам, что ожидает двоеточие в указанном месте.
    Однако добавление двоеточия или замена чего-то другого на двоеточие
    не устранит проблему.
    Скорее всего, вы хотели использовать ключевое слово Python `elif`,
    но вместо него написали `else if`.
    
    

(115) Write elif, not elseif
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\elseif_instead_of_elif.py", line 5
        elseif True:
               ^^^^
    SyntaxError: invalid syntax
    
        Возможно, вы хотели написать `elif`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\elseif_instead_of_elif.py'
    в указанном ^ месте.
    
    
       5| elseif True:
          ^^^^^^

    Скорее всего, вы хотели использовать ключевое слово Python `elif`,
    но вместо него написали `elseif`.
    
    

(116) EOL while scanning string literal
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\eol_string_literal.py", line 3
        alphabet = 'abc
                   ^
    SyntaxError: unterminated string literal (detected at line 3)
    
        Вы забыли завершающие кавычки?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\eol_string_literal.py'
    в указанном ^ месте.
    
    
       3| alphabet = 'abc
                     ^

    Вы начали писать строку с одинарной или двойной кавычки,
    но так и не закрыли их.
    

(117) Used equal sign instead of colon
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\equal_sign_instead_of_colon.py", line 4
        ages = {'Alice'=22, 'Bob'=24}
                ^^^^^^^
    SyntaxError: cannot assign to literal here. Maybe you meant '==' instead of '='?
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\equal_sign_instead_of_colon.py'
    в указанном ^ месте.
    
    
       4| ages = {'Alice'=22, 'Bob'=24}
                  ^^^^^^^

    Вы написали выражение типа
    
        'Alice' = variable_name
    где `'Alice'`, слева от знака равенства,
    является или включает в себя реальный объект типа `str`
    а не просто имя переменной.
    
    Вы можете присваивать объекты только идентификаторам (именам переменных)
    
    It is possible that you used an equal sign `=` instead of a colon `:`
    to assign values to keys in a dict.
    

(118) Parens around multiple exceptions
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\except_multiple_exceptions.py", line 3
        except NameError, ValueError as err:
               ^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    SyntaxError: multiple exception types must be parenthesized
    
        Вы забыли про скобки?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\except_multiple_exceptions.py'
    в указанном ^ месте.
    
    
       3| except NameError, ValueError as err:
                 ^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Предполагаю, что вы хотели использовать оператор `except`
    с несколькими типами исключений. Если это так, то вы должны
    окружить их круглыми скобками.
    
    

(119) Extra token
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\extra_token.py", line 1
        print(1 / 2) ==
                       ^
    SyntaxError: invalid syntax
    
        Вы написали `==` по ошибке?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\extra_token.py'
    в указанном ^ месте.
    
    
       1| print(1 / 2) ==
                       ^^

    Предполагаю, что вы по ошибке написали `==`.
    Удалите его и напишите `print(1 / 2)`, это поможет устранить ошибку.
    

(120) Binary f-string not allowed
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_binary.py", line 1
        greet = bf"Hello {name}"
                  ^^^^^^^^^^^^^^
    SyntaxError: invalid syntax
    
        `bf` -- недопустимый префикс.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\f_string_binary.py'
    в указанном ^ месте.
    
    
       1| greet = bf"Hello {name}"
                    ^^^^^^^^^^^^^^

    Предполагаю, что вы хотели получить binary f-строку, это недопустимо.
    

(121) f-string: closing } not allowed
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_curly_not_allowed.py", line 1
        f"ab}"
              ^
    SyntaxError: f-string: single '}' is not allowed
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\f_string_curly_not_allowed.py'
    в указанном ^ месте.
    
    
       1| f"ab}"
          ^^^^^^

    Вы написали f-строку, в которой есть непарная `}`.
    Если вы хотите вывести одну `}`, вам нужно написать `}}` в f-строке;
    в противном случае нужно добавить открывающую `{`.
    

(122) f-string: missing closing }
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_expected_curly.py", line 1
        f"{ab"
              ^
    SyntaxError: f-string: expecting '}'
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\f_string_expected_curly.py'
    в указанном ^ месте.
    
    
       1| f"{ab"
          ^^^^^^

    Вы написали f-строку, в которой есть непарная `}`.
    Если вы хотите вывести одну `}`, вам нужно написать `}}` в f-строке;
    в противном случае нужно добавить открывающую `{`.
    

(123) f-string: unterminated string
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_unterminated.py", line 4
        print(f"Bob is {age['Bob]} years old.")
                                              ^
    SyntaxError: f-string: unterminated string
    
        Возможно, вы забыли закрыть кавычки.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\f_string_unterminated.py'
    в указанном ^ месте.
    
    
       4| print(f"Bob is {age['Bob]} years old.")
                                                ^

    Внутри f-строки `f"Bob is {age['Bob]} years old."`
    у вас есть другая строка, которая начинается либо с
    одинарной кавычки (') или двойной кавычки ("), без совпадающей закрывающей кавычки.
    

(124) f-string with backslash
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_with_backslash.py", line 2
        print(f"{'\n'.join(names)}")
                                   ^
    SyntaxError: f-string expression part cannot include a backslash
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\f_string_with_backslash.py'
    в указанном ^ месте.
    
    
       2| print(f"{'\n'.join(names)}")
                                     ^

    Вы написали f-строку, содержимое которой `{...}`
    включает обратную косую черту; это недопустимо.
    Возможно, вы можете заменить часть, содержащую обратную косую черту,
    некоторой переменной. Например, предположим, что у вас есть f-строка вида:
        f"{... 'hello\n' ...}"
    её можно записать как:
        hello = 'hello\n'
        f"{...hello ...}"
    

(125) Missing terms in for statement
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\for_missing_terms.py", line 1
        for:
           ^
    SyntaxError: invalid syntax
    
        Для цикла `for` требуются как минимум 3 элемента.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\for_missing_terms.py'
    в указанном ^ месте.
    
    
       1| for:
             ^

    Цикл `for` -- это итерация по последовательности:
    
        for element in sequence:
            ...
    
    

(126) Not a chance!
-------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_braces.py", line 1
        from __future__ import braces
        ^
    SyntaxError: not a chance
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\future_braces.py'
    в указанном ^ месте.
    
    
       1| from __future__ import braces
          ^^^^

    Предполагаю, что вы написали `from __future__ import braces`, следуя чьему-то совету.
    Это никогда не сработает.
    
    В отличие от других языков программирования, в Python блок кода выделяется уровнем отступа,
    а не использованием фигурных скобок, например, `{...}`.
    

(127) Do not import * from __future__
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_import_star.py", line 1
        from __future__ import *
        ^
    SyntaxError: future feature * is not defined
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\future_import_star.py'
    в указанном ^ месте.
    
    
       1| from __future__ import *
          ^^^^

    При использовании оператора `from __future__ import`,
    вы должны импортировать элементы с определенными именами.
    
    Доступными вариантами являются: `nested_scopes,
     generators,
     division,
     absolute_import,
     with_statement,
     print_function,
     unicode_literals,
     barry_as_FLUFL,
     generator_stop,
     annotations`.
    

(128) __future__ at beginning
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_must_be_first.py", line 3
        from __future__ import generators
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    SyntaxError: from __future__ imports must occur at the beginning of the file
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\future_must_be_first.py'
    в указанном ^ месте.
    
    
       3|     from __future__ import generators
              ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Оператор `from __future__ import` изменяет способ, которым Python
    интерпретирует код в файле. Он должен находиться в начале файла.

(129) Typo in __future__
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_typo.py", line 1
        from __future__ import divisio
        ^
    SyntaxError: future feature divisio is not defined
    
        Вы имели в виду `division`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\future_typo.py'
    в указанном ^ месте.
    
    
       1| from __future__ import divisio
          ^^^^

    Возможно, вместо `divisio` вы хотели импортировать `division`.
    

(130) Unknown feature in __future__
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_unknown.py", line 1
        from __future__ import something
        ^
    SyntaxError: future feature something is not defined
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\future_unknown.py'
    в указанном ^ месте.
    
    
       1| from __future__ import something
          ^^^^

    `something` не является допустимой функцией модуля `__future__`.
    
    Доступными вариантами являются: `nested_scopes,
     generators,
     division,
     absolute_import,
     with_statement,
     print_function,
     unicode_literals,
     barry_as_FLUFL,
     generator_stop,
     annotations`.
    

(131) Parenthesis around generator expression
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\generator_expression_parens.py", line 6
        f(x for x in L, 1)
          ^^^^^^^^^^^^
    SyntaxError: Generator expression must be parenthesized
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\generator_expression_parens.py'
    в указанном ^ месте.
    
    
       6| f(x for x in L, 1)
            ^^^^^^^^^^^^

    Вы используете генераторное выражение, что-то типа
    
         x for x in thing
    
    Вы должны окружить его скобками.
    

(132) Space between names
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\hyphen_instead_of_underscore.py", line 4
        a-b = 2
        ^^^
    SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?
    
        Вы имели в виду `a_b`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\hyphen_instead_of_underscore.py'
    в указанном ^ месте.
    
    
       4| a-b = 2
          ^^^

    Вы написали выражение, включающее некоторые математические операции
    слева от знака равенства, который следует
    использовать только для присвоения значения переменной.
    Возможно вы хотели написать `a_b` вместо `a-b`.
    

(133) Missing condition in if statement
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\if_missing_condition.py", line 1
        if:
          ^
    SyntaxError: invalid syntax
    
        Вы забыли добавить условие.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\if_missing_condition.py'
    в указанном ^ месте.
    
    
       1| if:
            ^

    Оператор `if` требует условия:
    
        if condition:
            ...
    
    

(134) use j instead of i
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\imaginary_i.py", line 3
        a = 3.0i
              ^
    SyntaxError: invalid decimal literal
    
        Вы имели в виду `3.0j`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\imaginary_i.py'
    в указанном ^ месте.
    
    
       3| a = 3.0i
              ^^^^

    Python сообщает, что вы записали недопустимое число.
    Однако я думаю, что проблема может заключаться в следующем.
    
    Возможно, вы подумали, что `i` можно использовать для представления
    квадратного корня из `-1`. В Python для этого используется символ `j`,
    а комплексная часть записывается как `some_number`, сразу же
    за которым следует `j`, без пробелов между ними.
    Возможно, вы хотели написать `3.0j`.
    

(135) Import inversion: import X from Y
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\import_from.py", line 3
        import pen from turtle
                   ^^^^
    SyntaxError: invalid syntax
    
        Вы имели в виду `from turtle import pen`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\import_from.py'
    в указанном ^ месте.
    
    
       3| import pen from turtle
          ^^^^^^     ^^^^

    Вы написали
    
        import pen from turtle
    вместо
    
        from turtle import pen
    
    

(136) IndentationError: expected an indented block
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_1.py", line 4
        pass
        ^^^^
    IndentationError: expected an indented block after 'if' statement on line 3
    
    `IndentationError` возникает, когда данная строка кода
    не отступает (не выровнена по вертикали относительно других строк), как требуется.
    
    Python не смог понять код в файле 'TESTS:\syntax\indentation_error_1.py'
    в указанном ^ месте.
    
    
       4| pass
          ^^^^

    Ожидалось, что строка `4`, указанная выше, начнет новый блок с отступом.
    

(137) IndentationError: unexpected indent
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_2.py", line 4
        pass
        ^
    IndentationError: unexpected indent
    
    `IndentationError` возникает, когда данная строка кода
    не отступает (не выровнена по вертикали относительно других строк), как требуется.
    
    Python не смог понять код в файле 'TESTS:\syntax\indentation_error_2.py'
    в указанном ^ месте.
    
    
       4|       pass
                ^^^^

    Строка `4`, определенная выше, имеет больший отступ, чем требуется.
    

(138) IndentationError: unindent does not match ...
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_3.py", line 5
        pass
            ^
    IndentationError: unindent does not match any outer indentation level
    
    `IndentationError` возникает, когда данная строка кода
    не отступает (не выровнена по вертикали относительно других строк), как требуется.
    
    Python не смог понять код в файле 'TESTS:\syntax\indentation_error_3.py'
    в указанном ^ месте.
    
    
       5|     pass
              ^^^^

    Строка `5`, определенная выше, имеет меньший отступ, чем требуется..
    

(139) IndentationError: missing continuation line
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_4.py", line 6
        "c"
        ^
    IndentationError: unexpected indent
    
    `IndentationError` возникает, когда данная строка кода
    не отступает (не выровнена по вертикали относительно других строк), как требуется.
    
    Python не смог понять код в файле 'TESTS:\syntax\indentation_error_4.py'
    в указанном ^ месте.
    
    
       6|          "c"
                   ^^^

    Строка `6`, определенная выше, имеет больший отступ, чем требуется.
    
    Строка 6, которая идентифицируется как имеющая проблему,
    состоит из одной строки, что также характерно и для
    для предыдущей строки.
    Возможно, вы хотели включить символ продолжения `\`,
    в конце строки 5.
    

(140) Forgot 'o' for octal
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\integer_with_leading_zero_1.py", line 1
        x = 01
            ^
    SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
    
        Вы имели в виду `0o1`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\integer_with_leading_zero_1.py'
    в указанном ^ месте.
    
    
       1| x = 01
              ^

    Возможно, вы хотели написать восьмеричное число `0o1`.
    и забыли букву 'о', или, возможно, вы хотели написать
    десятичное целое число и не знали, что оно не может начинаться с нулей.
    

(141) Integer with leading zeros
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\integer_with_leading_zero_2.py", line 1
        x = 000_123_456
            ^^^^
    SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
    
        Вы имели в виду `123_456`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\integer_with_leading_zero_2.py'
    в указанном ^ месте.
    
    
       1| x = 000_123_456
              ^^^

    Возможно, вы хотели написать целое число `123_456`
    и не знали, что оно не может начинаться с нулей.
    

(142) Invalid character in identifier
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_character_in_identifier.py", line 6
        🤖 = 'Reeborg'
        ^
    SyntaxError: invalid character '🤖' (U+1F916)
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_character_in_identifier.py'
    в указанном ^ месте.
    
    
       6| 🤖 = 'Reeborg'
          ^

    Python указывает, что вы использовали недопустимый символ юникода `🤖`.
    

(143) Invalid decimal literal - 1
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_decimal_literal1.py", line 1
        a = 1f
            ^
    SyntaxError: invalid decimal literal
    
        Возможно, вы пропустили оператор умножения, `1 * f`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_decimal_literal1.py'
    в указанном ^ месте.
    
    
       1| a = 1f
              ^^

    Python сообщает, что вы записали недопустимое число.
    Однако я думаю, что проблема может заключаться в следующем.
    
    Корректные имена не могут начинаться с цифры.
    Возможно, вы пропустили оператор умножения, `1 * f`.
    
    

(144) Invalid encoding
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_encoding.py", line 2, in <module>
        compile(source, filename="example.py", mode="exec")
      File "TESTS:\example.py", line 0
    SyntaxError: encoding problem: utf8 with BOM
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\example.py'
    
    
    Кодировка файла некорректна.
    

(145) Invalid hexadecimal number
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_hexadecimal.py", line 3
        a = 0x123g4
                ^
    SyntaxError: invalid hexadecimal literal
    
        Допустили ошибку при записи шестнадцатеричного числа?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_hexadecimal.py'
    в указанном ^ месте.
    
    
       3| a = 0x123g4
              ^^^^^^^

    Похоже, что вы использовали недопустимый символ (`g`) в шестнадцатеричном числе.
    
    Шестнадцатеричные числа - это целые числа с основанием 16, в которых
    используются символы от `0` до `9`
    для обозначения значений от 0 до 9, и буквы от `a` до `f`
    (или от `A` до `F`) для представления значений от 10 до 15.
    В Python шестнадцатеричные числа начинаются с `0x` или `0X`,
    за которым следуют символы, используемые для представления значения этого целого числа.
    

(146) Valid names cannot begin with a number
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier.py", line 3
        36abc = 3
         ^
    SyntaxError: invalid decimal literal
    
        Корректные имена не могут начинаться с цифры.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_identifier.py'
    в указанном ^ месте.
    
    
       3| 36abc = 3
          ^^^

    Python сообщает, что вы записали недопустимое число.
    Однако я думаю, что проблема может заключаться в следующем.
    
    Корректные имена не могут начинаться с цифры.
    

(147) Valid names cannot begin with a number - 2
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_2.py", line 3
        tau = 2pi
              ^
    SyntaxError: invalid decimal literal
    
        Возможно, вы пропустили оператор умножения, `2 * pi`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_identifier_2.py'
    в указанном ^ месте.
    
    
       3| tau = 2pi
                ^^^

    Python сообщает, что вы записали недопустимое число.
    Однако я думаю, что проблема может заключаться в следующем.
    
    Корректные имена не могут начинаться с цифры.
    Возможно, вы пропустили оператор умножения, `2 * pi`.
    
    

(148) Valid names cannot begin with a number - 3
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_3.py", line 1
        3job  # could be entered in a repl
         ^
    SyntaxError: invalid imaginary literal
    
        Возможно, вы пропустили оператор умножения, `3 * job`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_identifier_3.py'
    в указанном ^ месте.
    
    
       1| 3job  # could be entered in a repl
          ^^^^

    Корректные имена не могут начинаться с цифры.
    Возможно, вы пропустили оператор умножения, `3 * job`.
    
    [Примечание: выражение`3j * ob` также будет
    верным, поскольку `3j` - комплексное число].
    

(149) Valid names cannot begin with a number - 4
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_4.py", line 1
        3job = 1
         ^
    SyntaxError: invalid imaginary literal
    
        Корректные имена не могут начинаться с цифры.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_identifier_4.py'
    в указанном ^ месте.
    
    
       1| 3job = 1
          ^^^

    Корректные имена не могут начинаться с цифры.
    

(150) Valid names cannot begin with a number - 5
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_5.py", line 1
        print(42java)
                ^
    SyntaxError: invalid imaginary literal
    
        Возможно, вы пропустили оператор умножения, `42 * java`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_identifier_5.py'
    в указанном ^ месте.
    
    
       1| print(42java)
                ^^^^

    Корректные имена не могут начинаться с цифры.
    Возможно, вы пропустили оператор умножения, `42 * java`.
    
    [Примечание: выражение`42j * ava` также будет
    верным, поскольку `42j` - комплексное число].
    

(151) Keyword can't be an expression
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_keyword_argument.py", line 7
        a = dict('key'=1)
                 ^^^^^^
    SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_keyword_argument.py'
    в указанном ^ месте.
    
    
       7| a = dict('key'=1)
                   ^^^^^^

    Скорее всего, вы вызвали функцию с именованным аргументом:
    
        a_function(invalid=something) 
    
    где `invalid` не является допустимым именем переменной в Python
    либо потому, что оно начинается с числа, либо является строкой,
    или содержит точку и т.д.
    

(152) Named argument can't be a Python keyword
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_keyword_argument_2.py", line 7
        a = dict(True=1)
                 ^^^^^
    SyntaxError: cannot assign to True
    
        Вы не можете присвоить значение `True`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_keyword_argument_2.py'
    в указанном ^ месте.
    
    
       7| a = dict(True=1)
                   ^^^^^

    `True` является константой в Python; вы не можете присвоить ему другое значение.
    
    

(153) Invalid non printable character
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_non_printable_char.py", line 2, in <module>
        eval(s)
      File "<string>", line 1
        print("Hello")
             ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле '<string>'
    в указанном ^ месте.
    
    
       1| print("Hello")
               ^

    Your code contains the invalid non-printable character '\x17'.
    

(154) Invalid octal number
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_octal.py", line 3
        b = 0O1876
               ^
    SyntaxError: invalid digit '8' in octal literal
    
        Не допустили ли вы ошибки при записи восьмеричного числа?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\invalid_octal.py'
    в указанном ^ месте.
    
    
       3| b = 0O1876
                 ^^^

    It looks like you used an invalid character (`8`) in an octal number.
    
    Octal numbers are base 8 integers that only use the symbols `0` to `7`
    to represent values.
    In Python, octal numbers start with either `0o` or `0O`,
    (the digit zero followed by the letter `o`)
    followed by the characters used to represent the value of that integer.
    

(155) Inverted operators 1
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\inverted_operators.py", line 1
        a =< 3
           ^
    SyntaxError: invalid syntax
    
        Операторы расположены в правильном порядке?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\inverted_operators.py'
    в указанном ^ месте.
    
    
       1| a =< 3
            ^^

    Похоже, что вы написали два оператора (`=` и `<`).
    в неправильном порядке: `=<` вместо `<=`.
    

(156) Inverted operators 2
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\inverted_operators_2.py", line 1
        a =<* 3
           ^
    SyntaxError: invalid syntax
    
        Операторы расположены в правильном порядке?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\inverted_operators_2.py'
    в указанном ^ месте.
    
    
       1| a =<* 3
            ^^

    Похоже, что вы написали два оператора (`=` и `<`).
    в неправильном порядке: `=<` вместо `<=`.
    
    Однако такое изменение все равно не исправит
    все синтаксические ошибки в вашем коде.
    

(157) Iteration variable unpacking in comprehension
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\iteration_unpacking_in_comprehension.py", line 1
        [*x for x in xs]
         ^^
    SyntaxError: iterable unpacking cannot be used in comprehension
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\iteration_unpacking_in_comprehension.py'
    в указанном ^ месте.
    
    
       1| [*x for x in xs]
           ^^

    Внутренняя ошибка Friendly.
    Пожалуйста, сообщите об этом примере по адресу
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    Если вы используете REPL, используйте для этого `www('bug')`.
    
    

(158) Keyword arg only once in function call
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\keyword_arg_repeated.py", line 4
        f(ad=1, ad=2)
                ^^^^
    SyntaxError: keyword argument repeated: ad
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\keyword_arg_repeated.py'
    в указанном ^ месте.
    
    
       4| f(ad=1, ad=2)
                  ^^^^

    Вы вызвали функцию, повторяя одно и то же ключевое слово-аргумент (`ad`).
    Каждое ключевое слово-аргумент должно встречаться только один раз в вызове функции.
    

(159) Keyword as attribute
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\keyword_as_attribute.py", line 12
        a.pass = 2
          ^^^^
    SyntaxError: invalid syntax
    
        `pass` нельзя использовать в качестве атрибута.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\keyword_as_attribute.py'
    в указанном ^ месте.
    
    
       12| a.pass = 2
             ^^^^

    Нельзя использовать ключевое слово Python `pass` в качестве атрибута.
    
    

(160) lambda with parentheses around arguments
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\lambda_with_parens.py", line 2
        x = lambda (a, b): a + b
                   ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\lambda_with_parens.py'
    в указанном ^ месте.
    
    
       2| x = lambda (a, b): a + b
                     ^

    `lambda` не позволяет использовать круглые скобки вокруг своих аргументов.
    Это было разрешено в Python 2, но не в Python 3.
    

(161) lambda with tuple as argument
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\lambda_with_tuple_argument.py", line 2
        x = lambda a, (b, c): a + b + b
                      ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\lambda_with_tuple_argument.py'
    в указанном ^ месте.
    
    
       2| x = lambda a, (b, c): a + b + b
                        ^

    Вы не можете передавать явные кортежи в качестве аргументов.
    Присвойте любой кортеж параметру и распакуйте его в теле функции.
    

(162) Assign to literal in for loop
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\literal_in_for_loop.py", line 1
        for "char" in "word":
            ^^^^^^
    SyntaxError: cannot assign to literal
    
        Вы можете присваивать объекты только идентификаторам (именам переменных)
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\literal_in_for_loop.py'
    в указанном ^ месте.
    
    
       1| for "char" in "word":
              ^^^^^^

    Цикл for должен иметь вид:
    
        for ... in sequence:
    
    где `...` должен содержать только идентификаторы (имена переменных)
    а не литералы типа `"char"`.
    

(163) IndentationError/SyntaxError depending on version
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_code_block.py", line 4
    IndentationError: expected an indented block after 'for' statement on line 3
    
    `IndentationError` возникает, когда данная строка кода
    не отступает (не выровнена по вертикали относительно других строк), как требуется.
    
    Python не смог понять код в файле 'TESTS:\syntax\missing_code_block.py'
    в указанном ^ месте.
    
    
       3| for i in range(10):
    -->4| 
                            ^

    Ожидалось, что строка `4`, указанная выше, начнет новый блок с отступом.
    

(164) IndentationError/SyntaxError depending on version - 2
-----------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_code_block_2.py", line 6
    IndentationError: expected an indented block after 'for' statement on line 3
    
    `IndentationError` возникает, когда данная строка кода
    не отступает (не выровнена по вертикали относительно других строк), как требуется.
    
    Python не смог понять код в файле 'TESTS:\syntax\missing_code_block_2.py'
    
    
       3| for i in "test":
       4| 

    Ожидалось, что строка `6`, указанная выше, начнет новый блок с отступом.
    

(165) Missing colon - if
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_colon_if.py", line 3
        if True
               ^
    SyntaxError: expected ':'
    
        Вы забыли двоеточие `:`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\missing_colon_if.py'
    в указанном ^ месте.
    
    
       3| if True
                 ^

    Вы написали утверждение, начинающееся с
    `if`, но забыли добавить двоеточие `:` в конце.
    

(166) Missing colon - while
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_colon_while.py", line 3
        while True  # a comment
                    ^^^^^^^^^^^
    SyntaxError: expected ':'
    
        Вы забыли двоеточие `:`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\missing_colon_while.py'
    в указанном ^ месте.
    
    
       3| while True  # a comment
                    ^

    Вы написали цикл `while`, но забыли добавить двоеточие `:` в конце
    

(167) Missing comma in a dict
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_dict.py", line 4
        'b': 2
             ^-->
    SyntaxError: invalid syntax. Perhaps you forgot a comma?
    
        Вы забыли поставить запятую?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\missing_comma_in_dict.py'
    в указанном ^ месте.
    
    
       3| a = {'a': 1,
    -->4|      'b': 2
                    ^-->
    -->5|      'c': 3,
               ^^^
       6| }

    Python указывает, что ошибка вызвана `'c'`, написанным сразу после `2`.
    Возможно, что вы забыли поставить запятую между элементами множества или или словаря,
    место отмечено ^.
    Возможно, вы имели в виду `
    
        a = {'a': 1,
             'b': 2, 
                   ^
             'c': 3,
        }
    
    `

(168) Missing comma between strings in a dict
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_dict_2.py", line 4
        'c': '3',
           ^
    SyntaxError: invalid syntax
    
        Вы забыли поставить запятую?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\missing_comma_in_dict_2.py'
    в указанном ^ месте.
    
    
       2| a = {'a': '1',
       3|      'b': '2'
    -->4|      'c': '3',
                  ^
       5| }

    Полагаю, что вы забыли поставить запятую между двумя строками
    при определении словаря.
    ```
    a = {'a': '1',
         'b': '2',
                 ^
         'c': '3',
    }
    ```

(169) Missing comma in a list
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_list.py", line 3
        a = [1, 2  3]
                ^^^^
    SyntaxError: invalid syntax. Perhaps you forgot a comma?
    
        Вы что-то пропустили между `2` и `3`
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\missing_comma_in_list.py'
    в указанном ^ месте.
    
    
       3| a = [1, 2  3]
                  ^^^^

    Python указывает, что ошибка вызвана `3`, написанным сразу после `2`.
    Возможно, вы забыли поставить запятую между элементами списка,
    место отмечено ^.
    Возможно, вы хотели вставить оператор типа `+, -, *`
    между `2` и `3`.
    Следующие строки кода не вызовут `SyntaxError`:
        a = [1, 2,   3]
        a = [1, 2 +   3]
        a = [1, 2 -   3]
        a = [1, 2 *   3]
    Примечание: это только некоторые из возможных вариантов и
    некоторые из них могут вызывать другие типы исключений.
    

(170) Missing comma in a set
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_set.py", line 3
        a = {1, 2  3}
                ^^^^
    SyntaxError: invalid syntax. Perhaps you forgot a comma?
    
        Вы что-то пропустили между `2` и `3`
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\missing_comma_in_set.py'
    в указанном ^ месте.
    
    
       3| a = {1, 2  3}
                  ^^^^

    Python указывает, что ошибка вызвана `3`, написанным сразу после `2`.
    Возможно, что вы забыли поставить запятую между элементами множества или или словаря,
    место отмечено ^.
    Возможно, вы хотели вставить оператор типа `+, -, *`
    между `2` и `3`.
    Следующие строки кода не вызовут `SyntaxError`:
        a = {1, 2,   3}
        a = {1, 2 +   3}
        a = {1, 2 -   3}
        a = {1, 2 *   3}
    Примечание: это только некоторые из возможных вариантов и
    некоторые из них могут вызывать другие типы исключений.
    

(171) Missing comma in a tuple
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_tuple.py", line 3
        a = (1, 2  3)
                ^^^^
    SyntaxError: invalid syntax. Perhaps you forgot a comma?
    
        Вы что-то пропустили между `2` и `3`
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\missing_comma_in_tuple.py'
    в указанном ^ месте.
    
    
       3| a = (1, 2  3)
                  ^^^^

    Python указывает, что ошибка вызвана `3`, написанным сразу после `2`.
    Возможно, вы забыли поставить запятую между элементами кортежа, 
    или между аргументами функции, место отмечено ^.
    Возможно, вы хотели вставить оператор типа `+, -, *`
    между `2` и `3`.
    Следующие строки кода не вызовут `SyntaxError`:
        a = (1, 2,   3)
        a = (1, 2 +   3)
        a = (1, 2 -   3)
        a = (1, 2 *   3)
    Примечание: это только некоторые из возможных вариантов и
    некоторые из них могут вызывать другие типы исключений.
    

(172) Missing parenthesis for range
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_parens_for_range.py", line 1
        for i in range 3:
                       ^
    SyntaxError: invalid syntax
    
        Вы забыли про скобки?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\missing_parens_for_range.py'
    в указанном ^ месте.
    
    
       1| for i in range 3:
                         ^

    Похоже, что вы забыли использовать скобки с `range`.
    Возможно, вы имели в виду:
    
        for i in range( 3):
    
    

(173) Misspelled Python keyword
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\misspelled_keyword.py", line 2
        is i in range(3):
        ^^
    SyntaxError: invalid syntax
    
        Вы имели в виду `if i in range(3):`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\misspelled_keyword.py'
    в указанном ^ месте.
    
    
       2| is i in range(3):
          ^^

    Возможно, вы хотели написать `if` и допустили опечатку.
    Корректной строкой может быть: `if i in range(3):`.
    

(174) Name is global and nonlocal
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\name_is_global_and_nonlocal.py", line 7
        global xy
        ^^^^^^^^^
    SyntaxError: name 'xy' is nonlocal and global
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\name_is_global_and_nonlocal.py'
    в указанном ^ месте.
    
    
       7|     global xy
              ^^^^^^^^^

    Вы объявили `xy` как global и nonlocal переменную одновременно.
    Переменная может быть global или nonlocal, но не обеими одновременно.
    

(175) Name is parameter and nonlocal
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\name_is_param_and_nonlocal.py", line 5
        nonlocal x
        ^^^^^^^^^^
    SyntaxError: name 'x' is parameter and nonlocal
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\name_is_param_and_nonlocal.py'
    в указанном ^ месте.
    
    
       5|     nonlocal x
              ^^^^^^^^^^

    Вы использовали `x` в качестве параметра функции
    прежде чем объявить его также как нелокальную переменную:
    `x` не может быть одновременно и тем, и другим.
    

(176) nonlocal variable not found
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\no_binding_for_nonlocal.py", line 5
        nonlocal ab
        ^^^^^^^^^^^
    SyntaxError: no binding for nonlocal 'ab' found
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\no_binding_for_nonlocal.py'
    в указанном ^ месте.
    
    
       5|     nonlocal ab
              ^^^^^^^^^^^

    Вы объявили переменную `ab` как
    нелокальную, но она не может быть найдена.
    

(177) nonlocal variable not found at module level
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\nonlocal_at_module.py", line 4
        nonlocal cd
        ^^^^^^^^^^^
    SyntaxError: nonlocal declaration not allowed at module level
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\nonlocal_at_module.py'
    в указанном ^ месте.
    
    
       4| nonlocal cd
          ^^^^^^^^^^^

    Вы использовали ключевое слово nonlocal на уровне модуля.
    Ключевое слово nonlocal относится к переменной внутри функции,
    которой присвоено значение вне этой функции.

(178) Same operator twice in a row
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\operator_twice_in_a_row.py", line 1
        4****5
           ^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\operator_twice_in_a_row.py'
    в указанном ^ месте.
    
    
       1| 4****5
           ^^^^

    Вы не должны использовать один и тот же оператор `**` два раза подряд.
    Возможно, вы написали один из них по ошибке или забыли поместить что-то между ними.
    

(179) Using pip from interpreter
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\pip_install_1.py", line 2
        pip install friendly
            ^^^^^^^
    SyntaxError: invalid syntax
    
        Pip нельзя использовать в консоли интерпретатора Python.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\pip_install_1.py'
    в указанном ^ месте.
    
    
       2| pip install friendly
              ^^^^^^^

    Похоже, что вы пытаетесь использовать pip для установки модуля.
    `pip` - это команда, которую нужно запускать в терминале,
    а не из консоли интерпретатора Python.
    

(180) Using pip from interpreter 2
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\pip_install_2.py", line 2
        python -m pip install friendly
                  ^^^
    SyntaxError: invalid syntax
    
        Pip нельзя использовать в консоли интерпретатора Python.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\pip_install_2.py'
    в указанном ^ месте.
    
    
       2| python -m pip install friendly
                    ^^^

    Похоже, что вы пытаетесь использовать pip для установки модуля.
    `pip` - это команда, которую нужно запускать в терминале,
    а не из консоли интерпретатора Python.
    

(181) print is a function
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function.py", line 2
        print 'hello'
        ^^^^^^^^^^^^^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
    
        Вы имели в виду `print('hello')`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\print_is_a_function.py'
    в указанном ^ месте.
    
    
       2| print 'hello'
          ^^^^^^^^^^^^^

    Возможно, вам нужно напечатать
    
         print('hello')
    
    В старой версии Python `print` был ключевым словом.
    Теперь `print` -- это функция и для ее вызова нужно использовать круглые скобки.
    

(182) print is a function 2
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_2.py", line 2
        print len('hello')
        ^^^^^^^^^^^^^^^^^^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
    
        Вы имели в виду `print(len('hello'))`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\print_is_a_function_2.py'
    в указанном ^ месте.
    
    
       2| print len('hello')
          ^^^^^^^^^^^^^^^^^^

    Возможно, вам нужно напечатать
    
         print(len('hello'))
    
    В старой версии Python `print` был ключевым словом.
    Теперь `print` -- это функция и для ее вызова нужно использовать круглые скобки.
    

(183) print is a function 3
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_3.py", line 1
        print """This is a very long string which results in a very long error message."""
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
    
        Вы имели в виду `print(...)`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\print_is_a_function_3.py'
    в указанном ^ месте.
    
    
       1| print """This is a very long string which results in a very long error message."""
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Возможно, вам нужно напечатать
    
         print(...)
    
    В старой версии Python `print` был ключевым словом.
    Теперь `print` -- это функция и для ее вызова нужно использовать круглые скобки.
    

(184) print is a function 4
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_4.py", line 2
        print len("""This is a long string
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^-->
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
    
        Вы имели в виду `print(...)`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\print_is_a_function_4.py'
    в указанном ^ месте.
    
    
    -->2| print len("""This is a long string
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       3|           that spans multiple lines.""")

    Возможно, вам нужно напечатать
    
         print(...)
    
    В старой версии Python `print` был ключевым словом.
    Теперь `print` -- это функция и для ее вызова нужно использовать круглые скобки.
    

(185) print is a function 5
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_5.py", line 2
        print len('This is a long string that fits on a single line.')
        ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
    
        Вы имели в виду `print(...)`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\print_is_a_function_5.py'
    в указанном ^ месте.
    
    
       2| print len('This is a long string that fits on a single line.')
          ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Возможно, вам нужно напечатать
    
         print(...)
    
    В старой версии Python `print` был ключевым словом.
    Теперь `print` -- это функция и для ее вызова нужно использовать круглые скобки.
    

(186) print is a function 6
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_non_paren_non_string1.py", line 1
        print hello world!
        ^^^^^^^^^^^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
    
        Вы имели в виду `print(...)`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\print_non_paren_non_string1.py'
    в указанном ^ месте.
    
    
       1| print hello world!
          ^^^^^^^^^^^

    Возможно, вам нужно напечатать
    
         print(...)
    
    В старой версии Python `print` был ключевым словом.
    Теперь `print` -- это функция и для ее вызова нужно использовать круглые скобки.
    Обратите внимание, что аргументы функции `print` должны быть разделены запятыми.
    

(187) print is a function 7
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_non_paren_non_string2.py", line 1
        print len("hello") hello
        ^^^^^^^^^^^^^^^^^^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print(...)?
    
        Вы имели в виду `print(...)`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\print_non_paren_non_string2.py'
    в указанном ^ месте.
    
    
       1| print len("hello") hello
          ^^^^^^^^^^^^^^^^^^

    Возможно, вам нужно напечатать
    
         print(...)
    
    В старой версии Python `print` был ключевым словом.
    Теперь `print` -- это функция и для ее вызова нужно использовать круглые скобки.
    Обратите внимание, что аргументы функции `print` должны быть разделены запятыми.
    

(188) Calling python from interpreter
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\python_interpreter.py", line 1
        python -i friendly
                  ^^^^^^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\python_interpreter.py'
    в указанном ^ месте.
    
    
       1| python -i friendly
                    ^^^^^^^^

    Предполагаю, что вы пытаетесь использовать Python для запуска программы.
    Вы должны делать это из терминала, а не из интерпретатора Python.
    

(189) problem with assigning a variable to Python
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\python_not_interpreter.py", line 1
        python = a b
                   ^
    SyntaxError: invalid syntax
    
        Вы что-то пропустили между `a` и `b`
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\python_not_interpreter.py'
    в указанном ^ месте.
    
    
       1| python = a b
                   ^^^

    Python указывает, что ошибка вызвана `b`, написанным сразу после `a`.
    Возможно, вы хотели вставить оператор типа `+; -; *; ,`
    между `a` и `b`.
    Следующие строки кода не вызовут `SyntaxError`:
        python = a +  b
        python = a -  b
        python = a *  b
        python = a,  b
    Примечание: это только некоторые из возможных вариантов и
    некоторые из них могут вызывать другие типы исключений.
    

(190) Quote inside a string
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\quote_inside_string.py", line 3
        message = 'I don't mind.'
                                ^
    SyntaxError: unterminated string literal (detected at line 3)
    
        Возможно, вы забыли закрыть кавычки.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\quote_inside_string.py'
    в указанном ^ месте.
    
    
       3| message = 'I don't mind.'
                                  ^

    Предполагаю, что вы пытались использовать символ кавычек внутри строки,
    которая была заключена в кавычки того же типа.
    Возможно, вам следовало экранировать символ внутренней кавычки:
    
        message = 'I don\'t mind.'
                        ^^
    

(191) Raising multiple exceptions
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\raise_multiple_exceptions.py", line 2
        raise X, Y
               ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\raise_multiple_exceptions.py'
    в указанном ^ месте.
    
    
       2| raise X, Y
                 ^

    Похоже, что вы пытаетесь вызвать исключение, используя синтаксис Python 2.
    

(192) Cannot use return outside function
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\return_outside_function.py", line 3
        return
        ^^^^^^
    SyntaxError: 'return' outside function
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\return_outside_function.py'
    в указанном ^ месте.
    
    
       3| return
          ^^^^^^

    Вы можете использовать оператор `return` только внутри функции или метода.
    

(193) Missing exponent for scientific notation
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\scientific_notation_missing_exponent.py", line 1
        a = 1.5e
              ^
    SyntaxError: invalid decimal literal
    
        Did you mean `1.5e0`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\scientific_notation_missing_exponent.py'
    в указанном ^ месте.
    
    
       1| a = 1.5e
              ^^^^

    Python сообщает, что вы записали недопустимое число.
    Однако я думаю, что проблема может заключаться в следующем.
    
    Did you mean `1.5e0`?
    Perhaps you meant to write `1.5e0` in scientific notation
    and forgot the numerical value for the exponent.
    

(194) Semicolon instead of colon
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_colon.py", line 1
        if True;  # A comment
               ^
    SyntaxError: invalid syntax
    
        Вы забыли поставить двоеточие?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\semi_colon_instead_of_colon.py'
    в указанном ^ месте.
    
    
       1| if True;  # A comment
                 ^

    Вы поставили точку с запятой `;` там, где должна быть только запятая.
    

(195) Semicolon instead of comma - 1
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_comma_1.py", line 1
        a = [1, 2; 3]
                 ^
    SyntaxError: invalid syntax
    
        Вы хотели поставить запятую?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\semi_colon_instead_of_comma_1.py'
    в указанном ^ месте.
    
    
       1| a = [1, 2; 3]
                   ^

    Вы поставили точку с запятой `;` там, где должна быть только запятая.
    

(196) Semicolon instead of commas - 2
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_comma_2.py", line 1
        a = [1; 2; 3]
              ^
    SyntaxError: invalid syntax
    
        Вы хотели поставить запятые?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\semi_colon_instead_of_comma_2.py'
    в указанном ^ месте.
    
    
       1| a = [1; 2; 3]
                ^

    Вы написали точки с запятой `;` там, где должны быть только запятые.
    

(197) Semicolon instead of commas - 3
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_comma_3.py", line 1
        a = [1; 2; 3];
              ^
    SyntaxError: invalid syntax
    
        Вы хотели поставить запятые?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\semi_colon_instead_of_comma_3.py'
    в указанном ^ месте.
    
    
       1| a = [1; 2; 3];
                ^

    Вы написали точки с запятой `;` там, где должны быть только запятые.
    

(198) Code block inside comprehension
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\should_be_comprehension.py", line 2
        for i in 1, 2, 3:
        ^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\should_be_comprehension.py'
    в указанном ^ месте.
    
    
       1| a = [
    -->2|     for i in 1, 2, 3:
              ^^^
       3|         i**2
       4| ]

    Возможно, вы написали утверждение, начинающее блок кода
    который должен быть частью list comprehension.
    Внутри представления списка нельзя располагать отдельные блоки кода.
    
    Если это неверно, пожалуйста, сообщите об этом случае.
    

(199) Single = instead of double == with if
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\single_equal_with_if.py", line 3
        if i % 2 = 0:
           ^^^^^
    SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?
    
        Возможно, вам нужно `==` вместо `=`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\single_equal_with_if.py'
    в указанном ^ месте.
    
    
       3|     if i % 2 = 0:
                 ^^^^^

    Вы написали выражение, включающее некоторые математические операции
    слева от знака равенства, который следует
    использовать только для присвоения значения переменной.
    

(200) Single = instead of double == with elif
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\single_equal_with_elif.py", line 5
        elif i % 2 = 0:
             ^^^^^
    SyntaxError: cannot assign to expression here. Maybe you meant '==' instead of '='?
    
        Возможно, вам нужно `==` вместо `=`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\single_equal_with_elif.py'
    в указанном ^ месте.
    
    
       5|     elif i % 2 = 0:
                   ^^^^^

    Вы написали выражение, включающее некоторые математические операции
    слева от знака равенства, который следует
    использовать только для присвоения значения переменной.
    

(201) Single = instead of double == with while
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\single_equal_with_while.py", line 4
        while a = 1:
              ^^^^^
    SyntaxError: invalid syntax. Maybe you meant '==' or ':=' instead of '='?
    
        Возможно, правильнее использовать `==` или `:=` вместо `=`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\single_equal_with_while.py'
    в указанном ^ месте.
    
    
       4| while a = 1:
                ^^^^^

    Вы использовали оператор присваивания `=`; но, возможно,
    хотели использовать оператор равенства `==`
    или моржовый оператор `:=`.
    

(202) Space between operators 1
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\space_between_operators_1.py", line 1
        a = 2 * * 5
                ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\space_between_operators_1.py'
    в указанном ^ месте.
    
    
       1| a = 2 * * 5
                ^ ^

    Вы не должны использовать один и тот же оператор `*` два раза подряд.
    Возможно, вы написали один из них по ошибке или забыли поместить что-то между ними.
    Или, возможно, вы по ошибке поставили пробел между двумя операторами
    и хотели написать `**` как один оператор.
    

(203) Space between operators 2
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\space_between_operators_2.py", line 1
        a / = b
            ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\space_between_operators_2.py'
    в указанном ^ месте.
    
    
       1| a / = b
            ^ ^

    Так нельзя: два оператора, `/` и `=` следуют друг за другом.
    Возможно, вы написали один из них по ошибке
    или забыли поместить что-то между ними.
    Или, возможно, вы по ошибке поставили пробел между двумя операторами
    и хотели написать `/=` как один оператор.
    

(204) Space in variable name
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\space_in_variable_name.py", line 1
        my name = André
           ^^^^
    SyntaxError: invalid syntax
    
        Вы имели в виду `my_name`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\space_in_variable_name.py'
    в указанном ^ месте.
    
    
       1| my name = André
             ^^^^

    В идентификаторах (именах переменных) пробелы недопустимы.
    Возможно, вы имели в виду `my_name`?
    

(205) Wrong target for star assignment
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\star_assignment_target.py", line 1
        *a = 1
        ^^
    SyntaxError: starred assignment target must be in a list or tuple
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\star_assignment_target.py'
    в указанном ^ месте.
    
    
       1| *a = 1
          ^^

    'Звёздное' присваивание должно быть типа:
    
        ... *name = list_or_tuple
    

(206) Too many nested blocks
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\too_many_nested_blocks.py", line 22
        while 22:
        ^-->
    SyntaxError: too many statically nested blocks
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\too_many_nested_blocks.py'
    в указанном ^ месте.
    
    
       22|                      while 22:
                                ^^^^^

    Ваш код слишком сложен для Python:
    вам нужно уменьшить количество блоков кода с отступами,
    содержащихся внутри других блоков кода.
    

(207) Too many nested parentheses.
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\too_many_parentheses.py", line 4
        ((((((((((((((((((((((((((((((((((
                                         ^
    SyntaxError: too many nested parentheses
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\too_many_parentheses.py'
    в указанном ^ месте.
    
    
       1| ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
       2|     ((((((((((((((((((((((((((((((((((((((((((((((((((((((((
       3|         (((((((((((((((((((((((((((((((((((((((((((((((((((
    -->4|             ((((((((((((((((((((((((((((((((((
                                                       ^
       5|                                              ))))))))))))))))))))))))))))))))))))))))))))))))))
       6|         )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
       7|     ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

    Ваш код слишком сложен для Python:
    вам нужно уменьшить количество круглых скобок
    содержащихся внутри других круглых скобок.
    

(208) Trailing comma in import statement
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\trailing_comma_in_import.py", line 2
        from math import sin, cos,
                                  ^
    SyntaxError: trailing comma not allowed without surrounding parentheses
    
        Вы поставили запятую по ошибке?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\trailing_comma_in_import.py'
    в указанном ^ месте.
    
    
       2| from math import sin, cos,
                                   ^

    Python указывает, что вам нужно окружить выражение
    заканчивающееся запятой, круглыми скобками.
    Если убрать последнюю запятую, синтаксической ошибки не будет.
    Возможно, вы хотели написать
    
    `from math import sin, cos`
    

(209) Triple-equal sign
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\triple_equal.py", line 3
        x = y === z
                ^
    SyntaxError: invalid syntax
    
        Вы хотели использовать `is` вместо `===`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\triple_equal.py'
    в указанном ^ месте.
    
    
       3| x = y === z
                ^^^

    Вы написали три знака равенства подряд, что допускается в некоторых
    языках программирования, но не в Python.
    Чтобы проверить, равны ли два объекта, используйте два знака равенства, `==`,
    а чтобы проверить, представляют ли два имени один и тот же объект,
    используйте оператор `is`.
    

(210) Unclosed bracket
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_bracket.py", line 5
        return [1, 2, 3
               ^
    SyntaxError: '[' was never closed
    
        Отсутствует закрывающая квадратная скобка `[`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unclosed_bracket.py'
    в указанном ^ месте.
    
    
    -->5|     return [1, 2, 3
                     ^
       6| 
       7| print(foo())
       8| 

    Открывающая квадратная скобка `[` в строке 5 не закрыта.
    
        5:     return [1, 2, 3
                      ^
    

(211) Unclosed parenthesis - 1
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_1.py", line 2
        x = int('1'
               ^
    SyntaxError: '(' was never closed
    
        Отсутствует закрывающая круглая скобка `(`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unclosed_paren_1.py'
    в указанном ^ месте.
    
    
    -->2| x = int('1'
                 ^
       3| if x == 1:
       4|     print('yes')
       5| 

    Открывающая круглая скобка `(` в строке 2 не закрыта.
    
        2: x = int('1'
                  ^
    

(212) Unclosed parenthesis - 2
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_2.py", line 2
        a = (b+c
            ^
    SyntaxError: '(' was never closed
    
        Отсутствует закрывающая круглая скобка `(`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unclosed_paren_2.py'
    в указанном ^ месте.
    
    
    -->2| a = (b+c
              ^
       3| d = a*a
       4| 

    Открывающая круглая скобка `(` в строке 2 не закрыта.
    
        2: a = (b+c
               ^
    

(213) Unclosed parenthesis - 3
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_3.py", line 7
        if 2:
            ^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unclosed_paren_3.py'
    в указанном ^ месте.
    
    
       5|         print(((123))
       6| 
    -->7| if 2:
              ^
       8|     print(123))

    Открывающая круглая скобка `(` в строке 5 не закрыта.
    
        5:         print(((123))
                        ^
    
    Если это неверно, пожалуйста, сообщите об этом случае.
    

(214) Unclosed parenthesis - 4
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_4.py", line 4
        def test():
        ^^^
    SyntaxError: invalid syntax
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unclosed_paren_4.py'
    в указанном ^ месте.
    
    
       2| print('hello'
       3| 
    -->4| def test():
          ^^^

    Открывающая круглая скобка `(` в строке 2 не закрыта.
    
        2: print('hello'
                ^
    

(215) Content passed continuation line character
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unexpected_after_continuation_character.py", line 5
        print(\t)
               ^
    SyntaxError: unexpected character after line continuation character
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unexpected_after_continuation_character.py'
    в указанном ^ месте.
    
    
       5| print(\t)
                 ^

    Вы используете символ продолжения `\` вне строки
    и за ним следует какой-то другой символ (символы).
    Полагаю, вы забыли закавычить строку.
    

(216) Unexpected EOF while parsing
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unexpected_eof.py", line 5
        return [1, 2, 3,
               ^
    SyntaxError: '[' was never closed
    
        Отсутствует закрывающая квадратная скобка `[`.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unexpected_eof.py'
    в указанном ^ месте.
    
    
    -->5|     return [1, 2, 3,
                     ^
       6| 
       7| print(foo())
       8| 

    Открывающая квадратная скобка `[` в строке 5 не закрыта.
    
        5:     return [1, 2, 3,
                      ^
    

(217) Invalid character (unicode fraction 3/4)
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_fraction.py", line 1
        a = ¾  # 3/4
            ^
    SyntaxError: invalid character '¾' (U+00BE)
    
        Вы имели в виду `3/4`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unicode_fraction.py'
    в указанном ^ месте.
    
    
       1| a = ¾  # 3/4
              ^

    Вы использовали copy-paste?
    Python указывает, что вы использовали недопустимый символ юникода `¾`.
    Вы использовали символ юникода ¾, известный как VULGAR FRACTION THREE QUARTERS
    Предполагаю, что вместо этого вы хотели написать дробь `3/4`.
    

(218) Invalid character (unicode fraction 1/2)
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_fraction2.py", line 1
        a = 1½  # 1 1/2
            ^
    SyntaxError: invalid decimal literal
    
        Вы имели в виду `1/2`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unicode_fraction2.py'
    в указанном ^ месте.
    
    
       1| a = 1½  # 1 1/2
              ^^

    Python сообщает, что вы записали недопустимое число.
    Однако я думаю, что проблема может заключаться в следующем.
    
    Вы использовали символ юникода ½, известный как VULGAR FRACTION ONE HALF
    Предполагаю, что вместо этого вы хотели написать дробь `1/2`.
    

(219) Invalid character (unicode fraction slash)
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_fraction3.py", line 1
        a = 22 ⁄ 7
               ^
    SyntaxError: invalid character '⁄' (U+2044)
    
        Did you mean to use the division operator, `/`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unicode_fraction3.py'
    в указанном ^ месте.
    
    
       1| a = 22 ⁄ 7
                 ^

    Вы использовали copy-paste?
    Python указывает, что вы использовали недопустимый символ юникода `⁄`.
    Предполагаю, что вы использовали символ юникода, известный как
    'FRACTION SLASH', который похож,
    но отличается от оператора деления `/`.
    

(220) Invalid character (unicode quote)
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote.py", line 3
        a = « hello »
            ^
    SyntaxError: invalid character '«' (U+00AB)
    
        Вы хотели использовать одинарные кавычки `'`, или двойные `"`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unicode_quote.py'
    в указанном ^ месте.
    
    
       3| a = « hello »
              ^

    Вы использовали copy-paste?
    Python указывает, что вы использовали недопустимый символ юникода `«`.
    Предполагаю, что вы использовали причудливую юникодную кавычку
    имя которой LEFT-POINTING DOUBLE ANGLE QUOTATION MARK,
    вместо обычной одинарной или двойной кавычки для строки.
    

(221) Invalid character (unicode quote2)
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote2.py", line 2
        a = ‹ hello ›
            ^
    SyntaxError: invalid character '‹' (U+2039)
    
        Вы хотели использовать одинарные кавычки `'`, или двойные `"`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unicode_quote2.py'
    в указанном ^ месте.
    
    
       2| a = ‹ hello ›
              ^

    Вы использовали copy-paste?
    Python указывает, что вы использовали недопустимый символ юникода `‹`.
    Предполагаю, что вы использовали причудливую юникодную кавычку
    имя которой SINGLE LEFT-POINTING ANGLE QUOTATION MARK,
    вместо обычной одинарной или двойной кавычки для строки.
    

(222) Invalid character (mistaken <)
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote3.py", line 2
        if a ‹ hello:
             ^
    SyntaxError: invalid character '‹' (U+2039)
    
        Вы хотели использовать одинарные кавычки `'`, или двойные `"`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unicode_quote3.py'
    в указанном ^ месте.
    
    
       2| if a ‹ hello:
               ^

    Вы использовали copy-paste?
    Python указывает, что вы использовали недопустимый символ юникода `‹`.
    Предполагаю, что вы использовали причудливую юникодную кавычку
    имя которой SINGLE LEFT-POINTING ANGLE QUOTATION MARK,
    вместо обычной одинарной или двойной кавычки для строки.
    Или, возможно, вы хотели поставить знак "меньше чем", `<`.
    

(223) Invalid character (mistaken >)
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote4.py", line 2
        if a › hello:
             ^
    SyntaxError: invalid character '›' (U+203A)
    
        Вы хотели использовать одинарные кавычки `'`, или двойные `"`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unicode_quote4.py'
    в указанном ^ месте.
    
    
       2| if a › hello:
               ^

    Вы использовали copy-paste?
    Python указывает, что вы использовали недопустимый символ юникода `›`.
    Предполагаю, что вы использовали причудливую юникодную кавычку
    имя которой SINGLE RIGHT-POINTING ANGLE QUOTATION MARK,
    вместо обычной одинарной или двойной кавычки для строки.
    Или, возможно, вы хотели поставить знак "больше чем", `>`.
    

(224) Invalid character (mistaken comma)
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote5.py", line 2
        a = (1‚ 2)
             ^
    SyntaxError: invalid decimal literal
    
        Вы хотели поставить запятую?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unicode_quote5.py'
    в указанном ^ месте.
    
    
       2| a = (1‚ 2)
               ^^

    Python сообщает, что вы записали недопустимое число.
    Однако я думаю, что проблема может заключаться в следующем.
    
    Предполагаю, что вы использовали причудливую кавычку юникода,
    имя которой SINGLE LOW-9 QUOTATION MARK.
    Возможно, вы хотели поставить запятую.
    

(225) Unmatched closing curly bracket
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_curly.py", line 6
        3, 4,}}
              ^
    SyntaxError: unmatched '}'
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unmatched_closing_curly.py'
    в указанном ^ месте.
    
    
       4| a = {1,
       5|     2,
    -->6|     3, 4,}}
                    ^

    Закрывающая фигурная скобка `}` в строке 6 ничему не соответствует.
    

(226) Unmatched closing parenthesis
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_paren.py", line 6
        3, 4,))
              ^
    SyntaxError: unmatched ')'
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unmatched_closing_paren.py'
    в указанном ^ месте.
    
    
       4| a = (1,
       5|     2,
    -->6|     3, 4,))
                    ^

    Закрывающая круглая скобка `)` в строке 6 ничему не соответствует.
    

(227) Mismatched brackets - 1
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_bracket_1.py", line 2
        x = (1, 2, 3]
                    ^
    SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unmatched_closing_bracket_1.py'
    в указанном ^ месте.
    
    
       2| x = (1, 2, 3]
              ^       ^

    Закрывающая квадратная скобка `]` в строке 2 не совпадает с открывающей круглая скобка `(` в строке 2.
    
        2: x = (1, 2, 3]
               ^       ^
    

(228) Mismatched brackets - 2
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_bracket_2.py", line 4
        3]
         ^
    SyntaxError: closing parenthesis ']' does not match opening parenthesis '(' on line 2
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unmatched_closing_bracket_2.py'
    в указанном ^ месте.
    
    
    -->2| x = (1,
              ^
       3|      2,
    -->4|      3]
                ^

    Закрывающая квадратная скобка `]` в строке 4 не совпадает с открывающей круглая скобка `(` в строке 2.
    
        2: x = (1,
               ^
        4:      3]
                 ^
    

(229) Unmatched brackets - 3
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_bracket_3.py", line 3
        3]]
          ^
    SyntaxError: unmatched ']'
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unmatched_closing_bracket_3.py'
    в указанном ^ месте.
    
    
       1| x = [1,
       2|      2,
    -->3|      3]]
                 ^

    Закрывающая квадратная скобка `]` в строке 3 ничему не соответствует.
    

(230) Unpacking a dict value
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unpacking_dict_value.py", line 1
        {'a': *(1, 2, 3)}
              ^^^^^^^^^^
    SyntaxError: cannot use a starred expression in a dictionary value
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unpacking_dict_value.py'
    в указанном ^ месте.
    
    
       1| {'a': *(1, 2, 3)}
                ^^^^^^^^^^

    Внутренняя ошибка Friendly.
    Пожалуйста, сообщите об этом примере по адресу
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    Если вы используете REPL, используйте для этого `www('bug')`.
    
    

(231) Unterminated triple quoted string
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unterminated_triple_quote_string.py", line 1
        some_text = """In a land
                    ^
    SyntaxError: unterminated triple-quoted string literal (detected at line 4)
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unterminated_triple_quote_string.py'
    в указанном ^ месте.
    
    
       1| some_text = """In a land
                      ^^^^^^^^^^^^

    Вы начали писать строку с тройными кавычками но так и не закрыли их.
    

(232) TabError
--------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\tab_error.py", line 7
        pass
        ^
    TabError: inconsistent use of tabs and spaces in indentation
    
    `TabError` указывает на то, что вы использовали как пробелы,
    так и символы табуляции для отступов в коде. В Python это недопустимо.
    Отступ кода означает, что блок кода выравнивается по вертикали,
    вставляйте в начало строк либо пробелы, либо символы табуляции.
    Рекомендация Python: всегда используйте пробелы для отступа.
    
    Python не смог понять код в файле 'TESTS:\syntax\tab_error.py'
    в указанном ^ месте.
    
    
       7| 	pass
           ^^^^

(233) EOL unescaped backslash
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unescaped_backslash.py", line 1
        a = "abc\"
            ^
    SyntaxError: unterminated string literal (detected at line 1)
    
        Вы забыли экранировать символ обратной косой черты?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unescaped_backslash.py'
    в указанном ^ месте.
    
    
       1| a = "abc\"
              ^

    Вы начали писать строку с одинарной или двойной кавычки,
    но так и не закрыли их.
    Возможно, вы хотели написать символ обратной косой черты `\`
    как последний символ в строке и забыли, что
    что его нужно экранировать, написав два `\` подряд.
    

(234) Using the backquote character
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\use_backquote.py", line 3
        a = `1`
            ^
    SyntaxError: invalid syntax
    
        Не следует использовать символ обратной кавычки.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\use_backquote.py'
    в указанном ^ месте.
    
    
       3| a = `1`
              ^

    Вы используете символ обратной кавычки.
    Либо вы хотели написать одинарную кавычку, либо скопировали код Python 2.
    В последнем случае используйте функцию `repr(x)`.

(235) unicode error
-------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_error.py", line 1
        path = "c:\Users\andre"
                               ^
    SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape
    
        Возможно, вам нужно удвоить символы обратной косой черты.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\unicode_error.py'
    в указанном ^ месте.
    
    
       1| path = "c:\Users\andre"
                 ^^^^^^^^^^^^^^^^

    Предполагаю, что вы написали строку, которая содержит
    один символ обратной косой черты, `\`, за которым следует заглавная буква `U` и еще несколько символов.
    Python, скорее всего, интерпретировал это как начало
    того, что известно как управляющая последовательность для специальных символов Юникода.
    Чтобы решить эту проблему, напишите так называемую 'необработанную строку',
    добавив букву `r` в качестве префикса перед строкой,
    либо замените `\U` на `\\\U`.
    

(236) Walrus instead of equal
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\walrus_instead_of_equal.py", line 1
        a := 3
          ^^
    SyntaxError: invalid syntax
    
        Вы хотели использовать `=`?
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\walrus_instead_of_equal.py'
    в указанном ^ месте.
    
    
       1| a := 3
            ^^

    Вы используете дополненный оператор присваивания `:=` там,
    где требуется обычный оператор присваивания `=`.
    

(237) Missing condition in while statement
------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\while_missing_condition.py", line 1
        while:
             ^
    SyntaxError: invalid syntax
    
        Вы забыли добавить условие.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\while_missing_condition.py'
    в указанном ^ месте.
    
    
       1| while:
               ^

    Для цикла `while` требуется условие:
    
        while condition:
            ...
    
    

(238) Would-be variable declaration
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\would_be_type_declaration_1.py", line 3
        if var start := begin < end:
               ^^^^^
    SyntaxError: invalid syntax
    
        В Python не нужно объявлять переменные.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\would_be_type_declaration_1.py'
    в указанном ^ месте.
    
    
       3| if var start := begin < end:
                 ^^^^^

    Похоже, что вы пытались сказать, что `start` является
    переменной, используя слово `var`.
    Если вы удалите `var`, то оператор станет корректен.
    

(239) Would-be variable declaration - 2
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\would_be_type_declaration_2.py", line 5
        var start := begin < end
        ^^^^^^^^^
    SyntaxError: invalid syntax. Perhaps you forgot a comma?
    
        В Python не нужно объявлять переменные.
        
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\would_be_type_declaration_2.py'
    в указанном ^ месте.
    
    
       4| if (
    -->5|     var start := begin < end
              ^^^^^^^^^
       6|    ):

    Похоже, что вы пытались сказать, что `var` является
    переменной, используя слово `var`.
    Если вы удалите `var`, то оператор станет корректен.
    

(240) Cannot use yield outside function
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 52, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\yield_outside_function.py", line 1
        (yield i) == 3
         ^^^^^^^
    SyntaxError: 'yield' outside function
    
    `SyntaxError` возникает, когда Python не может понять ваш код.
    
    Python не смог понять код в файле 'TESTS:\syntax\yield_outside_function.py'
    в указанном ^ месте.
    
    
       1| (yield i) == 3
           ^^^^^

    Вы можете использовать оператор `yield` только внутри функции.
    
