
Friendly tracebacks - en español
======================================

Friendly tiene como objetivo proporcionar comentarios más amigables
cuando se produce una excepción
se plantea que lo que hace Python  (sentence translated by Google Translate).

Below, we can find some examples. SyntaxError cases, as well as TabError and
IndentationError cases, are shown in a separate page.
Not all cases handled by friendly are included here.

.. note::

     The content of this page is generated by running
     `trb_spanish.py` located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

Friendly-traceback version: 0.5.35
Python version: 3.9.10



ArithmeticError
---------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_arithmetic_error.py", line 9, in test_Generic
        raise ArithmeticError('error')
    ArithmeticError: error
    
    `ArithmeticError` es la clase base para aquellas excepciones integradas al lenguaje
    que se producen por diversos errores aritméticos.
    Es inusual que veas esta excepción;
    normalmente, una excepción más específica debería haber sido lanzada.
    
    Excepción elevada en la linea 9 del archivo TESTS:\runtime\test_arithmetic_error.py.
    
        4: def test_Generic():
        5:     try:
        6:         # I am not aware of any way in which this error is raised directly
        7:         # Usually, a subclass such as ZeroDivisionError, etc., would
        8:         # likely be raised.
    --> 9:         raise ArithmeticError('error')
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       10:     except ArithmeticError as e:

            ArithmeticError:  <class ArithmeticError>
        


AssertionError
--------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_assertion_error.py", line 8, in test_Generic
        raise AssertionError("Fake message")
    AssertionError: Fake message
    
    En Python, la palabra clave `assert` se utiliza en sentencias de la forma
    `assert condition`, para confirmar que `condition` no es `False`,
    ni equivalente a `False`, como una lista vacía, etc.
    
    Si `condición` es `False` o equivalente, se produce un `AssertionError`.
    
    Excepción elevada en la linea 8 del archivo TESTS:\runtime\test_assertion_error.py.
    
       4: def test_Generic():
       5:     try:
       6:         # We raise it explicitly, rather than with the keyword assert, since
       7:         # we don't want pytest to rewrite out test.
    -->8:         raise AssertionError("Fake message")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       9:     except AssertionError as e:

            AssertionError:  <class AssertionError>
        


AttributeError
--------------


Attribute from other module
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 325, in test_Attribute_from_other_module
        keyword.pi
    AttributeError: module 'keyword' has no attribute 'pi'
    
        ¿Querías utilizar uno de los módulos: `math, cmath`?
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    En lugar del modulo `keyword`, quizás querías usar el
    atributo `pi` de uno de los siguientes módulos:
    `math, cmath.
    
    Excepción elevada en la linea 325 del archivo TESTS:\runtime\test_attribute_error.py.
    
       321:         assert "Did you mean `math`?" in result
       322: 
       323:     import cmath
       324:     try:
    -->325:         keyword.pi
                    ^^^^^^^^^^
       326:     except AttributeError as e:

            keyword:  <module keyword> from PYTHON_LIB:\keyword.py
        


Builtin function
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 223, in test_Builtin_function
        len.text
    AttributeError: 'builtin_function_or_method' object has no attribute 'text'
    
        ¿Querías decir `len(text)`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    `len` es una función. Quizás quisiste escribir
    `len(text)`
    
    Excepción elevada en la linea 223 del archivo TESTS:\runtime\test_attribute_error.py.
    
       220: def test_Builtin_function():
       221:     text = 'Hello world!'
       222:     try:
    -->223:         len.text
                    ^^^^^^^^
       224:     except AttributeError as e:

            text:  'Hello world!'
            len:  <builtin function len>
        


Builtin module with no file
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 240, in test_Builtin_module_with_no_file
        sys.foo
    AttributeError: module 'sys' has no attribute 'foo'
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Python nos indica que no se encuentra ningún objeto con nombre `foo` en
    el módulo  `sys`.
    
    Excepción elevada en la linea 240 del archivo TESTS:\runtime\test_attribute_error.py.
    
       236:     """Issue 116"""
       237:     import sys
       238: 
       239:     try:
    -->240:         sys.foo
                    ^^^^^^^
       241:     except AttributeError as e:

            sys:  <module sys (builtin)>
        


Circular import
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 359, in test_Circular_import
        import my_turtle1
      File "TESTS:\my_turtle1.py", line 4, in <module>
        a = my_turtle1.something
    AttributeError: partially initialized module 'my_turtle1' has no attribute 'something' (most likely due to a circular import)
    
        ¿Has dado a tu programa el mismo nombre que un módulo de Python?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Sospecho que has utilizado el nombre `my_turtle1.py` para tu programa
    y que también querías importar un módulo con el mismo nombre
    de la biblioteca estándar de Python.
    Si es así, deberías usar un nombre diferente para tu programa.
    
    La ejecución se detuvo en la linea 359 del archivo TESTS:\runtime\test_attribute_error.py.
    
       356:     from friendly_traceback.runtime_errors import stdlib_modules
       357:     stdlib_modules.names.append("my_turtle1")
       358:     try:
    -->359:        import my_turtle1
                   ^^^^^^^^^^^^^^^^^
       360:     except AttributeError as e:

    Excepción elevada en la linea 4 del archivo TESTS:\my_turtle1.py.
    
       1: """To test attribute error of partially initialized module."""
       2: import my_turtle1
       3: 
    -->4: a = my_turtle1.something
              ^^^^^^^^^^^^^^^^^^^^

            my_turtle1:  <module my_turtle1> from TESTS:\my_turtle1.py
        


Circular import b
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 376, in test_Circular_import_b
        import circular_c
      File "TESTS:\circular_c.py", line 4, in <module>
        a = circular_c.something
    AttributeError: partially initialized module 'circular_c' has no attribute 'something' (most likely due to a circular import)
    
        Tienes un import circular.
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Python indicó que el módulo `{module}` no fue importado completamente.
    Esto puede ocurrir si, durante la ejecución del código del módulo `circular_c`
    se intenta importar de nuevo el mismo módulo.
    
    La ejecución se detuvo en la linea 376 del archivo TESTS:\runtime\test_attribute_error.py.
    
       374: def test_Circular_import_b():
       375:     try:
    -->376:         import circular_c
                    ^^^^^^^^^^^^^^^^^
       377:     except AttributeError as e:

    Excepción elevada en la linea 4 del archivo TESTS:\circular_c.py.
    
       1: # Attribute error for partially initialize module
       2: import circular_c
       3: 
    -->4: a = circular_c.something
              ^^^^^^^^^^^^^^^^^^^^

            circular_c:  <module circular_c> from TESTS:\circular_c.py
        


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 26, in test_Generic
        A.x  # testing type
    AttributeError: type object 'A' has no attribute 'x'
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Un objeto de tipo `A` no tiene ningún atributo llamado `x`.
    
    Excepción elevada en la linea 26 del archivo TESTS:\runtime\test_attribute_error.py.
    
       22:     class A:
       23:         pass
       24: 
       25:     try:
    -->26:         A.x  # testing type
                   ^^^
       27:     except AttributeError as e:

            A:  <class A> defined in <function test_attribute_error.test_Generic>
        


Generic different frame
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 49, in test_Generic_different_frame
        a.attr
    AttributeError: 'A' object has no attribute 'attr'
    
        ¿Quieres decir `attr2`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    El objeto `a` no tiene ningún atributo llamado `attr`.
    Tal vez quiso escribir `a.attr2` en lugar de `a.attr`
    
    Excepción elevada en la linea 49 del archivo TESTS:\runtime\test_attribute_error.py.
    
       45:         return A()
       46: 
       47:     a = f()
       48:     try:
    -->49:         a.attr
                   ^^^^^^
       50:     except AttributeError as e:

            a:  <A object>
                defined in <function test_attribute_error.test_Generic_different_frame.<locals>.f>
        


Generic instance
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 67, in test_Generic_instance
        a.x
    AttributeError: 'A' object has no attribute 'x'
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Un objeto de tipo `a` no tiene ningún atributo llamado `x`.
    
    Excepción elevada en la linea 67 del archivo TESTS:\runtime\test_attribute_error.py.
    
       64:         pass
       65:     a = A()
       66:     try:
    -->67:         a.x
                   ^^^
       68:     except AttributeError as e:

            a:  <A object>
                defined in <function test_attribute_error.test_Generic_instance>
        


Module attribute typo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 144, in test_Module_attribute_typo
        math.cost
    AttributeError: module 'math' has no attribute 'cost'
    
        ¿Quieres decir `cos`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    En lugar de escribir `math.cost`, quizás quisiste escribir uno de los
    siguientes nombres que son atributos del módulo `math`:
    `cos, cosh`
    
    Excepción elevada en la linea 144 del archivo TESTS:\runtime\test_attribute_error.py.
    
       139:         assert "Did you mean `ascii_lowercase`" in result
       140: 
       141:     import math
       142: 
       143:     try:
    -->144:         math.cost
                    ^^^^^^^^^
       145:     except AttributeError as e:

            math:  <module math (builtin)>
        


Nonetype
~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 183, in test_Nonetype
        a.b
    AttributeError: 'NoneType' object has no attribute 'b'
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Está intentando acceder al atributo `b`
    de una variable cuyo valor es `None`.
    Excepción elevada en la linea 183 del archivo TESTS:\runtime\test_attribute_error.py.
    
       180: def test_Nonetype():
       181:     a = None
       182:     try:
    -->183:         a.b
                    ^^^
       184:     except AttributeError as e:

            a:  None
        


Object attribute typo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 83, in test_Object_attribute_typo
        a.appendh(4)
    AttributeError: 'list' object has no attribute 'appendh'
    
        ¿Quieres decir `append`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    El objeto `a` no tiene ningún atributo llamado `appendh`.
    Tal vez quiso escribir `a.append` en lugar de `a.appendh`
    
    Excepción elevada en la linea 83 del archivo TESTS:\runtime\test_attribute_error.py.
    
       79: def test_Object_attribute_typo():
       80:     #
       81:     try:
       82:         a = [1, 2, 3]
    -->83:         a.appendh(4)
                   ^^^^^^^^^
       84:     except AttributeError as e:

            a:  [1, 2, 3]
        


Perhaps comma
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 203, in test_Perhaps_comma
        a = [abcd
    AttributeError: 'str' object has no attribute 'defg'
    
        ¿Te refieres a separar los nombres de los objetos con una coma?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    `defg` no es un atributo de `abcd`.
    Sin embargo, tanto `abcd` como `defg` son objetos conocidos.
    Tal vez utilizaste un punto para separar estos dos objetos 
    en lugar de usar una coma.
    
    Excepción elevada en la linea 203 del archivo TESTS:\runtime\test_attribute_error.py.
    
       199:     defg = "world"
       200: 
       201:     # fmt: off
       202:     try:
    -->203:         a = [abcd
                         ^^^^
       204:         .defg]
                    ^^^^^
       205:     # fmt: on

            abcd:  'hello'
            defg:  'world'
        


Read only
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 280, in test_Read_only
        f.b = 1
    AttributeError: 'F' object attribute 'b' is read-only
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    El objeto `f` utiliza `__slots__` para indicar que atributos pueden
    cambiar. Puntualmente, el valor del atributo `f.b` no puede ser cambiado.
    The only attribute of `f` whose value can be changed is`a`.
    
    Excepción elevada en la linea 280 del archivo TESTS:\runtime\test_attribute_error.py.
    
       276:         b = 2
       277: 
       278:     f = F()
       279:     try:
    -->280:         f.b = 1
                    ^^^^^^^
       281:     except AttributeError as e:

            f:  <F object>
                defined in <function test_attribute_error.test_Read_only>
            f.b:  2
        


Shadow stdlib module
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 165, in test_Shadow_stdlib_module
        turtle.Pen
    AttributeError: module 'turtle' has no attribute 'Pen'
    
        ¿Has dado a tu programa el mismo nombre que un módulo de Python?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Importaste un modulo llamado`turtle` desde `TESTS:\turtle.py`.
    Pero también existe un modulo llamado `turtle` en la librería estándar de Python.
    Quizás debas cambiar el nombre de tu módulo.
    
    Excepción elevada en la linea 165 del archivo TESTS:\runtime\test_attribute_error.py.
    
       161: def test_Shadow_stdlib_module():
       162:     import turtle
       163: 
       164:     try:
    -->165:         turtle.Pen
                    ^^^^^^^^^^
       166:     except AttributeError as e:

            turtle:  <module turtle> from TESTS:\turtle.py
        


Tuple by accident
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 295, in test_Tuple_by_accident
        something.upper()
    AttributeError: 'tuple' object has no attribute 'upper'
    
        ¿Escribiste una coma por error?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    `something` es una tupla que contiene un único elemento
    que tiene `upper` como atributo.
    Tal vez haya añadido por error una coma al final de la línea
    donde definiste `something`.
    
    Excepción elevada en la linea 295 del archivo TESTS:\runtime\test_attribute_error.py.
    
       292: def test_Tuple_by_accident():
       293:     something = "abc",  # note trailing comma
       294:     try:
    -->295:         something.upper()
                    ^^^^^^^^^^^^^^^
       296:     except AttributeError as e:

            something:  ('abc',)
        


Use builtin
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 99, in test_Use_builtin
        a.length()
    AttributeError: 'list' object has no attribute 'length'
    
        ¿Te refieres a `len(a)`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    El objeto `a` no tiene ningún atributo llamado `length`.
    Tal vez pueda utilizar la función incorporada de Python `len` en su lugar:
    `len(a)`.
    Excepción elevada en la linea 99 del archivo TESTS:\runtime\test_attribute_error.py.
    
        95: def test_Use_builtin():
        96:     #
        97:     try:
        98:         a = [1, 2, 3]
    --> 99:         a.length()
                    ^^^^^^^^
       100:     except AttributeError as e:

            a:  [1, 2, 3]
        


Use join with str
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 339, in test_Use_join_with_str
        a = ['a', '2'].join('abc') + ['b', '3'].join('\n')
    AttributeError: 'list' object has no attribute 'join'
    
        ¿Te refieres a `'abc'.join(['a', '2'])`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    El objeto `['a', '2']` no tiene un atributo llamado `join`.
    Tal vez querías algo como `'abc'.join(['a', '2'])`.
    
    Excepción elevada en la linea 339 del archivo TESTS:\runtime\test_attribute_error.py.
    
       337: def test_Use_join_with_str():
       338:     try:
    -->339:         a = ['a', '2'].join('abc') + ['b', '3'].join('\n')
                        ^^^^^^^^^^^^^^^
       340:     except AttributeError as e:


Use synonym
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 115, in test_Use_synonym
        a.add(4)
    AttributeError: 'list' object has no attribute 'add'
    
        ¿Quieres decir `append`?
        
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    El objeto `a` no tiene ningún atributo llamado `add`.
    Sin embargo, `a` tiene los siguientes atributos con significados similares:
    `append, extend, insert`.
    
    Excepción elevada en la linea 115 del archivo TESTS:\runtime\test_attribute_error.py.
    
       111: def test_Use_synonym():
       112:     #
       113:     try:
       114:         a = [1, 2, 3]
    -->115:         a.add(4)
                    ^^^^^
       116:     except AttributeError as e:

            a:  [1, 2, 3]
        


Using slots
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 260, in test_Using_slots
        f.b = 1
    AttributeError: 'F' object has no attribute 'b'
    
    Un `AttributeError` ocurre cuando el código contiene algo como
        objeto.x
    y `x` no es un método o atributo (variable) perteneciente al `objeto`.
    
    Un objeto de tipo `f` no tiene ningún atributo llamado `b`.
    Tenga en cuenta que el objeto `f` utiliza `__slots__`
    que impide la creación de nuevos atributos.
    A continuación se detallan algunos de sus atributos conocidos:
    `a`.
    Excepción elevada en la linea 260 del archivo TESTS:\runtime\test_attribute_error.py.
    
       256:         __slots__ = ["a"]
       257: 
       258:     f = F()
       259:     try:
    -->260:         f.b = 1
                    ^^^^^^^
       261:     except AttributeError as e:

            f:  <F object>
                defined in <function test_attribute_error.test_Using_slots>
        


FileNotFoundError
-----------------


Directory not found
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 70, in test_Directory_not_found
        open("does_not_exist/file.txt")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist/file.txt'
    
    Una excepción `FileNotFoundError` indica que estas
    tratando de abrir un archivo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del archivo.
    
    En su programa, el nombre del archivo
    que no se puede encontrar es `file.txt`.
    does_not_exist
    no es un directorio valido.
    
    Excepción elevada en la linea 70 del archivo TESTS:\runtime\test_file_not_found_error.py.
    
       68: def test_Directory_not_found():
       69:     try:
    -->70:         open("does_not_exist/file.txt")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       71:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 7, in test_Filename_not_found
        open("does_not_exist")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist'
    
    Una excepción `FileNotFoundError` indica que estas
    tratando de abrir un archivo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del archivo.
    
    En su programa, el nombre del archivo
    que no se puede encontrar es `does_not_exist`.
    Se esperaba encontrarlo en el directorio
    directorio `C:\Users\Andre\github\friendly-traceback\tests`.
    No tengo información adicional para usted.
    
    Excepción elevada en la linea 7 del archivo TESTS:\runtime\test_file_not_found_error.py.
    
       5: def test_Filename_not_found():
       6:     try:
    -->7:         open("does_not_exist")
                  ^^^^^^^^^^^^^^^^^^^^^^
       8:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found 2
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 30, in test_Filename_not_found_2
        open("setupp.py")
    FileNotFoundError: [Errno 2] No such file or directory: 'setupp.py'
    
        ¿Quieres decir `setup.py`?
        
    Una excepción `FileNotFoundError` indica que estas
    tratando de abrir un archivo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del archivo.
    
    En su programa, el nombre del archivo
    que no se puede encontrar es `setupp.py`.
    Se esperaba encontrarlo en el directorio
    directorio `C:\Users\Andre\github\friendly-traceback`.
    El archivo `setup.py` tiene un nombre similar.
    
    Excepción elevada en la linea 30 del archivo TESTS:\runtime\test_file_not_found_error.py.
    
       26:     if chdir:
       27:         os.chdir("..")
       28: 
       29:     try:
    -->30:         open("setupp.py")
                   ^^^^^^^^^^^^^^^^^
       31:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found 3
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 52, in test_Filename_not_found_3
        open("setup.pyg")
    FileNotFoundError: [Errno 2] No such file or directory: 'setup.pyg'
    
        ¿Quieres decir `setup.py`?
        
    Una excepción `FileNotFoundError` indica que estas
    tratando de abrir un archivo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del archivo.
    
    En su programa, el nombre del archivo
    que no se puede encontrar es `setup.pyg`.
    Se esperaba encontrarlo en el directorio
    directorio `C:\Users\Andre\github\friendly-traceback`.
    Tal vez se refiera a uno de los siguientes archivos con nombres similares:
    `setup.py`, `setup.cfg`
    
    Excepción elevada en la linea 52 del archivo TESTS:\runtime\test_file_not_found_error.py.
    
       49:     if chdir:
       50:         os.chdir("..")
       51:     try:
    -->52:         open("setup.pyg")
                   ^^^^^^^^^^^^^^^^^
       53:     except FileNotFoundError as e:

            open:  <builtin function open>
        


ImportError
-----------


Simple import error
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 56, in test_Simple_import_error
        from math import Pi
    ImportError: cannot import name 'Pi' from 'math' (unknown location)
    
        ¿Quieres decir `pi`?
        
    Una excepción `ImportError` indica que un determinado objeto no pudo
    importarse de un módulo o paquete. La mayoría de las veces, esto se debe a que
    porque el nombre del objeto no está escrito correctamente.
    
    Tal vez quiso importar `pi` (de `math`) en lugar de `Pi`
    
    Excepción elevada en la linea 56 del archivo TESTS:\runtime\test_import_error.py.
    
       52:     multiple_import_on_same_line()
       53:     wrong_case()
       54: 
       55:     try:
    -->56:         from math import Pi
                   ^^^^^^^^^^^^^^^^^^^
       57:     except ImportError as e:


IndexError
----------


Assignment
~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 87, in test_Assignment
        a[13] = 1
    IndexError: list assignment index out of range
    
    Un `IndexError` se produce cuando se intenta obtener un elemento de una lista
    una tupla, o un objeto similar (secuencia), y utiliza un índice que
    no existe; normalmente, esto ocurre porque el índice que se da
    es mayor que la longitud de la secuencia.
    
    Ha intentado asignar un valor al índice `13` de `a`,
    una `list` de longitud `10`.
    Los valores de índice válidos de `a` son números enteros que van desde
    `-10` a `9`.
    
    Excepción elevada en la linea 87 del archivo TESTS:\runtime\test_index_error.py.
    
       83:         assert "You have tried to assign a value to index `1` of `b`," in result
       84:         assert "a `list` which contains no item." in result
       85: 
       86:     try:
    -->87:         a[13] = 1
                   ^^^^^^^^^
       88:     except IndexError as e:

            a:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        


Empty
~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 46, in test_Empty
        c = a[1]
    IndexError: list index out of range
    
        a`no contiene items.
        
    Un `IndexError` se produce cuando se intenta obtener un elemento de una lista
    una tupla, o un objeto similar (secuencia), y utiliza un índice que
    no existe; normalmente, esto ocurre porque el índice que se da
    es mayor que la longitud de la secuencia.
    
    Ha intentado obtener el elemento con índice `1` de `a`,
    una `list` que no contiene ningún elemento.
    
    Excepción elevada en la linea 46 del archivo TESTS:\runtime\test_index_error.py.
    
       43: def test_Empty():
       44:     a = []
       45:     try:
    -->46:         c = a[1]
                       ^^^^
       47:     except IndexError as e:

            a:  []
        


Long list
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 29, in test_Long_list
        print(a[60], b[0])
    IndexError: list index out of range
    
    Un `IndexError` se produce cuando se intenta obtener un elemento de una lista
    una tupla, o un objeto similar (secuencia), y utiliza un índice que
    no existe; normalmente, esto ocurre porque el índice que se da
    es mayor que la longitud de la secuencia.
    
    Ha intentado obtener el elemento con índice `60` de `a`,
    una `list` de longitud `40`.
    Los valores de índice válidos de `a` son números enteros que van desde
    `-40` a `39`.
    
    Excepción elevada en la linea 29 del archivo TESTS:\runtime\test_index_error.py.
    
       26:     a = list(range(40))
       27:     b = tuple(range(50))
       28:     try:
    -->29:         print(a[60], b[0])
                         ^^^^^
       30:     except IndexError as e:

            a:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...]
                len(a): 40
        
        


Short tuple
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 10, in test_Short_tuple
        print(a[3], b[2])
    IndexError: tuple index out of range
    
        Recuerda: el primer elemento de una `tuple` no está en la posición 1 sino en la número 0.
        
    Un `IndexError` se produce cuando se intenta obtener un elemento de una lista
    una tupla, o un objeto similar (secuencia), y utiliza un índice que
    no existe; normalmente, esto ocurre porque el índice que se da
    es mayor que la longitud de la secuencia.
    
    Ha intentado obtener el elemento con índice `3` de `a`,
    una `tuple` de longitud `3`.
    Los valores de índice válidos de `a` son números enteros que van desde
    `-3` a `2`.
    
    Excepción elevada en la linea 10 del archivo TESTS:\runtime\test_index_error.py.
    
        7:     a = (1, 2, 3)
        8:     b = [1, 2, 3]
        9:     try:
    -->10:         print(a[3], b[2])
                         ^^^^
       11:     except IndexError as e:

            a:  (1, 2, 3)
        


KeyError
--------


ChainMap
~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\collections\__init__.py", line 1008, in pop
        return self.maps[0].pop(key, *args)
    KeyError: 42
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 62, in test_ChainMap
        d.pop(42)
    KeyError: 'Key not found in the first mapping: 42'
    
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    La clave `42` no se encuentra en `d`, un objeto de tipo `ChainMap`.
    
    Excepción elevada en la linea 62 del archivo TESTS:\runtime\test_key_error.py.
    
       59:     from collections import ChainMap
       60:     d = ChainMap({}, {})
       61:     try:
    -->62:         d.pop(42)
                   ^^^^^^^^^
       63:     except KeyError as e:

            d:  ChainMap({}, {})
            d.pop:  <bound method ChainMap.pop> of ChainMap({}, {})
        


Forgot to convert to string
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 115, in test_Forgot_to_convert_to_string
        print(squares[2])
    KeyError: 2
    
        ¿Olvidaste convertir `2` en una cadena?
        
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    La clave `2` no se encuentra en el dict `squares`.
    `squares` contiene una clave de cadena que es idéntica a `str(2)`.
    Tal vez te olvidaste de convertir la clave en una cadena.
    
    Excepción elevada en la linea 115 del archivo TESTS:\runtime\test_key_error.py.
    
       112: def test_Forgot_to_convert_to_string():
       113:     squares = {"1": 1, "2": 4, "3": 9}
       114:     try:
    -->115:         print(squares[2])
                          ^^^^^^^^^^
       116:     except KeyError as e:

            squares:  {'1': 1, '2': 4, '3': 9}
        


Generic key error
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 44, in test_Generic_key_error
        d["c"]
    KeyError: 'c'
    
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    La clave `'c'` no se encuentra en el dict `d`.
    
    Excepción elevada en la linea 44 del archivo TESTS:\runtime\test_key_error.py.
    
       41: def test_Generic_key_error():
       42:     d = {"a": 1, "b": 2}
       43:     try:
    -->44:         d["c"]
                   ^^^^^^
       45:     except KeyError as e:

            d:  {'a': 1, 'b': 2}
        


Popitem empty ChainMap
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\collections\__init__.py", line 1001, in popitem
        return self.maps[0].popitem()
    KeyError: 'popitem(): dictionary is empty'
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 26, in test_Popitem_empty_ChainMap
        alpha.popitem()
    KeyError: 'No keys found in the first mapping.'
    
        `alpha` es un `ChainMap` vacío.
        
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    Has intentado recuperar un elemento de `alpha` que es un `ChainMap` vacío.
    
    Excepción elevada en la linea 26 del archivo TESTS:\runtime\test_key_error.py.
    
       23:     from collections import ChainMap
       24:     alpha = ChainMap({}, {})
       25:     try:
    -->26:         alpha.popitem()
                   ^^^^^^^^^^^^^^^
       27:     except KeyError as e:

            alpha:  ChainMap({}, {})
            alpha.popitem:  <bound method ChainMap.popitem> of ChainMap({}, {})
        


Popitem empty dict
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 8, in test_Popitem_empty_dict
        d.popitem()
    KeyError: 'popitem(): dictionary is empty'
    
        `d` es un `dict` vacío.
        
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    Has intentado recuperar un elemento de d` que es un `dict` vacío.
    
    Excepción elevada en la linea 8 del archivo TESTS:\runtime\test_key_error.py.
    
       5: def test_Popitem_empty_dict():
       6:     d = {}
       7:     try:
    -->8:         d.popitem()
                  ^^^^^^^^^^^
       9:     except KeyError as e:

            d:  {}
            d.popitem:  <builtin method popitem of dict object>
        


Similar names
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 145, in test_Similar_names
        a = second["alpha"]
    KeyError: 'alpha'
    
        ¿Quieres decir `'alpha0'`?
        
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    La clave `'alpha'` no se encuentra en el dict `second`.
    `second` tiene algunas claves similares a `'alpha'` incluyendo:
    `'alpha0', 'alpha11', 'alpha12'`.
    
    Excepción elevada en la linea 145 del archivo TESTS:\runtime\test_key_error.py.
    
       141:         assert ok, diff
       142: 
       143:     second = {"alpha0": 1, "alpha11": 2, "alpha12": 3}
       144:     try:
    -->145:         a = second["alpha"]
                        ^^^^^^^^^^^^^^^
       146:     except KeyError as e:

            second:  {'alpha0': 1, 'alpha11': 2, 'alpha12': 3}
        


String by mistake
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 98, in test_String_by_mistake
        d["(0, 0)"]
    KeyError: '(0, 0)'
    
        ¿Has convertido `(0, 0)` en una cadena por error?
        
    Se produce un `KeyError` cuando no se encuentra un valor como llave
    en un dict de Python o en un objeto similar.
    
    La clave `'(0, 0)'` no se encuentra en el dict `d`.
    `'(0, 0)'` es una cadena.
    Existe una clave de `d` cuya representación en cadena
    es idéntica a `'(0, 0)'`.
    
    Excepción elevada en la linea 98 del archivo TESTS:\runtime\test_key_error.py.
    
       94:     chain_map_string_by_mistake()  # do not show in docs
       95: 
       96:     d = {(0, 0): "origin"}
       97:     try:
    -->98:         d["(0, 0)"]
                   ^^^^^^^^^^^
       99:     except KeyError as e:

            d:  {(0, 0): 'origin'}
        


LookupError
-----------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_lookup_error.py", line 10, in test_Generic
        raise LookupError("Fake message")
    LookupError: Fake message
    
    `LookupError` es la clase base para las excepciones que se producen
    cuando una clave o índice utilizado en un mapeo o secuencia no es válido.
    También puede ser elevada directamente por codecs.lookup().
    
    Excepción elevada en la linea 10 del archivo TESTS:\runtime\test_lookup_error.py.
    
        4: def test_Generic():
        5:     try:
        6:         # LookupError is the base class for KeyError and IndexError.
        7:         # It should normally not be raised by user code,
        8:         # other than possibly codecs.lookup(), which is why we raise
        9:         # it directly here for our example.
    -->10:         raise LookupError("Fake message")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       11:     except LookupError as e:

            LookupError:  <class LookupError>
        


ModuleNotFoundError
-------------------


Need to install module
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 76, in test_Need_to_install_module
        import alphabet
    ModuleNotFoundError: No module named 'alphabet'
    
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    No se puede importar el módulo llamado `alphabet`.
    Tal vez sea necesario instalarlo.
    
    Excepción elevada en la linea 76 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       74: def test_Need_to_install_module():
       75:     try:
    -->76:         import alphabet
                   ^^^^^^^^^^^^^^^
       77:     except ModuleNotFoundError as e:


Not a package
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 22, in test_Not_a_package
        import os.xxx
    ModuleNotFoundError: No module named 'os.xxx'; 'os' is not a package
    
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    `xxx` no puede ser importado desde `os`.
    
    Excepción elevada en la linea 22 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       19: def test_Not_a_package():
       20: 
       21:     try:
    -->22:         import os.xxx
                   ^^^^^^^^^^^^^
       23:     except ModuleNotFoundError as e:


Not a package similar name
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 36, in test_Not_a_package_similar_name
        import os.pathh
    ModuleNotFoundError: No module named 'os.pathh'; 'os' is not a package
    
        ¿Quieres decir `import os.path`?
        
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    Tal vez se refiera a `importar os.path`.
    `path` es un nombre similar a `pathh` y es un módulo que
    puede ser importado desde `os`.
    
    Excepción elevada en la linea 36 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       34: def test_Not_a_package_similar_name():
       35:     try:
    -->36:         import os.pathh
                   ^^^^^^^^^^^^^^^
       37:     except ModuleNotFoundError as e:


Object not module
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 49, in test_Object_not_module
        import os.open
    ModuleNotFoundError: No module named 'os.open'; 'os' is not a package
    
        ¿Quieres decir `from os import open`?
        
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    `open` no es un módulo independiente, sino un objeto que forma parte de `os`.
    
    Excepción elevada en la linea 49 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       47: def test_Object_not_module():
       48:     try:
    -->49:         import os.open
                   ^^^^^^^^^^^^^^
       50:     except ModuleNotFoundError as e:

            open:  <builtin function open>
        


Similar object not module
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 62, in test_Similar_object_not_module
        import os.opend
    ModuleNotFoundError: No module named 'os.opend'; 'os' is not a package
    
        ¿Quieres decir `from os import open`?
        
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    Tal vez quieras decir `from os import open`.
    `open` es un nombre similar a `opend` y es un objeto que
    puede ser importado desde `os`.
    Otros objetos con nombres similares que forman parte de
    `os` incluyen a `popen`.
    
    Excepción elevada en la linea 62 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       60: def test_Similar_object_not_module():
       61:     try:
    -->62:         import os.opend
                   ^^^^^^^^^^^^^^^
       63:     except ModuleNotFoundError as e:


Standard library module
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 7, in test_Standard_library_module
        import Tkinter
    ModuleNotFoundError: No module named 'Tkinter'
    
        ¿Quieres decir `tkinter`?
        
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    No se puede importar el módulo llamado `Tkinter`.
    Tal vez sea necesario instalarlo.
    `tkinter` es un módulo existente que tiene un nombre similar.
    
    Excepción elevada en la linea 7 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       5: def test_Standard_library_module():
       6:     try:
    -->7:         import Tkinter
                  ^^^^^^^^^^^^^^
       8:     except ModuleNotFoundError as e:


no curses
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 92, in test_no_curses
        import curses
    ModuleNotFoundError: No module named '_curses'
    
        El módulo curses rara vez se instala con Python en Windows.
        
    Una excepción `ModuleNotFoundError` indica que estás
    está tratando de importar un módulo que no puede ser encontrado por Python.
    Esto puede deberse a que has escrito mal el nombre del módulo
    o porque no está instalado en tu computadora.
    
    Ha intentado importar el módulo curses.
    El módulo curses rara vez se instala con Python en Windows.
    
    Excepción elevada en la linea 92 del archivo TESTS:\runtime\test_module_not_found_error.py.
    
       90:     def test_no_curses():
       91:         try:
    -->92:             import curses
                       ^^^^^^^^^^^^^
       93:         except ModuleNotFoundError as e:


NameError
---------


Annotated variable
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 25, in test_Annotated_variable
        y = x
    NameError: name 'x' is not defined
    
        ¿Ha utilizado dos puntos en lugar del signo de igualdad?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    En su programa, no existe ningún objeto con el nombre `x`.
    Se ha encontrado un type hint para `x` en el ámbito global.
    Tal vez haya utilizado dos puntos en lugar de un signo de igualdad y haya escrito
    
        x : 3
    
    en lugar de
    
        x = 3
    
    Excepción elevada en la linea 25 del archivo TESTS:\runtime\test_name_error.py.
    
       23: def test_Annotated_variable():
       24:     try:
    -->25:         y = x
                       ^
       26:     except NameError as e:


Custom name
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 193, in test_Custom_name
        python
    NameError: name 'python' is not defined
    
        ¡Ya estás usando Python!
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    ¡Ya estás usando Python!
    Excepción elevada en la linea 193 del archivo TESTS:\runtime\test_name_error.py.
    
       191: def test_Custom_name():
       192:     try:
    -->193:         python
                    ^^^^^^
       194:     except NameError as e:


Free variable referenced
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 177, in test_Free_variable_referenced
        outer()
      File "TESTS:\runtime\test_name_error.py", line 173, in outer
        inner()
      File "TESTS:\runtime\test_name_error.py", line 172, in inner
        return var
    NameError: free variable 'var' referenced before assignment in enclosing scope
    
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    En tu programa, `var` es un nombre desconocido
    que existe en un ámbito de aplicación
    pero aún no se le ha asignado un valor.
    
    La ejecución se detuvo en la linea 177 del archivo TESTS:\runtime\test_name_error.py.
    
       173:         inner()
       174:         var = 4
       175: 
       176:     try:
    -->177:         outer()
                    ^^^^^^^
       178:     except NameError as e:

            outer:  <function outer>
                defined in <function test_Free_variable_referenced>
        
    Excepción elevada en la linea 172 del archivo TESTS:\runtime\test_name_error.py.
    
       171:         def inner():
    -->172:             return var
                               ^^^


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 10, in test_Generic
        this = something
    NameError: name 'something' is not defined
    
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    En su programa, no existe ningún objeto con el nombre `something`.
    No tengo información adicional para usted.
    
    Excepción elevada en la linea 10 del archivo TESTS:\runtime\test_name_error.py.
    
        8: def test_Generic():
        9:     try:
    -->10:         this = something
                          ^^^^^^^^^
       11:     except NameError as e:


Missing import
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 130, in test_Missing_import
        unicodedata.something
    NameError: name 'unicodedata' is not defined
    
        ¿Olvidaste importar `unicodedata`?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    
    El nombre `unicodedata` no está definido en su programa.
    Tal vez se olvidó de importar `unicodedata` que se encuentra
    en la biblioteca estándar de Python.
    
    `unicodedata` es un nombre que se encuentra en el módulo `stringprep`.
    Tal vez haya olvidado escribir
    
        from stringprep import unicodedata
    
    Excepción elevada en la linea 130 del archivo TESTS:\runtime\test_name_error.py.
    
       126:     if friendly_traceback.get_lang() == "en":
       127:         assert "I have no additional information for you." in result
       128: 
       129:     try:
    -->130:         unicodedata.something
                    ^^^^^^^^^^^
       131:     except NameError as e:


Missing module name
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 277, in test_Missing_module_name
        frame = Frame()
    NameError: name 'Frame' is not defined
    
        ¿Has olvidado añadir `tkinter.`?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    En su programa, no existe ningún objeto con el nombre `Frame`.
    
    El objeto local `tkinter`
    tiene un atributo llamado `Frame`.
    Quizás deberías haber escrito `tkinter.Frame`
    en lugar de `Frame`.
    
    `Frame` es un nombre que se encuentra en los siguientes módulos de la biblioteca estándar:
    tkinter, tracemalloc.
    Tal vez hayas olvidado importar `Frame` de uno de estos módulos.
    
    Excepción elevada en la linea 277 del archivo TESTS:\runtime\test_name_error.py.
    
       274: def test_Missing_module_name():
       275:     import tkinter
       276:     try:
    -->277:         frame = Frame()
                            ^^^^^
       278:     except NameError as e:


Missing self 1
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 228, in test_Missing_self_1
        str(a)
      File "TESTS:\runtime\test_name_error.py", line 219, in __str__
        toys_list = add_toy(  # ensure that it can see 'self' on following line
    NameError: name 'add_toy' is not defined
    
        ¿Escribiste `self` en el lugar equivocado?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    En su programa, no existe ningún objeto con el nombre `add_toy`.
    
    El objeto local `<Pet object> defined in <function test_name_error.test_Missing_self_1>`
    tiene un atributo llamado `add_toy`.
    Quizás deberías haber escrito `self.add_toy(...`
    en lugar de `add_toy(self, ...`.
    
    La ejecución se detuvo en la linea 228 del archivo TESTS:\runtime\test_name_error.py.
    
       224:                 return "{} has no toys".format(self.name)
       225: 
       226:     a = Pet('Fido')
       227:     try:
    -->228:         str(a)
                    ^^^^^^
       229:     except NameError as e:

            a:  <Pet object>
                defined in <function test_name_error.test_Missing_self_1>
            str:  <class str>
        
    Excepción elevada en la linea 219 del archivo TESTS:\runtime\test_name_error.py.
    
       217:         def __str__(self):
       218:             # self at the wrong place
    -->219:             toys_list = add_toy(  # ensure that it can see 'self' on following line
                                    ^^^^^^^
       220:                                 self, 'something')
       221:             if self.toys:


Missing self 2
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 262, in test_Missing_self_2
        str(a)
      File "TESTS:\runtime\test_name_error.py", line 254, in __str__
        toys_list = add_toy('something')
    NameError: name 'add_toy' is not defined
    
        ¿Has olvidado añadir `self.`?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    En su programa, no existe ningún objeto con el nombre `add_toy`.
    
    Un objeto de local, `<Pet object> defined in <function test_name_error.test_Missing_self_2>`,
    tiene un atributo llamado `add_toy`.
    Tal vez deberías haber escrito `self.add_toy`
    en lugar de `add_toy`.
    
    La ejecución se detuvo en la linea 262 del archivo TESTS:\runtime\test_name_error.py.
    
       258:                 return "{} has no toys".format(self.name)
       259: 
       260:     a = Pet('Fido')
       261:     try:
    -->262:         str(a)
                    ^^^^^^
       263:     except NameError as e:

            a:  <Pet object>
                defined in <function test_name_error.test_Missing_self_2>
            str:  <class str>
        
    Excepción elevada en la linea 254 del archivo TESTS:\runtime\test_name_error.py.
    
       252:         def __str__(self):
       253:             # Missing self.
    -->254:             toys_list = add_toy('something')
                                    ^^^^^^^
       255:             if self.toys:


Synonym
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 90, in test_Synonym
        cost  # wrote from math import * above
    NameError: name 'cost' is not defined
    
        ¿Quieres decir `cos`?
        
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    En su programa, no existe ningún objeto con el nombre `cost`.
    En lugar de escribir `cost`, tal vez quiso decir uno de los siguientes:
    *   alcance global: `cos`, `cosh`
    
    Excepción elevada en la linea 90 del archivo TESTS:\runtime\test_name_error.py.
    
       86:     if friendly_traceback.get_lang() == "en":
       87:         assert "The Python builtin `chr` has a similar name." in result
       88: 
       89:     try:
    -->90:         cost  # wrote from math import * above
                   ^^^^
       91:     except NameError as e:


missing import2
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 144, in test_missing_import2
        ABCMeta
    NameError: name 'ABCMeta' is not defined
    
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    En su programa, no existe ningún objeto con el nombre `ABCMeta`.
    `ABCMeta` es un nombre que se encuentra en los siguientes módulos de la biblioteca estándar:
    abc, numbers, selectors, typing.
    Tal vez hayas olvidado importar `ABCMeta` de uno de estos módulos.
    
    Excepción elevada en la linea 144 del archivo TESTS:\runtime\test_name_error.py.
    
       142: def test_missing_import2():
       143:     try:
    -->144:         ABCMeta
                    ^^^^^^^
       145:     except NameError as e:


missing import3
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 158, in test_missing_import3
        AF_APPLETALK
    NameError: name 'AF_APPLETALK' is not defined
    
    Una excepción `NameError` indica que una variable o
    nombre de función no es conocido por Python.
    La mayoría de las veces, esto se debe a un error ortográfico.
    Sin embargo, a veces es porque el nombre se utiliza
    antes de ser definido o de recibir un valor.
    
    En su programa, no existe ningún objeto con el nombre `AF_APPLETALK`.
    `AF_APPLETALK` es un nombre que se encuentra en el módulo `socket`.
    Tal vez haya olvidado escribir
    
        from socket import AF_APPLETALK
    
    Excepción elevada en la linea 158 del archivo TESTS:\runtime\test_name_error.py.
    
       156: def test_missing_import3():
       157:     try:
    -->158:         AF_APPLETALK
                    ^^^^^^^^^^^^
       159:     except NameError as e:


OsError
-------


Urllib error
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\urllib\request.py", line 1346, in do_open
           ... Más lineas no mostradas. ...
      File "PYTHON_LIB:\socket.py", line 823, in create_connection
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
      File "PYTHON_LIB:\socket.py", line 954, in getaddrinfo
        for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
    socket.gaierror: [Errno 11001] getaddrinfo failed
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 8, in test_Urllib_error
        request.urlopen("http://does_not_exist")
    URLError: <urlopen error [Errno 11001] getaddrinfo failed>
    
    Una excepción del tipo `URLError` es subclase de `OSError`.
    El sistema operativo suele lanzar una excepción `OSError` para indicar que una operación
    para indicar que una operación no está permitida o que
    un recurso no está disponible.
    
    Sospecho que está intentando conectarse a un servidor y
    que no se puede realizar la conexión.
    
    Si ese es el caso, verifique que la URL sea correcta
    y compruebe su conectividad a Internet.
    
    Excepción elevada en la linea 8 del archivo TESTS:\runtime\test_os_error.py.
    
       5: def test_Urllib_error():
       6:     from urllib import request, error
       7:     try:
    -->8:         request.urlopen("http://does_not_exist")
                  ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       9:     except error.URLError as e:

            request:  <module urllib.request> from PYTHON_LIB:\urllib\request.py
            request.urlopen:  <function urlopen>
        


invalid argument
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 46, in test_invalid_argument
        open("c:\test.txt")
    OSError: [Errno 22] Invalid argument: 'c:\test.txt'
    
        Tal vez sea necesario duplicar las barras invertidas.
        
    El sistema operativo suele lanzar una excepción `OSError` para indicar que una operación
    para indicar que una operación no está permitida o que
    un recurso no está disponible.
    
    Sospecho que ha escrito un nombre de archivo o ruta que contiene
    por lo menos un carácter de barra invertida, `\`.
    Python probablemente interpretó esto como el comienzo de
    lo que se conoce como una secuencia de escape.
    Para resolver el problema, escriba la llamada 'cadena cruda'
    añadiendo la letra `r` como prefijo delante
    delante del nombre del archivo o de la ruta, o reemplazar todas las barras invertidas
    simples, "barra invertida", por otras dobles: `\\`.
    
    Excepción elevada en la linea 46 del archivo TESTS:\runtime\test_os_error.py.
    
       43:     if os.name != "nt":
       44:         return "Windows test only", "No result"
       45:     try:
    -->46:         open("c:\test.txt")
                   ^^^^^^^^^^^^^^^^^^^
       47:     except OSError as e:

            open:  <builtin function open>
        


no information
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 27, in test_no_information
        raise OSError("Some unknown message")
    OSError: Some unknown message
    
        Friendly-traceback no conoce la causa de este error.
        
    El sistema operativo suele lanzar una excepción `OSError` para indicar que una operación
    para indicar que una operación no está permitida o que
    un recurso no está disponible.
    
    No se conoce ninguna información sobre esta excepción.
    Por favor, informe de este ejemplo a
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    Si está utilizando un REPL, utilice `www('bug')` para hacerlo.
    
    Si está utilizando la consola Friendly, utilice `www()` para
    hacer una búsqueda en Internet para este caso en particular.
    
    Excepción elevada en la linea 27 del archivo TESTS:\runtime\test_os_error.py.
    
       24:     old_debug = friendly_traceback.debug_helper.DEBUG
       25:     friendly_traceback.debug_helper.DEBUG = False
       26:     try:
    -->27:         raise OSError("Some unknown message")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       28:     except OSError as e:

            OSError:  <class OSError>
        


OverflowError
-------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 6, in test_Generic
        2.0 ** 1600
    OverflowError: (34, 'Result too large')
    
    Se produce un `OverflowError` cuando el resultado de una operación aritmética
    es demasiado grande para ser manejado por el procesador del ordenador.
    
    Excepción elevada en la linea 6 del archivo TESTS:\runtime\test_overflow_error.py.
    
       4: def test_Generic():
       5:     try:
    -->6:         2.0 ** 1600
                  ^^^^^^^^^^^
       7:     except OverflowError as e:


Huge lenght
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 24, in test_Huge_lenght
        len(huge)
    OverflowError: Python int too large to convert to C ssize_t
    
    Se produce un `OverflowError` cuando el resultado de una operación aritmética
    es demasiado grande para ser manejado por el procesador del ordenador.
    
    Excepción elevada en la linea 24 del archivo TESTS:\runtime\test_overflow_error.py.
    
       21: def test_Huge_lenght():
       22:     huge = range(1<<10000)
       23:     try:
    -->24:         len(huge)
                   ^^^^^^^^^
       25:     except OverflowError as e:

            huge:  range(0, ...)
                   len(huge): Objeto demasiado grande para ser procesado por Python.
        
            len:  <builtin function len>
        


RecursionError
--------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_recursion_error.py", line 8, in test_Generic
        a()
           ... Más lineas no mostradas. ...
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
    RecursionError: maximum recursion depth exceeded
    
    Un `RecursionError` se levanta cuando una función se llama a sí misma
    directa o indirectamente, demasiadas veces.
    Casi siempre indica que has cometido un error en tu código
    y que su programa nunca se detendrá.
    
    La ejecución se detuvo en la linea 8 del archivo TESTS:\runtime\test_recursion_error.py.
    
       5:     def a():
       6:         return a()
       7:     try:
    -->8:         a()
                  ^^^
       9:     except RecursionError as e:

            a:  <function a> defined in <function test_Generic>
        
    Excepción elevada en la linea 6 del archivo TESTS:\runtime\test_recursion_error.py.
    
       5:     def a():
    -->6:         return a()
                         ^^^

            a:  <function a> defined in <function test_Generic>
        


TypeError
---------


Bad type for unary operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 398, in test_Bad_type_for_unary_operator
        a =+ "def"
    TypeError: bad operand type for unary +: 'str'
    
        Tal vez quiso escribir `+=` en lugar de `=+`
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Has intentado utilizar el operador unario '+'
    con el siguiente tipo de objeto un string (`str`).
    La operación no está definida para este tipo de objeto.
    
    Tal vez quiso escribir `+=` en lugar de `=+`
    
    Excepción elevada en la linea 398 del archivo TESTS:\runtime\test_type_error.py.
    
       393:         assert "You tried to use the unary operator '~'" in result
       394: 
       395:     try:
       396:         # fmt: off
       397:         a = "abc"
    -->398:         a =+ "def"
                       ^^^^^^^
       399:         # fmt: on


Builtin has no len
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 830, in test_Builtin_has_no_len
        len("Hello world".split)
    TypeError: object of type 'builtin_function_or_method' has no len()
    
        ¿Olvidaste llamar a `"Hello world".split`?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Sospecho que has olvidado añadir paréntesis para llamar a `"Hello world".split`.
    Puede que hayas querido escribir:
    `len("Hello world".split())`
    
    Excepción elevada en la linea 830 del archivo TESTS:\runtime\test_type_error.py.
    
       828: def test_Builtin_has_no_len():
       829:     try:
    -->830:         len("Hello world".split)
                    ^^^^^^^^^^^^^^^^^^^^^^^^
       831:     except TypeError as e:

            len:  <builtin function len>
            "Hello world".split:  <builtin method split of str object>
        


Can only concatenate
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 39, in test_Can_only_concatenate
        result = a_tuple + a_list
    TypeError: can only concatenate tuple (not "list") to tuple
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Has intentado concatenar (sumar) dos tipos de objetos diferentes:
    `una `tuple`` y `una `list``.
    
    Excepción elevada en la linea 39 del archivo TESTS:\runtime\test_type_error.py.
    
       36:     try:
       37:         a_tuple = (1, 2, 3)
       38:         a_list = [1, 2, 3]
    -->39:         result = a_tuple + a_list
                            ^^^^^^^^^^^^^^^^
       40:     except TypeError as e:

            a_list:  [1, 2, 3]
            a_tuple:  (1, 2, 3)
        


Cannot convert dictionary update sequence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 816, in test_Cannot_convert_dictionary_update_sequence
        dd.update([1, 2, 3])
    TypeError: cannot convert dictionary update sequence element #0 to a sequence
    
        Tal vez necesite utilizar el método `dict.fromkeys()`.
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    `dict.update()` no acepta una secuencia como argumento.
    En lugar de escribir `dd.update([1, 2, 3])`
    tal vez debería utilizar el método `dict.fromkeys()`: `dd.update( dict.fromkeys([1, 2, 3]) )`.
    
    Excepción elevada en la linea 816 del archivo TESTS:\runtime\test_type_error.py.
    
       812:         assert "you should use the `dict.fromkeys()`" in result
       813: 
       814:     dd = {"a": "a"}
       815:     try:
    -->816:         dd.update([1, 2, 3])
                    ^^^^^^^^^^^^^^^^^^^^
       817:     except TypeError as e:

            dd:  {'a': 'a'}
            dd.update:  <builtin method update of dict object>
        


Cannot multiply by non int
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 614, in test_Cannot_multiply_by_non_int
        "a" * "2"
    TypeError: can't multiply sequence by non-int of type 'str'
    
        ¿Olvidaste convertir `"2"` en un número entero?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Sólo se pueden multiplicar secuencias, como listas, tuplas
    cadenas, etc., por enteros.
    Tal vez hayas olvidado convertir `"2"` en un número entero.
    
    Excepción elevada en la linea 614 del archivo TESTS:\runtime\test_type_error.py.
    
       610:     if friendly_traceback.get_lang() == "en":
       611:         assert "Did you forget to convert `c` into an integer?" in result
       612: 
       613:     try:
    -->614:         "a" * "2"
                    ^^^^^^^^^
       615:     except TypeError as e:


Cannot unpack non iterable object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 788, in test_Cannot_unpack_non_iterable_object
        a, b = 42.0
    TypeError: cannot unpack non-iterable float object
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    El desempaquetado es una forma conveniente de asignar un nombre
    a cada elemento de un iterable.
    Un iterable es un objeto capaz de devolver sus miembros de uno en uno.
    Los contenedores de Python (`list, tuple, dict`, etc.) son iterables,
    pero no objetos de tipo `float`.
    
    Excepción elevada en la linea 788 del archivo TESTS:\runtime\test_type_error.py.
    
       786: def test_Cannot_unpack_non_iterable_object():
       787:     try:
    -->788:         a, b = 42.0
                    ^^^^^^^^^^^
       789:     except TypeError as e:


Comparison not supported
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 347, in test_Comparison_not_supported
        b >= a
    TypeError: '>=' not supported between instances of 'int' and 'str'
    
        ¿Has olvidado convertir el string `a` al tipo un número entero (`int`)?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Has intentado hacer una comparación de orden (>=)
    entre dos tipos de objetos incompatibles:
    `un número entero (`int`)` y `un string (`str`)`.
    Tal vez haya olvidado convertir la cadena `a` en un número entero (`int`).
    
    Excepción elevada en la linea 347 del archivo TESTS:\runtime\test_type_error.py.
    
       344:     try:
       345:         a = "2"
       346:         b = 42
    -->347:         b >= a
                    ^^^^^^
       348:     except TypeError as e:

            a:  '2'
            b:  42
        


Derive from BaseException
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 557, in test_Derive_from_BaseException
        raise "exception"  # noqa
    TypeError: exceptions must derive from BaseException
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    En Python 3, las excepciones deben derivarse de `BaseException`.
    
    Excepción elevada en la linea 557 del archivo TESTS:\runtime\test_type_error.py.
    
       555: def test_Derive_from_BaseException():
       556:     try:
    -->557:         raise "exception"  # noqa
                    ^^^^^^^^^^^^^^^^^
       558:     except TypeError as e:


Indices must be integers or slices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 696, in test_Indices_must_be_integers_or_slices
        [1, 2, 3]["2"]
    TypeError: list indices must be integers or slices, not str
    
        ¿Olvidaste convertir `"2"` en un número entero?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    En la expresión `[1, 2, 3]["2"]`
    lo que se incluye entre los corchetes, `[...]`,
    debe ser un número entero o un slice
    (`inicio:parada` o `inicio:parada:paso`)
    y se ha utilizado un string (`str`) en su lugar.
    
    Tal vez hayas olvidado convertir `"2"` en un número entero.
    
    Excepción elevada en la linea 696 del archivo TESTS:\runtime\test_type_error.py.
    
       692:     if friendly_traceback.get_lang() == "en":
       693:         assert "Perhaps you forgot to convert `2.0` into an integer." in result
       694: 
       695:     try:
    -->696:         [1, 2, 3]["2"]
                    ^^^^^^^^^^^^^^
       697:     except TypeError as e:


Not an integer
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 659, in test_Not_an_integer
        range(c, d)
    TypeError: 'str' object cannot be interpreted as an integer
    
        ¿Olvidaste convertir `c, d` en enteros?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Has escrito un objeto de tipo `str` donde se esperaba un entero.
    Tal vez olvidó convertir `c, d` en enteros.
    Excepción elevada en la linea 659 del archivo TESTS:\runtime\test_type_error.py.
    
       655:         assert "Perhaps you forgot to convert `1.0" in result
       656: 
       657:     c, d = "2", "3"
       658:     try:
    -->659:         range(c, d)
                    ^^^^^^^^^^^
       660:     except TypeError as e:

            c:  '2'
            d:  '3'
            range:  <class range>
        


Not callable
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 541, in test_Not_callable
        _ = [1, 2](a + b)
    TypeError: 'list' object is not callable
    
        ¿Quiere decir `[1, 2][a + b]`?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Debido a los paréntesis que lo rodean, `(a + b)` 
    es interpretado por Python como una llamada a una función para 
    `[1, 2]`, que es un objeto de tipo `list`
    que no puede ser llamado.
    
    Sin embargo, `[1, 2]` es una secuencia.
    Tal vez usted quería usar `[]` en lugar de `()` y escribir
    `[1, 2][a + b]`
    
    Excepción elevada en la linea 541 del archivo TESTS:\runtime\test_type_error.py.
    
       537:         assert "b.a_list[3]" in result
       538: 
       539:     try:
       540:         a, b = 3, 7
    -->541:         _ = [1, 2](a + b)
                        ^^^^^^^^^^^^^
       542:     except TypeError as e:

            a:  3
            b:  7
            a + b:  10
        


Object is not iterable
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 774, in test_Object_is_not_iterable
        list(42)
    TypeError: 'int' object is not iterable
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Un iterable es un objeto capaz de devolver sus miembros de uno en uno.
    Los contenedores de Python (`lista, tupla, dict`, etc.) son iterables.
    Aquí se requiere un iterable.
    
    Excepción elevada en la linea 774 del archivo TESTS:\runtime\test_type_error.py.
    
       772: def test_Object_is_not_iterable():
       773:     try:
    -->774:         list(42)
                    ^^^^^^^^
       775:     except TypeError as e:

            list:  <class list>
        


Object is not subscriptable
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 757, in test_Object_is_not_subscriptable
        a = f[1]
    TypeError: 'function' object is not subscriptable
    
        ¿Quieres decir `f(1)`?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Los objetos subscribibles son típicamente contenedores de los cuales
    se puede recuperar un elemento utilizando la notación `[...]`.
    
    Tal vez quiso escribir `f(1)`.
    
    Excepción elevada en la linea 757 del archivo TESTS:\runtime\test_type_error.py.
    
       753:     def f():
       754:         pass
       755: 
       756:     try:
    -->757:         a = f[1]
                        ^^^^
       758:     except TypeError as e:

            f:  <function f>
                defined in <function test_Object_is_not_subscriptable>
        


Slice indices must be integers or None
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 710, in test_Slice_indices_must_be_integers_or_None
        [1, 2, 3][1.0:2.0]
    TypeError: slice indices must be integers or None or have an __index__ method
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Cuando se utiliza un slice para extraer un rango de elementos
    de una secuencia, es decir, algo como
    `[inicio:parada]` o `[inicio:parada:paso]`.
    cada uno de los elementos `inicio`, `parada`, `paso` debe ser un entero, `None`,
    o posiblemente algún otro objeto que tenga un método `__index__`.
    
    Excepción elevada en la linea 710 del archivo TESTS:\runtime\test_type_error.py.
    
       708: def test_Slice_indices_must_be_integers_or_None():
       709:     try:
    -->710:         [1, 2, 3][1.0:2.0]
                    ^^^^^^^^^^^^^^^^^^
       711:     except TypeError as e:


Too few positional argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 471, in test_Too_few_positional_argument
        fn(1)
    TypeError: fn() missing 2 required positional arguments: 'b' and 'c'
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Al parecer, ha llamado a la función 'fn()' con
    menos argumentos posicionales de los que requiere (falta 2).
    
    Excepción elevada en la linea 471 del archivo TESTS:\runtime\test_type_error.py.
    
       467:     def fn(a, b, c):
       468:         pass
       469: 
       470:     try:
    -->471:         fn(1)
                    ^^^^^
       472:     except TypeError as e:

            fn:  <function fn>
                defined in <function test_Too_few_positional_argument>
        


Too many positional argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 452, in test_Too_many_positional_argument
        A().f(1)
    TypeError: f() takes 1 positional argument but 2 were given
    
        Tal vez olvidó `self` al definir `f`.
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Al parecer, ha llamado a la función `f` con
    2 argumento(s) posicional(es) mientras que requiere 1
    dicho(s) argumento(s) posicional(es).
    Tal vez olvidó `self` al definir `f`.
    
    Excepción elevada en la linea 452 del archivo TESTS:\runtime\test_type_error.py.
    
       448:         def f(x):
       449:             pass
       450: 
       451:     try:
    -->452:         A().f(1)
                    ^^^^^^^^
       453:     except TypeError as e:

            A:  <class A>
                defined in <function test_type_error.test_Too_many_positional_argument>
        


Tuple no item assignment
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 419, in test_Tuple_no_item_assignment
        a[0] = 0
    TypeError: 'tuple' object does not support item assignment
    
        ¿Querías usar una lista?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    En Python, algunos objetos se conocen como inmutables:
    una vez definidos, su valor no puede ser cambiado.
    Has intentado cambiar parte de un objeto inmutable de este tipo: una `tuple`,
    probablemente utilizando una operación de indexación.
    Tal vez quisiste usar una lista en su lugar.
    
    Excepción elevada en la linea 419 del archivo TESTS:\runtime\test_type_error.py.
    
       416: def test_Tuple_no_item_assignment():
       417:     a = (1, 2, 3)
       418:     try:
    -->419:         a[0] = 0
                    ^^^^^^^^
       420:     except TypeError as e:

            a:  (1, 2, 3)
            a[0]:  1
        


Unhachable type
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 727, in test_Unhachable_type
        {[1, 2]: 1}
    TypeError: unhashable type: 'list'
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Sólo se pueden utilizar objetos hasheables
    como elementos de `set` o claves de `dict`.
    Los objetos hasheables son aquellos que no cambian de valor
    una vez que han sido creados.En lugar de usar una `list`, considere usar una `tuple`.
    
    Excepción elevada en la linea 727 del archivo TESTS:\runtime\test_type_error.py.
    
       725: def test_Unhachable_type():
       726:     try:
    -->727:         {[1, 2]: 1}
                    ^^^^^^^^^^^
       728:     except TypeError as e:


Unsupported operand types
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 310, in test_Unsupported_operand_types
        a @= b
    TypeError: unsupported operand type(s) for @=: 'str' and 'int'
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Has intentado utilizar el operador @=
    utilizando dos tipos de objetos incompatibles:
    `un string (`str`)` y `un número entero (`int`)`.
    Este operador se emplea normalmente sólo
    para la multiplicación de matrices.
    
    Excepción elevada en la linea 310 del archivo TESTS:\runtime\test_type_error.py.
    
       307:     try:
       308:         a = "a"
       309:         b = 2
    -->310:         a @= b
                    ^^^^^^
       311:     except TypeError as e:

            a:  'a'
            b:  2
        


divmod
~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 55, in test_divmod
        result = divmod(a, b)
    TypeError: can't take floor or mod of complex number.
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    The arguments of `divmod` must be integers (`int`) or real (`float`) numbers.
    At least one of the arguments was a complex number.
    
    Excepción elevada en la linea 55 del archivo TESTS:\runtime\test_type_error.py.
    
       52:     a = 2
       53:     b = 3 + 2j
       54:     try:
    -->55:         result = divmod(a, b)
                            ^^^^^^^^^^^^
       56:     except TypeError as e:

            a:  2
            b:  (3+2j)
            divmod:  <builtin function divmod>
        


function got multiple argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 922, in test_function_got_multiple_argument
        fn2(0, a=1)
    TypeError: fn2() got multiple values for argument 'a'
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Ha especificado el valor del argumento `a` más de una vez
    al llamar a la función llamada `fn2`.
    Esta función tiene los siguientes argumentos:
    `a, b=1`
    
    Excepción elevada en la linea 922 del archivo TESTS:\runtime\test_type_error.py.
    
       918:     def fn2(a, b=1):
       919:         pass
       920: 
       921:     try:
    -->922:         fn2(0, a=1)
                    ^^^^^^^^^^^
       923:     except TypeError as e:

            fn2:  <function fn2>
                defined in <function test_function_got_multiple_argument>
        


function has no len
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 847, in test_function_has_no_len
        len(bad)
    TypeError: object of type 'function' has no len()
    
        ¿Olvidaste llamar a `bad`?
        
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Sospecho que has olvidado añadir paréntesis para llamar a `bad`.
    Puede que hayas querido escribir:
    `len(bad())`
    
    Excepción elevada en la linea 847 del archivo TESTS:\runtime\test_type_error.py.
    
       843:     def bad():
       844:         pass
       845: 
       846:     try:
    -->847:         len(bad)
                    ^^^^^^^^
       848:     except TypeError as e:

            bad:  <function bad> defined in <function test_function_has_no_len>
            len:  <builtin function len>
        


getattr attribute name must be string
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 968, in test_getattr_attribute_name_must_be_string
        getattr("__repr__", 1)  # as reported in issue #77
    TypeError: getattr(): attribute name must be string
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    El segundo argumento de la función `getattr()` debe ser una cadena.
    
    Excepción elevada en la linea 968 del archivo TESTS:\runtime\test_type_error.py.
    
       961:     if friendly_traceback.get_lang() == "en":
       962:         assert (
       963:             "The second argument of the function `hasattr()` must be a string."
       964:             in result
       965:         )
       966: 
       967:     try:
    -->968:         getattr("__repr__", 1)  # as reported in issue #77
                    ^^^^^^^^^^^^^^^^^^^^^^
       969:     except TypeError as e:

            getattr:  <builtin function getattr>
        


method got multiple argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 941, in test_method_got_multiple_argument
        t.some_method(0, a=1)
    TypeError: some_method() got multiple values for argument 'a'
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    Ha especificado el valor del argumento `a` más de una vez
    al llamar a la función llamada `t.some_method`.
    Esta función sólo tiene un argumento: `a`
    
    Excepción elevada en la linea 941 del archivo TESTS:\runtime\test_type_error.py.
    
       937:             pass
       938: 
       939:     t = T()
       940:     try:
    -->941:         t.some_method(0, a=1)
                    ^^^^^^^^^^^^^^^^^^^^^
       942:     except TypeError as e:

            t:  <T object>
                defined in <function test_type_error.test_method_got_multiple_argument>
            t.some_method:  <bound method T.some_method>
                of <T object>
                defined in <function test_type_error.test_method_got_multiple_argument>
        


vars arg must have dict
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 891, in test_vars_arg_must_have_dict
        vars(f)
    TypeError: vars() argument must have __dict__ attribute
    
    Un `TypeError` suele producirse al intentar
    combinar dos tipos de objetos incompatibles,
    por llamar a una función con el tipo de objeto equivocado,
    o por intentar realizar una operación no permitida en un tipo de objeto determinado.
    
    La función `vars` se utiliza para listar el contenido del atributo
    `__dict__` de un objeto.
    El objeto `f` utiliza `__slots__` en lugar de `__dict__`.
    
    Excepción elevada en la linea 891 del archivo TESTS:\runtime\test_type_error.py.
    
       887:         assert no_slots not in result
       888:         assert use_slots not in result
       889: 
       890:     try:
    -->891:         vars(f)
                    ^^^^^^^
       892:     except TypeError as e:

            f:  <F object>
                defined in <function test_type_error.test_vars_arg_must_have_dict>
            vars:  <builtin function vars>
        


UnboundLocalError
-----------------


Missing both
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 63, in test_Missing_both
        outer_missing_both()
      File "TESTS:\runtime\test_unbound_local_error.py", line 22, in outer_missing_both
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 21, in inner
        spam_missing_both += 1
    UnboundLocalError: local variable 'spam_missing_both' referenced before assignment
    
        ¿Olvidó añadir `global spam_missing_both` o 
        `nonlocal spam_missing_both`?
        
    En Python, las variables que se utilizan dentro de una función sé conocen
    como variables locales. Previo a ser empleadas, se les debe asignar un valor.
    Una variable que se emplea antes de que se le asigne
    un valor se supone que está definida fuera de esa función; se 
    conoce como `global` (o a veces `no local`). No se puede asignar un
    valor a dicha variable global dentro de una función sin indicar primero a
    Python que se trata de una variable global, de lo contrario verá
    un `UnboundLocalError`.
    
    Estás tratando de usar el nombre `spam_missing_both` identificado por Python como estando
    en el ámbito local de una función antes de haberle asignado un valor.
    
    El nombre `spam_missing_both` existe tanto en el ámbito global como en el no local.
    Esto puede ser bastante confuso y no es recomendable.
    Dependiendo de la variable a la que quiera referirse, deberá añadir
    
        global spam_missing_both
    
    o
    
        nonlocal spam_missing_both
    
    como la primera línea dentro de su función.
    
    La ejecución se detuvo en la linea 63 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       61: def test_Missing_both():
       62:     try:
    -->63:         outer_missing_both()
                   ^^^^^^^^^^^^^^^^^^^^
       64:     except UnboundLocalError as e:

            global outer_missing_both:  <function outer_missing_both>
        
    Excepción elevada en la linea 21 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       20:     def inner():
    -->21:         spam_missing_both += 1
                   ^^^^^^^^^^^^^^^^^^^^^^

            global spam_missing_both:  1
        


Missing global
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 27, in test_Missing_global
        outer_missing_global()
      File "TESTS:\runtime\test_unbound_local_error.py", line 10, in outer_missing_global
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 9, in inner
        spam_missing_global += 1
    UnboundLocalError: local variable 'spam_missing_global' referenced before assignment
    
        ¿Olvidaste añadir `global spam_missing_global`?
        
    En Python, las variables que se utilizan dentro de una función sé conocen
    como variables locales. Previo a ser empleadas, se les debe asignar un valor.
    Una variable que se emplea antes de que se le asigne
    un valor se supone que está definida fuera de esa función; se 
    conoce como `global` (o a veces `no local`). No se puede asignar un
    valor a dicha variable global dentro de una función sin indicar primero a
    Python que se trata de una variable global, de lo contrario verá
    un `UnboundLocalError`.
    
    Estás tratando de usar el nombre `spam_missing_global` identificado por Python como estando
    en el ámbito local de una función antes de haberle asignado un valor.
    
    El nombre `spam_missing_global` existe en el ámbito global.
    Quizás la sentencia
    
        global spam_missing_global
    
    debería haber sido incluida como la primera línea dentro de su función.
    
    La ejecución se detuvo en la linea 27 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       25: def test_Missing_global():
       26:     try:
    -->27:         outer_missing_global()
                   ^^^^^^^^^^^^^^^^^^^^^^
       28:     except UnboundLocalError as e:

            global outer_missing_global:  <function outer_missing_global>
        
    Excepción elevada en la linea 9 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       8:     def inner():
    -->9:         spam_missing_global += 1
                  ^^^^^^^^^^^^^^^^^^^^^^^^

            global spam_missing_global:  1
        


Missing nonlocal
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 45, in test_Missing_nonlocal
        outer_missing_nonlocal()
      File "TESTS:\runtime\test_unbound_local_error.py", line 16, in outer_missing_nonlocal
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 15, in inner
        spam_missing_nonlocal += 1
    UnboundLocalError: local variable 'spam_missing_nonlocal' referenced before assignment
    
        ¿Olvidaste añadir `nonlocal spam_missing_nonlocal`?
        
    En Python, las variables que se utilizan dentro de una función sé conocen
    como variables locales. Previo a ser empleadas, se les debe asignar un valor.
    Una variable que se emplea antes de que se le asigne
    un valor se supone que está definida fuera de esa función; se 
    conoce como `global` (o a veces `no local`). No se puede asignar un
    valor a dicha variable global dentro de una función sin indicar primero a
    Python que se trata de una variable global, de lo contrario verá
    un `UnboundLocalError`.
    
    Estás tratando de usar el nombre `spam_missing_nonlocal` identificado por Python como estando
    en el ámbito local de una función antes de haberle asignado un valor.
    
    El nombre `spam_missing_nonlocal` existe en el ámbito nonlocal.
    Quizás la sentencia
    
        nonlocal spam_missing_nonlocal
    
    debería haber sido incluida como la primera línea dentro de su función.
    
    La ejecución se detuvo en la linea 45 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       43: def test_Missing_nonlocal():
       44:     try:
    -->45:         outer_missing_nonlocal()
                   ^^^^^^^^^^^^^^^^^^^^^^^^
       46:     except UnboundLocalError as e:

            global outer_missing_nonlocal:  <function outer_missing_nonlocal>
        
    Excepción elevada en la linea 15 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       14:     def inner():
    -->15:         spam_missing_nonlocal += 1
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^


Typo in local
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 101, in test_Typo_in_local
        test2()
      File "TESTS:\runtime\test_unbound_local_error.py", line 98, in test2
        alpha3 += 1
    UnboundLocalError: local variable 'alpha3' referenced before assignment
    
        ¿Quieres decir `alpha1`?
        
    En Python, las variables que se utilizan dentro de una función sé conocen
    como variables locales. Previo a ser empleadas, se les debe asignar un valor.
    Una variable que se emplea antes de que se le asigne
    un valor se supone que está definida fuera de esa función; se 
    conoce como `global` (o a veces `no local`). No se puede asignar un
    valor a dicha variable global dentro de una función sin indicar primero a
    Python que se trata de una variable global, de lo contrario verá
    un `UnboundLocalError`.
    
    En lugar de escribir `alpha3`, tal vez quiso decir uno de los siguientes:
    *   alcance local: `alpha1`, `alpha2`
    
    La ejecución se detuvo en la linea 101 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
        97:         alpha2 = 1
        98:         alpha3 += 1
        99: 
       100:     try:
    -->101:         test2()
                    ^^^^^^^
       102:     except UnboundLocalError as e:

            test2:  <function test2> defined in <function test_Typo_in_local>
        
    Excepción elevada en la linea 98 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       95:     def test2():
       96:         alpha1 = 1
       97:         alpha2 = 1
    -->98:         alpha3 += 1
                   ^^^^^^^^^^^


Using name of builtin
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 121, in test_Using_name_of_builtin
        dist([])
      File "TESTS:\runtime\test_unbound_local_error.py", line 117, in dist
        max = max(points)
    UnboundLocalError: local variable 'max' referenced before assignment
    
    En Python, las variables que se utilizan dentro de una función sé conocen
    como variables locales. Previo a ser empleadas, se les debe asignar un valor.
    Una variable que se emplea antes de que se le asigne
    un valor se supone que está definida fuera de esa función; se 
    conoce como `global` (o a veces `no local`). No se puede asignar un
    valor a dicha variable global dentro de una función sin indicar primero a
    Python que se trata de una variable global, de lo contrario verá
    un `UnboundLocalError`.
    
    `max` es una función incorporada de Python.
    Has intentado asignar un valor a `max` dentro de una función
    al mismo tiempo que utilizas su significado original en la función.
    
    Tenga en cuenta que generalmente no es una buena idea dar a una variable local
    el mismo nombre que a una función incorporada de Python (como `max`).
    
    La ejecución se detuvo en la linea 121 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       118:         min = min(points)
       119:         return max - min
       120:     try:
    -->121:         dist([])
                    ^^^^^^^^
       122:     except UnboundLocalError as e:

            dist:  <function dist> defined in <function test_Using_name_of_builtin>
        
    Excepción elevada en la linea 117 del archivo TESTS:\runtime\test_unbound_local_error.py.
    
       116:     def dist(points):
    -->117:         max = max(points)
                    ^^^
       118:         min = min(points)

            max:  <builtin function max>
        


UnknownError
------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unknown_error.py", line 12, in test_Generic
        raise UnknownException("Some informative message about an unknown exception.")
    UnknownException: Some informative message about an unknown exception.
    
    No se conoce ninguna información sobre esta excepción.
    Por favor, informe de este ejemplo a
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    Si está utilizando un REPL, utilice `www('bug')` para hacerlo.
    
    Si está utilizando la consola Friendly, utilice `www()` para
    hacer una búsqueda en Internet para este caso en particular.
    
    Excepción elevada en la linea 12 del archivo TESTS:\runtime\test_unknown_error.py.
    
        9:     old_debug = friendly_traceback.debug_helper.DEBUG
       10:     friendly_traceback.debug_helper.DEBUG = False
       11:     try:
    -->12:         raise UnknownException("Some informative message about an unknown exception.")
                   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       13:     except Exception as e:

            global UnknownException:  <class test_unknown_error.UnknownException>
        


ValueError
----------


Convert to int
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 187, in test_Convert_to_int
        int('13a')
    ValueError: invalid literal for int() with base 10: '13a'
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    `'13a'` es un argumento no válido para `int()` en base `10`.
    En base `10`, `int()` se utiliza más a menudo para convertir una cadena
    que contiene los dígitos `0` a `9` en un número entero.
    Los siguientes caracteres no están permitidos: `a`.
    
    Excepción elevada en la linea 187 del archivo TESTS:\runtime\test_value_error.py.
    
       183:     if english:
       184:         assert "needs to be first converted using `float()`" in result
       185: 
       186:     try:
    -->187:         int('13a')
                    ^^^^^^^^^^
       188:     except ValueError as e:

            int:  <class int>
        


Could not convert to float
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 88, in test_Could_not_convert_to_float
        float("42b")
    ValueError: could not convert string to float: '42b'
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    La cadena `42b` no se puede convertir en un `float`.
    
    Excepción elevada en la linea 88 del archivo TESTS:\runtime\test_value_error.py.
    
       86: def test_Could_not_convert_to_float():
       87:     try:
    -->88:         float("42b")
                   ^^^^^^^^^^^^
       89:     except ValueError as e:

            float:  <class float>
        


Date invalid month
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 58, in test_Date_invalid_month
        d = date(2021, 13, 1)
    ValueError: month must be in 1..12
    
        ¿Especificó un mes no válido?
        
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    Supongo que especifica un valor no válido para un mes
    en un objeto `date`. Los valores válidos son enteros, del 1 al 12.
    
    Excepción elevada en la linea 58 del archivo TESTS:\runtime\test_value_error.py.
    
       55: def test_Date_invalid_month():
       56:     from datetime import date
       57:     try:
    -->58:         d = date(2021, 13, 1)
                       ^^^^^^^^^^^^^^^^^
       59:     except ValueError as e:

            date:  <class datetime.date>
        


Not enough values to unpack
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 28, in test_Not_enough_values_to_unpack
        a, b, c = d
    ValueError: not enough values to unpack (expected 3, got 2)
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    El desempaquetado es una forma conveniente de asignar un nombre
    a cada elemento de un iterable.
    En este caso, hay más nombres (3)
    que la longitud del iterable, un string (`str`) de longitud 2.
    
    Excepción elevada en la linea 28 del archivo TESTS:\runtime\test_value_error.py.
    
       24:     assert "ValueError: not enough values to unpack (expected 3, got 2)" in result
       25: 
       26:     d = "ab"
       27:     try:
    -->28:         a, b, c = d
                   ^^^^^^^^^^^
       29:     except ValueError as e:

            d:  'ab'
        


Pow third arg cannot be zero
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 103, in test_Pow_third_arg_cannot_be_zero
        pow(2, 4, a)
    ValueError: pow() 3rd argument cannot be 0
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    El tercer argumento de la función `pow()` no puede ser cero.
    
    Excepción elevada en la linea 103 del archivo TESTS:\runtime\test_value_error.py.
    
       100: def test_Pow_third_arg_cannot_be_zero():
       101:     a = 0
       102:     try:
    -->103:         pow(2, 4, a)
                    ^^^^^^^^^^^^
       104:     except ValueError as e:

            a:  0
            pow:  <builtin function pow>
        


Slots conflicts with class variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 72, in test_Slots_conflicts_with_class_variable
        class F:
    ValueError: 'a' in __slots__ conflicts with class variable
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    El nombre `a` se utiliza tanto como nombre de una variable de clase
    y como elemento de cadena en la clase `__slots__`;
    esto no está permitido.
    
    Excepción elevada en la linea 72 del archivo TESTS:\runtime\test_value_error.py.
    
       70: def test_Slots_conflicts_with_class_variable():
       71:     try:
    -->72:         class F:
                   ^^^^^^^^
       73:             __slots__ = ["a", "b"]


Too many values to unpack
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 43, in test_Too_many_values_to_unpack
        a, b = c
    ValueError: too many values to unpack (expected 2)
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    El desempaquetado es una forma conveniente de asignar un nombre
    a cada elemento de un iterable.
    En este caso, hay menos nombres (2)
    que la longitud del iterable, una `list` de longitud 3.
    
    Excepción elevada en la linea 43 del archivo TESTS:\runtime\test_value_error.py.
    
       40: def test_Too_many_values_to_unpack():
       41:     c = [1, 2, 3]
       42:     try:
    -->43:         a, b = c
                   ^^^^^^^^
       44:     except ValueError as e:

            c:  [1, 2, 3]
        


int base not in range
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 201, in test_int_base_not_in_range
        int('18', base=37)
    ValueError: int() base must be >= 2 and <= 36, or 0
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    El argumento `base` de `int()` debe ser cero
    o un número entero entre 2 y 36.
    Has escrito 37 que no está permitido.
    
    Excepción elevada en la linea 201 del archivo TESTS:\runtime\test_value_error.py.
    
       199: def test_int_base_not_in_range():
       200:     try:
    -->201:         int('18', base=37)
                    ^^^^^^^^^^^^^^^^^^
       202:     except ValueError as e:

            int:  <class int>
        


time strptime incorrect format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 127, in test_time_strptime_incorrect_format
        time.strptime("2020-01-01", "%d %m %Y")
    ValueError: time data '2020-01-01' does not match format '%d %m %Y'
    
    Un `ValueError` indica que una función o una operación
    recibió un argumento del tipo correcto, pero un valor inapropiado.
    
    El valor que has dado para la hora no está en el formato que has especificado.
    Asegúrese de utilizar el mismo separador entre los elementos
    (por ejemplo, entre el día y el mes) y mantener el mismo orden
    tanto en los datos proporcionados como en el formato que ha especificado.
    La siguiente tabla puede ser útil:
    https://docs.python.org/3/library/time.html#time.strftime
    El siguiente sitio también puede ser útil: https://www.strfti.me/
    
    Excepción elevada en la linea 127 del archivo TESTS:\runtime\test_value_error.py.
    
       123:         return
       124: 
       125:     import time
       126:     try:
    -->127:         time.strptime("2020-01-01", "%d %m %Y")
                    ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
       128:     except ValueError as e:

            time:  <module time (builtin)>
            time.strptime:  <builtin function strptime>
        


ZeroDivisionError
-----------------


Complex division
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 155, in test_Complex_division
        1 / zero
    ZeroDivisionError: complex division by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Usted está dividiendo por el siguiente término
    
         zero
    
    que es igual a cero.
    
    Excepción elevada en la linea 155 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       152: def test_Complex_division():
       153:     zero = 0j
       154:     try:
    -->155:         1 / zero
                    ^^^^^^^^
       156:     except ZeroDivisionError as e:

            zero:  0j
        


Division by zero literal
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 199, in test_Division_by_zero_literal
        1. / 0
    ZeroDivisionError: float division by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Estás dividiendo por cero.
    
    Excepción elevada en la linea 199 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       194:     if friendly_traceback.get_lang() == "en":
       195:         assert "Using the modulo operator, you are dividing by zero" in result
      (...)
       198:     try:
    -->199:         1. / 0
                    ^^^^^^
       200:     except ZeroDivisionError as e:


Division operator
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 17, in test_Division_operator
        1 / zero
    ZeroDivisionError: division by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Usted está dividiendo por el siguiente término
    
         zero
    
    que es igual a cero.
    
    Excepción elevada en la linea 17 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       13:     if friendly_traceback.get_lang() == "en":
       14:         assert "The following mathematical expression includes a division by zero" in result
       15: 
       16:     try:
    -->17:         1 / zero
                   ^^^^^^^^
       18:     except ZeroDivisionError as e:

            zero:  0
        


Divmod
~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 82, in test_Divmod
        divmod(1, zero)
    ZeroDivisionError: integer division or modulo by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    El segundo argumento de la función `divmod()` es cero.
    
    Excepción elevada en la linea 82 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       79: def test_Divmod():
       80:     zero = 0
       81:     try:
    -->82:         divmod(1, zero)
                   ^^^^^^^^^^^^^^^
       83:     except ZeroDivisionError as e:

            zero:  0
            divmod:  <builtin function divmod>
        


Float division
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 125, in test_Float_division
        1 / zero
    ZeroDivisionError: float division by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Usted está dividiendo por el siguiente término
    
         zero
    
    que es igual a cero.
    
    Excepción elevada en la linea 125 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       122: def test_Float_division():
       123:     zero = 0.
       124:     try:
    -->125:         1 / zero
                    ^^^^^^^^
       126:     except ZeroDivisionError as e:

            zero:  0.0
        


Float divmod
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 140, in test_Float_divmod
        divmod(1, zero)
    ZeroDivisionError: float divmod()
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    El segundo argumento de la función `divmod()` es igual a cero.
    
    Excepción elevada en la linea 140 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       137: def test_Float_divmod():
       138:     zero = 0.
       139:     try:
    -->140:         divmod(1, zero)
                    ^^^^^^^^^^^^^^^
       141:     except ZeroDivisionError as e:

            zero:  0.0
            divmod:  <builtin function divmod>
        


Float modulo
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 110, in test_Float_modulo
        1 % zero
    ZeroDivisionError: float modulo
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Usando el operador de módulo, estás dividiendo por el siguiente término
    
         zero
    
    que es igual a cero.
    
    Excepción elevada en la linea 110 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       106:         assert "The following mathematical expression includes a division by zero" in result
       107:         assert "done using the modulo operator" in result
       108: 
       109:     try:
    -->110:         1 % zero
                    ^^^^^^^^
       111:     except ZeroDivisionError as e:

            zero:  0.0
        


Integer division operator
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 42, in test_Integer_division_operator
        1 // zero
    ZeroDivisionError: integer division or modulo by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Usted está dividiendo por el siguiente término
    
         zero
    
    que es igual a cero.
    
    Excepción elevada en la linea 42 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       38:     if friendly_traceback.get_lang() == "en":
       39:         assert "The following mathematical expression includes a division by zero" in result
       40: 
       41:     try:
    -->42:         1 // zero
                   ^^^^^^^^^
       43:     except ZeroDivisionError as e:

            zero:  0
        


Mixed operations
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 212, in test_Mixed_operations
        a = divmod(8, 1 // 2)
    ZeroDivisionError: integer division or modulo by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    La siguiente expresión matemática incluye una división por cero:
    
        divmod(8, 1 // 2)
    
    Excepción elevada en la linea 212 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       210: def test_Mixed_operations():
       211:     try:
    -->212:         a = divmod(8, 1 // 2)
                        ^^^^^^^^^^^^^^^^^
       213:     except ZeroDivisionError as e:

            divmod:  <builtin function divmod>
            1 // 2:  0
        


Modulo operator
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 67, in test_Modulo_operator
        1 % zero
    ZeroDivisionError: integer division or modulo by zero
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Usando el operador de módulo, estás dividiendo por el siguiente término
    
         zero
    
    que es igual a cero.
    
    Excepción elevada en la linea 67 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       63:     if friendly_traceback.get_lang() == "en":
       64:         assert "The following mathematical expression includes a division by zero" in result
       65: 
       66:     try:
    -->67:         1 % zero
                   ^^^^^^^^
       68:     except ZeroDivisionError as e:

            zero:  0
        


Raise zero negative power
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 170, in test_Raise_zero_negative_power
        zero ** -1
    ZeroDivisionError: 0.0 cannot be raised to a negative power
    
    Un `ZeroDivisionError` ocurre cuando se intenta dividir un valor
    por cero, ya sea directamente o utilizando alguna otra operación matemática.
    
    Estás intentando elevar el número 0 a una potencia negativa
    que equivalente a dividir por cero.
    
    Excepción elevada en la linea 170 del archivo TESTS:\runtime\test_zero_division_error.py.
    
       167: def test_Raise_zero_negative_power():
       168:     zero = 0
       169:     try:
    -->170:         zero ** -1
                    ^^^^^^^^^^
       171:     except ZeroDivisionError as e:

            zero:  0
        

