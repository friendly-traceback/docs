
Friendly tracebacks - in English
======================================

Friendly aims to provide friendlier feedback when an exception
is raised than what is done by Python.
Below, we can find some examples. SyntaxError cases, as well as TabError and
IndentationError cases, are shown in a separate page.
Not all cases handled by friendly are included here.

.. note::

     The content of this page is generated by running
     `trb_english.py` located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

Friendly-traceback version: 0.4.91
Python version: 3.9.5



ArithmeticError
---------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_arithmetic_error.py", line 9, in test_Generic
        raise ArithmeticError('error')
    ArithmeticError: error
    
    `ArithmeticError` is the base class for those built-in exceptions
    that are raised for various arithmetic errors.
    It is unusual that you are seeing this exception;
    normally, a more specific exception should have been raised.
    
    Exception raised on line 9 of file TESTS:\runtime\test_arithmetic_error.py.
    
        4: def test_Generic():
        5:     try:
        6:         # I am not aware of any way in which this error is raised directly
        7:         # Usually, a subclass such as ZeroDivisionError, etc., would
        8:         # likely be raised.
    --> 9:         raise ArithmeticError('error')
       10:     except ArithmeticError as e:

            ArithmeticError:  <class ArithmeticError>
        


AssertionError
--------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_assertion_error.py", line 8, in test_Generic
        raise AssertionError("Fake message")
    AssertionError: Fake message
    
    In Python, the keyword `assert` is used in statements of the form
    `assert condition`, to confirm that `condition` is not `False`,
    nor equivalent to `False` such as an empty list, etc.
    
    If `condition` is `False` or equivalent, an `AssertionError` is raised.
    
    Exception raised on line 8 of file TESTS:\runtime\test_assertion_error.py.
    
       4: def test_Generic():
       5:     try:
       6:         # We raise it explicitly, rather than with the keyword assert, since
       7:         # we don't want pytest to rewrite out test.
    -->8:         raise AssertionError("Fake message")
       9:     except AssertionError as e:

            AssertionError:  <class AssertionError>
        


AttributeError
--------------


Attribute from other module
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 325, in test_Attribute_from_other_module
        keyword.pi
    AttributeError: module 'keyword' has no attribute 'pi'
    
        Did you mean one of the following modules: `math, cmath`?
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    Instead of the module `keyword`, perhaps you wanted to use
    the attribute `pi` of one of the following modules:
    `math, cmath`.
    
    Exception raised on line 325 of file TESTS:\runtime\test_attribute_error.py.
    
       321:         assert "Did you mean `math`?" in result
       323:     import cmath
       324:     try:
    -->325:         keyword.pi
       326:     except AttributeError as e:

            keyword:  <module keyword> from PYTHON_LIB:\keyword.py
        


Builtin function
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 223, in test_Builtin_function
        len.text
    AttributeError: 'builtin_function_or_method' object has no attribute 'text'
    
        Did you mean `len(text)`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    `len` is a function. Perhaps you meant to write
    `len(text)`
    
    Exception raised on line 223 of file TESTS:\runtime\test_attribute_error.py.
    
       220: def test_Builtin_function():
       221:     text = 'Hello world!'
       222:     try:
    -->223:         len.text
       224:     except AttributeError as e:

            text:  'Hello world!'
            len:  <builtin function len>
        


Builtin module with no file
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 240, in test_Builtin_module_with_no_file
        sys.foo
    AttributeError: module 'sys' has no attribute 'foo'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    Python tells us that no object with name `foo` is
    found in module `sys`.
    
    Exception raised on line 240 of file TESTS:\runtime\test_attribute_error.py.
    
       236:     """Issue 116"""
       237:     import sys
       239:     try:
    -->240:         sys.foo
       241:     except AttributeError as e:

            sys:  <module sys (builtin)>
        


Circular import
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 359, in test_Circular_import
        import my_turtle1
      File "TESTS:\my_turtle1.py", line 4, in <module>
        a = my_turtle1.something
    AttributeError: partially initialized module 'my_turtle1' has no attribute 'something' (most likely due to a circular import)
    
        Did you give your program the same name as a Python module?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    I suspect that you used the name `my_turtle1.py` for your program
    and that you also wanted to import a module with the same name
    from Python's standard library.
    If so, you should use a different name for your program.
    
    Execution stopped on line 359 of file TESTS:\runtime\test_attribute_error.py.
    
       356:     from friendly_traceback.runtime_errors import stdlib_modules
       357:     stdlib_modules.names.append("my_turtle1")
       358:     try:
    -->359:        import my_turtle1
       360:     except AttributeError as e:

    Exception raised on line 4 of file TESTS:\my_turtle1.py.
    
       1: """To test attribute error of partially initialized module."""
       2: import my_turtle1
    -->4: a = my_turtle1.something
              ^^^^^^^^^^^^^^^^^^^^

            my_turtle1:  <module my_turtle1> from TESTS:\my_turtle1.py
        


Circular import b
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 376, in test_Circular_import_b
        import circular_c
      File "TESTS:\circular_c.py", line 4, in <module>
        a = circular_c.something
    AttributeError: partially initialized module 'circular_c' has no attribute 'something' (most likely due to a circular import)
    
        You have a circular import.
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    Python indicated that the module `{module}` was not fully imported.
    This can occur if, during the execution of the code in module `circular_c`
    an attempt is made to import the same module again.
    
    Execution stopped on line 376 of file TESTS:\runtime\test_attribute_error.py.
    
       374: def test_Circular_import_b():
       375:     try:
    -->376:         import circular_c
       377:     except AttributeError as e:

    Exception raised on line 4 of file TESTS:\circular_c.py.
    
       1: # Attribute error for partially initialize module
       2: import circular_c
    -->4: a = circular_c.something
              ^^^^^^^^^^^^^^^^^^^^

            circular_c:  <module circular_c> from TESTS:\circular_c.py
        


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 26, in test_Generic
        A.x  # testing type
    AttributeError: type object 'A' has no attribute 'x'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    The object `A` has no attribute named `x`.
    
    Exception raised on line 26 of file TESTS:\runtime\test_attribute_error.py.
    
       22:     class A:
       23:         pass
       25:     try:
    -->26:         A.x  # testing type
       27:     except AttributeError as e:

            A:  <class A> defined in <function test_attribute_error.test_Generic>
        


Generic different frame
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 49, in test_Generic_different_frame
        a.attr
    AttributeError: 'A' object has no attribute 'attr'
    
        Did you mean `attr2`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    The object `a` has no attribute named `attr`.
    Perhaps you meant to write `a.attr2` instead of `a.attr`
    
    Exception raised on line 49 of file TESTS:\runtime\test_attribute_error.py.
    
       45:         return A()
       47:     a = f()
       48:     try:
    -->49:         a.attr
       50:     except AttributeError as e:

            a:  <A object>
                defined in <function test_attribute_error.test_Generic_different_frame.<locals>.f>
        


Generic instance
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 67, in test_Generic_instance
        a.x
    AttributeError: 'A' object has no attribute 'x'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    The object `a` has no attribute named `x`.
    
    Exception raised on line 67 of file TESTS:\runtime\test_attribute_error.py.
    
       64:         pass
       65:     a = A()
       66:     try:
    -->67:         a.x
       68:     except AttributeError as e:

            a:  <A object>
                defined in <function test_attribute_error.test_Generic_instance>
        


Module attribute typo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 144, in test_Module_attribute_typo
        math.cost
    AttributeError: module 'math' has no attribute 'cost'
    
        Did you mean `cos`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    Instead of writing `math.cost`, perhaps you meant to write one of 
    the following names which are attributes of module `math`:
    `cos, cosh`
    
    Exception raised on line 144 of file TESTS:\runtime\test_attribute_error.py.
    
       139:         assert "Did you mean `ascii_lowercase`" in result
       141:     import math
       143:     try:
    -->144:         math.cost
       145:     except AttributeError as e:

            math:  <module math (builtin)>
        


Nonetype
~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 183, in test_Nonetype
        a.b
    AttributeError: 'NoneType' object has no attribute 'b'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    You are attempting to access the attribute `b`
    for a variable whose value is `None`.
    Exception raised on line 183 of file TESTS:\runtime\test_attribute_error.py.
    
       180: def test_Nonetype():
       181:     a = None
       182:     try:
    -->183:         a.b
       184:     except AttributeError as e:

            a:  None
        


Object attribute typo
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 83, in test_Object_attribute_typo
        a.appendh(4)
    AttributeError: 'list' object has no attribute 'appendh'
    
        Did you mean `append`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    The object `a` has no attribute named `appendh`.
    Perhaps you meant to write `a.append` instead of `a.appendh`
    
    Exception raised on line 83 of file TESTS:\runtime\test_attribute_error.py.
    
       79: def test_Object_attribute_typo():
       80:     #
       81:     try:
       82:         a = [1, 2, 3]
    -->83:         a.appendh(4)
                   ^^^^^^^^^
       84:     except AttributeError as e:

            a:  [1, 2, 3]
        


Perhaps comma
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 203, in test_Perhaps_comma
        a = [abcd
    AttributeError: 'str' object has no attribute 'defg'
    
        Did you mean to separate object names by a comma?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    `defg` is not an attribute of `abcd`.
    However, both `abcd` and `defg` are known objects.
    Perhaps you wrote a period to separate these two objects, 
    instead of using a comma.
    
    Exception raised on line 203 of file TESTS:\runtime\test_attribute_error.py.
    
       199:     defg = "world"
       201:     # fmt: off
       202:     try:
    -->203:         a = [abcd
       204:         .defg]
       205:     # fmt: on

            abcd:  'hello'
            defg:  'world'
        


Read only
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 280, in test_Read_only
        f.b = 1
    AttributeError: 'F' object attribute 'b' is read-only
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    Object `f` uses `__slots__` to specify which attributes can
    be changed. The value of attribute `f.b` cannot be changed.
    The only attribute of `f` whose value can be changed is`a`.
    
    Exception raised on line 280 of file TESTS:\runtime\test_attribute_error.py.
    
       276:         b = 2
       278:     f = F()
       279:     try:
    -->280:         f.b = 1
       281:     except AttributeError as e:

            f:  <F object>
                defined in <function test_attribute_error.test_Read_only>
            f.b:  2
        


Shadow stdlib module
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 165, in test_Shadow_stdlib_module
        turtle.Pen
    AttributeError: module 'turtle' has no attribute 'Pen'
    
        Did you give your program the same name as a Python module?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    You imported a module named `turtle` from `TESTS:\turtle.py`.
    There is also a module named `turtle` in Python's standard library.
    Perhaps you need to rename your module.
    
    Exception raised on line 165 of file TESTS:\runtime\test_attribute_error.py.
    
       161: def test_Shadow_stdlib_module():
       162:     import turtle
       164:     try:
    -->165:         turtle.Pen
       166:     except AttributeError as e:

            turtle:  <module turtle> from TESTS:\turtle.py
        


Tuple by accident
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 295, in test_Tuple_by_accident
        something.upper()
    AttributeError: 'tuple' object has no attribute 'upper'
    
        Did you write a comma by mistake?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    `something` is a tuple that contains a single item
    which does have `'upper'` as an attribute.
    Perhaps you added a trailing comma by mistake at the end of the line
    where you defined `something`.
    
    Exception raised on line 295 of file TESTS:\runtime\test_attribute_error.py.
    
       292: def test_Tuple_by_accident():
       293:     something = "abc",  # note trailing comma
       294:     try:
    -->295:         something.upper()
                    ^^^^^^^^^^^^^^^
       296:     except AttributeError as e:

            something:  ('abc',)
        


Use builtin
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 99, in test_Use_builtin
        a.length()
    AttributeError: 'list' object has no attribute 'length'
    
        Did you mean `len(a)`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    The object `a` has no attribute named `length`.
    Perhaps you can use the Python builtin function `len` instead:
    `len(a)`.
    Exception raised on line 99 of file TESTS:\runtime\test_attribute_error.py.
    
        95: def test_Use_builtin():
        96:     #
        97:     try:
        98:         a = [1, 2, 3]
    --> 99:         a.length()
                    ^^^^^^^^
       100:     except AttributeError as e:

            a:  [1, 2, 3]
        


Use join with str
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 339, in test_Use_join_with_str
        a = ['a', '2'].join('abc') + ['b', '3'].join('\n')
    AttributeError: 'list' object has no attribute 'join'
    
        Did you mean `'abc'.join(['a', '2'])`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    The object `['a', '2']` has no attribute named `join`.
    Perhaps you wanted something like `'abc'.join(['a', '2'])`.
    
    Exception raised on line 339 of file TESTS:\runtime\test_attribute_error.py.
    
       337: def test_Use_join_with_str():
       338:     try:
    -->339:         a = ['a', '2'].join('abc') + ['b', '3'].join('\n')
                        ^^^^^^^^^^^^^^^
       340:     except AttributeError as e:


Use synonym
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 115, in test_Use_synonym
        a.add(4)
    AttributeError: 'list' object has no attribute 'add'
    
        Did you mean `append`?
        
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    The object `a` has no attribute named `add`.
    However, `a` has the following attributes with similar meanings:
    `append, extend, insert`.
    
    Exception raised on line 115 of file TESTS:\runtime\test_attribute_error.py.
    
       111: def test_Use_synonym():
       112:     #
       113:     try:
       114:         a = [1, 2, 3]
    -->115:         a.add(4)
                    ^^^^^
       116:     except AttributeError as e:

            a:  [1, 2, 3]
        


Using slots
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_attribute_error.py", line 260, in test_Using_slots
        f.b = 1
    AttributeError: 'F' object has no attribute 'b'
    
    An `AttributeError` occurs when the code contains something like
        `object.x`
    and `x` is not a method or attribute (variable) belonging to `object`.
    
    The object `f` has no attribute named `b`.
    Note that object `f` uses `__slots__` which prevents
    the creation of new attributes.
    The following are some of its known attributes:
    `a`.
    Exception raised on line 260 of file TESTS:\runtime\test_attribute_error.py.
    
       256:         __slots__ = ["a"]
       258:     f = F()
       259:     try:
    -->260:         f.b = 1
       261:     except AttributeError as e:

            f:  <F object>
                defined in <function test_attribute_error.test_Using_slots>
        


FileNotFoundError
-----------------


Directory not found
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 70, in test_Directory_not_found
        open("does_not_exist/file.txt")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist/file.txt'
    
    A `FileNotFoundError` exception indicates that you
    are trying to open a file that cannot be found by Python.
    This could be because you misspelled the name of the file.
    
    In your program, the name of the
    file that cannot be found is `file.txt`.
    does_not_exist
    is not a valid directory.
    
    Exception raised on line 70 of file TESTS:\runtime\test_file_not_found_error.py.
    
       68: def test_Directory_not_found():
       69:     try:
    -->70:         open("does_not_exist/file.txt")
       71:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 7, in test_Filename_not_found
        open("does_not_exist")
    FileNotFoundError: [Errno 2] No such file or directory: 'does_not_exist'
    
    A `FileNotFoundError` exception indicates that you
    are trying to open a file that cannot be found by Python.
    This could be because you misspelled the name of the file.
    
    In your program, the name of the
    file that cannot be found is `does_not_exist`.
    It was expected to be found in the
    `C:\Users\andre\friendly-traceback\friendly-traceback\tests` directory.
    I have no additional information for you.
    
    Exception raised on line 7 of file TESTS:\runtime\test_file_not_found_error.py.
    
       5: def test_Filename_not_found():
       6:     try:
    -->7:         open("does_not_exist")
       8:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found 2
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 30, in test_Filename_not_found_2
        open("setupp.py")
    FileNotFoundError: [Errno 2] No such file or directory: 'setupp.py'
    
        Did you mean `setup.py`?
        
    A `FileNotFoundError` exception indicates that you
    are trying to open a file that cannot be found by Python.
    This could be because you misspelled the name of the file.
    
    In your program, the name of the
    file that cannot be found is `setupp.py`.
    It was expected to be found in the
    `C:\Users\andre\friendly-traceback\friendly-traceback` directory.
    The file `setup.py` has a similar name.
    
    Exception raised on line 30 of file TESTS:\runtime\test_file_not_found_error.py.
    
       26:     if chdir:
       27:         os.chdir("..")
       29:     try:
    -->30:         open("setupp.py")
       31:     except FileNotFoundError as e:

            open:  <builtin function open>
        


Filename not found 3
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_file_not_found_error.py", line 52, in test_Filename_not_found_3
        open("setup.pyg")
    FileNotFoundError: [Errno 2] No such file or directory: 'setup.pyg'
    
        Did you mean `setup.py`?
        
    A `FileNotFoundError` exception indicates that you
    are trying to open a file that cannot be found by Python.
    This could be because you misspelled the name of the file.
    
    In your program, the name of the
    file that cannot be found is `setup.pyg`.
    It was expected to be found in the
    `C:\Users\andre\friendly-traceback\friendly-traceback` directory.
    Perhaps you meant one of the following files with similar names:
    `setup.py`, `setup.cfg`
    
    Exception raised on line 52 of file TESTS:\runtime\test_file_not_found_error.py.
    
       49:     if chdir:
       50:         os.chdir("..")
       51:     try:
    -->52:         open("setup.pyg")
       53:     except FileNotFoundError as e:

            open:  <builtin function open>
        


ImportError
-----------


Circular import
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 59, in test_Circular_import
        import circular_a
      File "TESTS:\circular_a.py", line 2, in <module>
        import circular_b
      File "TESTS:\circular_b.py", line 2, in <module>
        from circular_a import a
    ImportError: cannot import name 'a' from partially initialized module 'circular_a' (most likely due to a circular import) (C:\Users\andre\friendly-traceback\friendly-traceback\tests\circular_a.py)
    
    An `ImportError` exception indicates that a certain object could not
    be imported from a module or package. Most often, this is
    because the name of the object is not spelled correctly.
    
    The object that could not be imported is `a`.
    The module or package where it was 
    expected to be found is `circular_a`.
    
    The problem was likely caused by what is known as a 'circular import'.
    First, Python imported and started executing the code in file
       'TESTS:\runtime\test_import_error.py'.
    which imports module `circular_a`.
    During this process, the code in another file,
       'TESTS:\circular_b.py'
    was executed. However in this last file, an attempt was made
    to import the original module `circular_a`
    a second time, before Python had completed the first import.
    
    Execution stopped on line 59 of file TESTS:\runtime\test_import_error.py.
    
       57: def test_Circular_import():
       58:     try:
    -->59:         import circular_a
       60:     except ImportError as e:

    Exception raised on line 2 of file TESTS:\circular_b.py.
    
       1: """File used in for test_circular_import() in test_import_error.py"""
    -->2: from circular_a import a


Simple import error
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_import_error.py", line 45, in test_Simple_import_error
        from math import Pi
    ImportError: cannot import name 'Pi' from 'math' (unknown location)
    
        Did you mean `pi`?
        
    An `ImportError` exception indicates that a certain object could not
    be imported from a module or package. Most often, this is
    because the name of the object is not spelled correctly.
    
    Perhaps you meant to import `pi` (from `math`) instead of `Pi`
    
    Exception raised on line 45 of file TESTS:\runtime\test_import_error.py.
    
       41:     no_suggestion()
       42:     multiple_import_on_same_line()
       44:     try:
    -->45:         from math import Pi
       46:     except ImportError as e:


IndexError
----------


Assignment
~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 87, in test_Assignment
        a[13] = 1
    IndexError: list assignment index out of range
    
    An `IndexError` occurs when you try to get an item from a list,
    a tuple, or a similar object (sequence), and use an index which
    does not exist; typically, this happens because the index you give
    is greater than the length of the sequence.
    
    You have tried to assign a value to index `13` of `a`,
    a `list` of length `10`.
    The valid index values of `a` are integers ranging from
    `-10` to `9`.
    
    Exception raised on line 87 of file TESTS:\runtime\test_index_error.py.
    
       83:         assert "You have tried to assign a value to index `1` of `b`," in result
       84:         assert "a `list` which contains no item." in result
       86:     try:
    -->87:         a[13] = 1
       88:     except IndexError as e:

            a:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]
        


Empty
~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 46, in test_Empty
        c = a[1]
    IndexError: list index out of range
    
        `a` contains no item.
        
    An `IndexError` occurs when you try to get an item from a list,
    a tuple, or a similar object (sequence), and use an index which
    does not exist; typically, this happens because the index you give
    is greater than the length of the sequence.
    
    You have tried to get the item with index `1` of `a`,
    a `list` which contains no item.
    
    Exception raised on line 46 of file TESTS:\runtime\test_index_error.py.
    
       43: def test_Empty():
       44:     a = []
       45:     try:
    -->46:         c = a[1]
                       ^^^^
       47:     except IndexError as e:

            a:  []
        


Long list
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 29, in test_Long_list
        print(a[60], b[0])
    IndexError: list index out of range
    
    An `IndexError` occurs when you try to get an item from a list,
    a tuple, or a similar object (sequence), and use an index which
    does not exist; typically, this happens because the index you give
    is greater than the length of the sequence.
    
    You have tried to get the item with index `60` of `a`,
    a `list` of length `40`.
    The valid index values of `a` are integers ranging from
    `-40` to `39`.
    
    Exception raised on line 29 of file TESTS:\runtime\test_index_error.py.
    
       26:     a = list(range(40))
       27:     b = tuple(range(50))
       28:     try:
    -->29:         print(a[60], b[0])
                         ^^^^^
       30:     except IndexError as e:

            a:  [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, ...]
                len(a): 40
        
        


Short tuple
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_index_error.py", line 10, in test_Short_tuple
        print(a[3], b[2])
    IndexError: tuple index out of range
    
        Remember: the first item of a `tuple` is not at index 1 but at index 0.
        
    An `IndexError` occurs when you try to get an item from a list,
    a tuple, or a similar object (sequence), and use an index which
    does not exist; typically, this happens because the index you give
    is greater than the length of the sequence.
    
    You have tried to get the item with index `3` of `a`,
    a `tuple` of length `3`.
    The valid index values of `a` are integers ranging from
    `-3` to `2`.
    
    Exception raised on line 10 of file TESTS:\runtime\test_index_error.py.
    
        7:     a = (1, 2, 3)
        8:     b = [1, 2, 3]
        9:     try:
    -->10:         print(a[3], b[2])
                         ^^^^
       11:     except IndexError as e:

            a:  (1, 2, 3)
        


KeyError
--------


ChainMap
~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\collections\__init__.py", line 1008, in pop
        return self.maps[0].pop(key, *args)
    KeyError: 42
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 62, in test_ChainMap
        d.pop(42)
    KeyError: 'Key not found in the first mapping: 42'
    
    A `KeyError` is raised when a value is not found as a
    key in a Python dict or in a similar object.
    
    The key `42` cannot be found in `d`, an object of type `ChainMap`.
    
    Exception raised on line 62 of file TESTS:\runtime\test_key_error.py.
    
       59:     from collections import ChainMap
       60:     d = ChainMap({}, {})
       61:     try:
    -->62:         d.pop(42)
       63:     except KeyError as e:

            d:  ChainMap({}, {})
            d.pop:  <bound method ChainMap.pop> of ChainMap({}, {})
        


Forgot to convert to string
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 115, in test_Forgot_to_convert_to_string
        print(squares[2])
    KeyError: 2
    
        Did you forget to convert `2` into a string?
        
    A `KeyError` is raised when a value is not found as a
    key in a Python dict or in a similar object.
    
    The key `2` cannot be found in the dict `squares`.
    `squares` contains a string key which is identical to `str(2)`.
    Perhaps you forgot to convert the key into a string.
    
    Exception raised on line 115 of file TESTS:\runtime\test_key_error.py.
    
       112: def test_Forgot_to_convert_to_string():
       113:     squares = {"1": 1, "2": 4, "3": 9}
       114:     try:
    -->115:         print(squares[2])
                          ^^^^^^^^^^
       116:     except KeyError as e:

            squares:  {'1': 1, '2': 4, '3': 9}
        


Generic key error
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 44, in test_Generic_key_error
        d["c"]
    KeyError: 'c'
    
    A `KeyError` is raised when a value is not found as a
    key in a Python dict or in a similar object.
    
    The key `'c'` cannot be found in the dict `d`.
    
    Exception raised on line 44 of file TESTS:\runtime\test_key_error.py.
    
       41: def test_Generic_key_error():
       42:     d = {"a": 1, "b": 2}
       43:     try:
    -->44:         d["c"]
       45:     except KeyError as e:

            d:  {'a': 1, 'b': 2}
        


Popitem empty ChainMap
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\collections\__init__.py", line 1001, in popitem
        return self.maps[0].popitem()
    KeyError: 'popitem(): dictionary is empty'
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 26, in test_Popitem_empty_ChainMap
        alpha.popitem()
    KeyError: 'No keys found in the first mapping.'
    
        `alpha` is an empty `ChainMap`.
        
    A `KeyError` is raised when a value is not found as a
    key in a Python dict or in a similar object.
    
    You tried to retrieve an item from `alpha` which is an empty `ChainMap`.
    
    Exception raised on line 26 of file TESTS:\runtime\test_key_error.py.
    
       23:     from collections import ChainMap
       24:     alpha = ChainMap({}, {})
       25:     try:
    -->26:         alpha.popitem()
       27:     except KeyError as e:

            alpha:  ChainMap({}, {})
            alpha.popitem:  <bound method ChainMap.popitem> of ChainMap({}, {})
        


Popitem empty dict
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 8, in test_Popitem_empty_dict
        d.popitem()
    KeyError: 'popitem(): dictionary is empty'
    
        `d` is an empty `dict`.
        
    A `KeyError` is raised when a value is not found as a
    key in a Python dict or in a similar object.
    
    You tried to retrieve an item from `d` which is an empty `dict`.
    
    Exception raised on line 8 of file TESTS:\runtime\test_key_error.py.
    
       5: def test_Popitem_empty_dict():
       6:     d = {}
       7:     try:
    -->8:         d.popitem()
       9:     except KeyError as e:

            d:  {}
            d.popitem:  <builtin method popitem of dict object>
        


Similar names
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 145, in test_Similar_names
        a = second["alpha"]
    KeyError: 'alpha'
    
        Did you mean `'alpha0'`?
        
    A `KeyError` is raised when a value is not found as a
    key in a Python dict or in a similar object.
    
    The key `'alpha'` cannot be found in the dict `second`.
    `second` has some keys similar to `'alpha'` including:
    `'alpha0', 'alpha11', 'alpha12'`.
    
    Exception raised on line 145 of file TESTS:\runtime\test_key_error.py.
    
       141:         assert ok, diff
       143:     second = {"alpha0": 1, "alpha11": 2, "alpha12": 3}
       144:     try:
    -->145:         a = second["alpha"]
                        ^^^^^^^^^^^^^^^
       146:     except KeyError as e:

            second:  {'alpha0': 1, 'alpha11': 2, 'alpha12': 3}
        


String by mistake
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_key_error.py", line 98, in test_String_by_mistake
        d["(0, 0)"]
    KeyError: '(0, 0)'
    
        Did you convert `(0, 0)` into a string by mistake?
        
    A `KeyError` is raised when a value is not found as a
    key in a Python dict or in a similar object.
    
    The key `'(0, 0)'` cannot be found in the dict `d`.
    `'(0, 0)'` is a string.
    There is a key of `d` whose string representation
    is identical to `'(0, 0)'`.
    
    Exception raised on line 98 of file TESTS:\runtime\test_key_error.py.
    
       94:     chain_map_string_by_mistake()  # do not show in docs
       96:     d = {(0, 0): "origin"}
       97:     try:
    -->98:         d["(0, 0)"]
       99:     except KeyError as e:

            d:  {(0, 0): 'origin'}
        


LookupError
-----------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_lookup_error.py", line 10, in test_Generic
        raise LookupError("Fake message")
    LookupError: Fake message
    
    `LookupError` is the base class for the exceptions that are raised
    when a key or index used on a mapping or sequence is invalid.
    It can also be raised directly by codecs.lookup().
    
    Exception raised on line 10 of file TESTS:\runtime\test_lookup_error.py.
    
        4: def test_Generic():
        5:     try:
        6:         # LookupError is the base class for KeyError and IndexError.
        7:         # It should normally not be raised by user code,
        8:         # other than possibly codecs.lookup(), which is why we raise
        9:         # it directly here for our example.
    -->10:         raise LookupError("Fake message")
       11:     except LookupError as e:

            LookupError:  <class LookupError>
        


ModuleNotFoundError
-------------------


Need to install module
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 76, in test_Need_to_install_module
        import alphabet
    ModuleNotFoundError: No module named 'alphabet'
    
    A `ModuleNotFoundError` exception indicates that you
    are trying to import a module that cannot be found by Python.
    This could be because you misspelled the name of the module
    or because it is not installed on your computer.
    
    No module named `alphabet` can be imported.
    Perhaps you need to install it.
    
    Exception raised on line 76 of file TESTS:\runtime\test_module_not_found_error.py.
    
       74: def test_Need_to_install_module():
       75:     try:
    -->76:         import alphabet
       77:     except ModuleNotFoundError as e:


Not a package
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 22, in test_Not_a_package
        import os.xxx
    ModuleNotFoundError: No module named 'os.xxx'; 'os' is not a package
    
    A `ModuleNotFoundError` exception indicates that you
    are trying to import a module that cannot be found by Python.
    This could be because you misspelled the name of the module
    or because it is not installed on your computer.
    
    `xxx` cannot be imported from `os`.
    
    Exception raised on line 22 of file TESTS:\runtime\test_module_not_found_error.py.
    
       19: def test_Not_a_package():
       21:     try:
    -->22:         import os.xxx
       23:     except ModuleNotFoundError as e:


Not a package similar name
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 36, in test_Not_a_package_similar_name
        import os.pathh
    ModuleNotFoundError: No module named 'os.pathh'; 'os' is not a package
    
        Did you mean `import os.path`?
        
    A `ModuleNotFoundError` exception indicates that you
    are trying to import a module that cannot be found by Python.
    This could be because you misspelled the name of the module
    or because it is not installed on your computer.
    
    Perhaps you meant `import os.path`.
    `path` is a name similar to `pathh` and is a module that
    can be imported from `os`.
    
    Exception raised on line 36 of file TESTS:\runtime\test_module_not_found_error.py.
    
       34: def test_Not_a_package_similar_name():
       35:     try:
    -->36:         import os.pathh
       37:     except ModuleNotFoundError as e:


Object not module
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 49, in test_Object_not_module
        import os.open
    ModuleNotFoundError: No module named 'os.open'; 'os' is not a package
    
        Did you mean `from os import open`?
        
    A `ModuleNotFoundError` exception indicates that you
    are trying to import a module that cannot be found by Python.
    This could be because you misspelled the name of the module
    or because it is not installed on your computer.
    
    `open` is not a separate module but an object that is part of `os`.
    
    Exception raised on line 49 of file TESTS:\runtime\test_module_not_found_error.py.
    
       47: def test_Object_not_module():
       48:     try:
    -->49:         import os.open
       50:     except ModuleNotFoundError as e:

            open:  <builtin function open>
        


Similar object not module
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 62, in test_Similar_object_not_module
        import os.opend
    ModuleNotFoundError: No module named 'os.opend'; 'os' is not a package
    
        Did you mean `from os import open`?
        
    A `ModuleNotFoundError` exception indicates that you
    are trying to import a module that cannot be found by Python.
    This could be because you misspelled the name of the module
    or because it is not installed on your computer.
    
    Perhaps you meant `from os import open`.
    `open` is a name similar to `opend` and is an object that
    can be imported from `os`.
    Other objects with similar names that are part of
     `os` include `popen`.
    
    Exception raised on line 62 of file TESTS:\runtime\test_module_not_found_error.py.
    
       60: def test_Similar_object_not_module():
       61:     try:
    -->62:         import os.opend
       63:     except ModuleNotFoundError as e:


Standard library module
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 7, in test_Standard_library_module
        import Tkinter
    ModuleNotFoundError: No module named 'Tkinter'
    
        Did you mean `tkinter`?
        
    A `ModuleNotFoundError` exception indicates that you
    are trying to import a module that cannot be found by Python.
    This could be because you misspelled the name of the module
    or because it is not installed on your computer.
    
    No module named `Tkinter` can be imported.
    Perhaps you need to install it.
    `tkinter` is an existing module that has a similar name.
    
    Exception raised on line 7 of file TESTS:\runtime\test_module_not_found_error.py.
    
       5: def test_Standard_library_module():
       6:     try:
    -->7:         import Tkinter
       8:     except ModuleNotFoundError as e:


no curses
~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_module_not_found_error.py", line 92, in test_no_curses
        import curses
    ModuleNotFoundError: No module named '_curses'
    
        The curses module is rarely installed with Python on Windows.
        
    A `ModuleNotFoundError` exception indicates that you
    are trying to import a module that cannot be found by Python.
    This could be because you misspelled the name of the module
    or because it is not installed on your computer.
    
    You have tried to import the curses module.
    The curses module is rarely installed with Python on Windows.
    
    Exception raised on line 92 of file TESTS:\runtime\test_module_not_found_error.py.
    
       90:     def test_no_curses():
       91:         try:
    -->92:             import curses
       93:         except ModuleNotFoundError as e:


NameError
---------


Annotated variable
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 25, in test_Annotated_variable
        y = x
    NameError: name 'x' is not defined
    
        Did you use a colon instead of an equal sign?
        
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    In your program, no object with the name `x` exists.
    A type hint found for `x` in the global scope.
    Perhaps you had used a colon instead of an equal sign and wrote
    
        x : 3
    
    instead of
    
        x = 3
    
    Exception raised on line 25 of file TESTS:\runtime\test_name_error.py.
    
       23: def test_Annotated_variable():
       24:     try:
    -->25:         y = x
                       ^
       26:     except NameError as e:


Custom name
~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 193, in test_Custom_name
        python
    NameError: name 'python' is not defined
    
        You are already using Python!
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    You are already using Python!
    Exception raised on line 193 of file TESTS:\runtime\test_name_error.py.
    
       191: def test_Custom_name():
       192:     try:
    -->193:         python
       194:     except NameError as e:


Free variable referenced
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 177, in test_Free_variable_referenced
        outer()
      File "TESTS:\runtime\test_name_error.py", line 173, in outer
        inner()
      File "TESTS:\runtime\test_name_error.py", line 172, in inner
        return var
    NameError: free variable 'var' referenced before assignment in enclosing scope
    
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    In your program, `var` is an unknown name
    that exists in an enclosing scope,
    but has not yet been assigned a value.
    
    Execution stopped on line 177 of file TESTS:\runtime\test_name_error.py.
    
       173:         inner()
       174:         var = 4
       176:     try:
    -->177:         outer()
       178:     except NameError as e:

            outer:  <function outer>
                defined in <function test_Free_variable_referenced>
        
    Exception raised on line 172 of file TESTS:\runtime\test_name_error.py.
    
       171:         def inner():
    -->172:             return var
                               ^^^


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 10, in test_Generic
        this = something
    NameError: name 'something' is not defined
    
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    In your program, no object with the name `something` exists.
    I have no additional information for you.
    
    Exception raised on line 10 of file TESTS:\runtime\test_name_error.py.
    
        8: def test_Generic():
        9:     try:
    -->10:         this = something
                          ^^^^^^^^^
       11:     except NameError as e:


Missing import
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 130, in test_Missing_import
        unicodedata.something
    NameError: name 'unicodedata' is not defined
    
        Did you forget to import `unicodedata`?
        
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    
    The name `unicodedata` is not defined in your program.
    Perhaps you forgot to import `unicodedata` which is found
    in Python's standard library.
    
    `unicodedata` is a name found in module `stringprep`.
    Perhaps you forgot to write
    
        from stringprep import unicodedata
    
    Exception raised on line 130 of file TESTS:\runtime\test_name_error.py.
    
       126:     if friendly_traceback.get_lang() == "en":
       127:         assert "I have no additional information for you." in result
       129:     try:
    -->130:         unicodedata.something
                    ^^^^^^^^^^^
       131:     except NameError as e:


Missing module name
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 277, in test_Missing_module_name
        frame = Frame()
    NameError: name 'Frame' is not defined
    
        Did you forget to add `tkinter.`?
        
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    In your program, no object with the name `Frame` exists.
    
    The local object `tkinter`
    has an attribute named `Frame`.
    Perhaps you should have written `tkinter.Frame`
    instead of `Frame`.
    
    `Frame` is a name found in the following modules from the standard library:
    tkinter, tracemalloc.
    Perhaps you forgot to import `Frame` from one of these modules.
    
    Exception raised on line 277 of file TESTS:\runtime\test_name_error.py.
    
       274: def test_Missing_module_name():
       275:     import tkinter
       276:     try:
    -->277:         frame = Frame()
                            ^^^^^
       278:     except NameError as e:


Missing self 1
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 228, in test_Missing_self_1
        str(a)
      File "TESTS:\runtime\test_name_error.py", line 219, in __str__
        toys_list = add_toy(  # ensure that it can see 'self' on following line
    NameError: name 'add_toy' is not defined
    
        Did you write `self` at the wrong place?
        
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    In your program, no object with the name `add_toy` exists.
    
    The local object `<Pet object> defined in <function test_name_error.test_Missing_self_1>`
    has an attribute named `add_toy`.
    Perhaps you should have written `self.add_toy(...`
    instead of `add_toy(self, ...`.
    
    Execution stopped on line 228 of file TESTS:\runtime\test_name_error.py.
    
       224:                 return "{} has no toys".format(self.name)
       226:     a = Pet('Fido')
       227:     try:
    -->228:         str(a)
       229:     except NameError as e:

            a:  <Pet object>
                defined in <function test_name_error.test_Missing_self_1>
            str:  <class str>
        
    Exception raised on line 219 of file TESTS:\runtime\test_name_error.py.
    
       217:         def __str__(self):
       218:             # self at the wrong place
    -->219:             toys_list = add_toy(  # ensure that it can see 'self' on following line
                                    ^^^^^^^
       220:                                 self, 'something')
       221:             if self.toys:


Missing self 2
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 262, in test_Missing_self_2
        str(a)
      File "TESTS:\runtime\test_name_error.py", line 254, in __str__
        toys_list = add_toy('something')
    NameError: name 'add_toy' is not defined
    
        Did you forget to add `self.`?
        
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    In your program, no object with the name `add_toy` exists.
    
    A local object, `<Pet object> defined in <function test_name_error.test_Missing_self_2>`,
    has an attribute named `add_toy`.
    Perhaps you should have written `self.add_toy`
    instead of `add_toy`.
    
    Execution stopped on line 262 of file TESTS:\runtime\test_name_error.py.
    
       258:                 return "{} has no toys".format(self.name)
       260:     a = Pet('Fido')
       261:     try:
    -->262:         str(a)
       263:     except NameError as e:

            a:  <Pet object>
                defined in <function test_name_error.test_Missing_self_2>
            str:  <class str>
        
    Exception raised on line 254 of file TESTS:\runtime\test_name_error.py.
    
       252:         def __str__(self):
       253:             # Missing self.
    -->254:             toys_list = add_toy('something')
                                    ^^^^^^^
       255:             if self.toys:


Synonym
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 90, in test_Synonym
        cost  # wrote from math import * above
    NameError: name 'cost' is not defined
    
        Did you mean `cos`?
        
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    In your program, no object with the name `cost` exists.
    Instead of writing `cost`, perhaps you meant one of the following:
    *   Global scope: `cos`, `cosh`
    
    Exception raised on line 90 of file TESTS:\runtime\test_name_error.py.
    
       86:     if friendly_traceback.get_lang() == "en":
       87:         assert "The Python builtin `chr` has a similar name." in result
       89:     try:
    -->90:         cost  # wrote from math import * above
       91:     except NameError as e:


missing import2
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 144, in test_missing_import2
        ABCMeta
    NameError: name 'ABCMeta' is not defined
    
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    In your program, no object with the name `ABCMeta` exists.
    `ABCMeta` is a name found in the following modules from the standard library:
    abc, numbers, selectors, typing.
    Perhaps you forgot to import `ABCMeta` from one of these modules.
    
    Exception raised on line 144 of file TESTS:\runtime\test_name_error.py.
    
       142: def test_missing_import2():
       143:     try:
    -->144:         ABCMeta
       145:     except NameError as e:


missing import3
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_name_error.py", line 158, in test_missing_import3
        AF_APPLETALK
    NameError: name 'AF_APPLETALK' is not defined
    
    A `NameError` exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.
    
    In your program, no object with the name `AF_APPLETALK` exists.
    `AF_APPLETALK` is a name found in module `socket`.
    Perhaps you forgot to write
    
        from socket import AF_APPLETALK
    
    Exception raised on line 158 of file TESTS:\runtime\test_name_error.py.
    
       156: def test_missing_import3():
       157:     try:
    -->158:         AF_APPLETALK
       159:     except NameError as e:


OsError
-------


Urllib error
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "PYTHON_LIB:\urllib\request.py", line 1346, in do_open
           ... More lines not shown. ...
      File "PYTHON_LIB:\socket.py", line 822, in create_connection
        for res in getaddrinfo(host, port, 0, SOCK_STREAM):
      File "PYTHON_LIB:\socket.py", line 953, in getaddrinfo
        for res in _socket.getaddrinfo(host, port, family, type, proto, flags):
    socket.gaierror: [Errno 11001] getaddrinfo failed
    
        During handling of the above exception, another exception occurred:
    
    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 8, in test_Urllib_error
        request.urlopen("http://does_not_exist")
    URLError: <urlopen error [Errno 11001] getaddrinfo failed>
    
    An exception of type `URLError` is a subclass of `OSError`.
    An `OSError` exception is usually raised by the Operating System
    to indicate that an operation is not allowed or that
    a resource is not available.
    
    I suspect that you are trying to connect to a server and
    that a connection cannot be made.
    
    If that is the case, check for typos in the URL
    and check your internet connectivity.
    
    Exception raised on line 8 of file TESTS:\runtime\test_os_error.py.
    
       5: def test_Urllib_error():
       6:     from urllib import request, error
       7:     try:
    -->8:         request.urlopen("http://does_not_exist")
       9:     except error.URLError as e:

            request:  <module urllib.request> from PYTHON_LIB:\urllib\request.py
            request.urlopen:  <function urlopen>
        


invalid argument
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 46, in test_invalid_argument
        open("c:\test.txt")
    OSError: [Errno 22] Invalid argument: 'c:\test.txt'
    
        Perhaps you need to double the backslash characters.
        
    An `OSError` exception is usually raised by the Operating System
    to indicate that an operation is not allowed or that
    a resource is not available.
    
    I suspect that you wrote a filename or path that contains
    at least one backslash character, `\`.
    Python likely interpreted this as indicating the beginning of
    what is known as an escape sequence.
    To solve the problem, either write a so-called 'raw string'
    by adding the letter `r` as a prefix in
    front of the filename or path, or replace all single backslash
    characters, `\`, by double ones: `\\`.
    
    Exception raised on line 46 of file TESTS:\runtime\test_os_error.py.
    
       43:     if os.name != "nt":
       44:         return "Windows test only", "No result"
       45:     try:
    -->46:         open("c:\test.txt")
       47:     except OSError as e:

            open:  <builtin function open>
        


no information
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_os_error.py", line 27, in test_no_information
        raise OSError("Some unknown message")
    OSError: Some unknown message
    
        Friendly-traceback does not know the cause of this error.
        
    An `OSError` exception is usually raised by the Operating System
    to indicate that an operation is not allowed or that
    a resource is not available.
    
    No information is known about this exception.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    If you are using the Friendly console, use `www()` to
    do an Internet search for this particular case.
    
    Exception raised on line 27 of file TESTS:\runtime\test_os_error.py.
    
       24:     old_debug = friendly_traceback.debug_helper.DEBUG
       25:     friendly_traceback.debug_helper.DEBUG = False
       26:     try:
    -->27:         raise OSError("Some unknown message")
       28:     except OSError as e:

            OSError:  <class OSError>
        


OverflowError
-------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_overflow_error.py", line 6, in test_Generic
        2.0 ** 1600
    OverflowError: (34, 'Result too large')
    
    An `OverflowError` is raised when the result of an arithmetic operation
    is too large to be handled by the computer's processor.
    
    Exception raised on line 6 of file TESTS:\runtime\test_overflow_error.py.
    
       4: def test_Generic():
       5:     try:
    -->6:         2.0 ** 1600
       7:     except OverflowError as e:


RecursionError
--------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_recursion_error.py", line 8, in test_Generic
        a()
           ... More lines not shown. ...
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
      File "TESTS:\runtime\test_recursion_error.py", line 6, in a
        return a()
    RecursionError: maximum recursion depth exceeded
    
    A `RecursionError` is raised when a function calls itself,
    directly or indirectly, too many times.
    It almost always indicates that you made an error in your code
    and that your program would never stop.
    
    Execution stopped on line 8 of file TESTS:\runtime\test_recursion_error.py.
    
       5:     def a():
       6:         return a()
       7:     try:
    -->8:         a()
       9:     except RecursionError as e:

            a:  <function a> defined in <function test_Generic>
        
    Exception raised on line 6 of file TESTS:\runtime\test_recursion_error.py.
    
       5:     def a():
    -->6:         return a()
                         ^^^

            a:  <function a> defined in <function test_Generic>
        


TypeError
---------


Bad type for unary operator
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 376, in test_Bad_type_for_unary_operator
        a =+ "def"
    TypeError: bad operand type for unary +: 'str'
    
        Perhaps you meant to write `+=` instead of `=+`
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You tried to use the unary operator '+'
    with the following type of object: a string (`str`).
    This operation is not defined for this type of object.
    
    Perhaps you meant to write `+=` instead of `=+`
    
    Exception raised on line 376 of file TESTS:\runtime\test_type_error.py.
    
       371:         assert "You tried to use the unary operator '~'" in result
       373:     try:
       374:         # fmt: off
       375:         a = "abc"
    -->376:         a =+ "def"
                       ^^^^^^^
       377:         # fmt: on


Builtin has no len
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 808, in test_Builtin_has_no_len
        len("Hello world".split)
    TypeError: object of type 'builtin_function_or_method' has no len()
    
        Did you forget to call `"Hello world".split`?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    I suspect that you forgot to add parentheses to call `"Hello world".split`.
    You might have meant to write:
    `len("Hello world".split())`
    
    Exception raised on line 808 of file TESTS:\runtime\test_type_error.py.
    
       806: def test_Builtin_has_no_len():
       807:     try:
    -->808:         len("Hello world".split)
       809:     except TypeError as e:

            len:  <builtin function len>
            "Hello world".split:  <builtin method split of str object>
        


Can only concatenate
~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 39, in test_Can_only_concatenate
        result = a_tuple + a_list
    TypeError: can only concatenate tuple (not "list") to tuple
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You tried to concatenate (add) two different types of objects:
    a `tuple` and a `list`.
    
    Exception raised on line 39 of file TESTS:\runtime\test_type_error.py.
    
       36:     try:
       37:         a_tuple = (1, 2, 3)
       38:         a_list = [1, 2, 3]
    -->39:         result = a_tuple + a_list
                            ^^^^^^^^^^^^^^^^
       40:     except TypeError as e:

            a_list:  [1, 2, 3]
            a_tuple:  (1, 2, 3)
        


Cannot convert dictionary update sequence
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 794, in test_Cannot_convert_dictionary_update_sequence
        dd.update([1, 2, 3])
    TypeError: cannot convert dictionary update sequence element #0 to a sequence
    
        Perhaps you need to use the `dict.fromkeys()` method.
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    `dict.update()` does not accept a sequence as an argument.
    Instead of writing `dd.update([1, 2, 3])`
    perhaps you should use the `dict.fromkeys()` method: `dd.update( dict.fromkeys([1, 2, 3]) )`.
    
    Exception raised on line 794 of file TESTS:\runtime\test_type_error.py.
    
       790:         assert "you should use the `dict.fromkeys()`" in result
       792:     dd = {"a": "a"}
       793:     try:
    -->794:         dd.update([1, 2, 3])
       795:     except TypeError as e:

            dd:  {'a': 'a'}
            dd.update:  <builtin method update of dict object>
        


Cannot multiply by non int
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 592, in test_Cannot_multiply_by_non_int
        "a" * "2"
    TypeError: can't multiply sequence by non-int of type 'str'
    
        Did you forget to convert `"2"` into an integer?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You can only multiply sequences, such as list, tuples,
     strings, etc., by integers.
    Perhaps you forgot to convert `"2"` into an integer.
    
    Exception raised on line 592 of file TESTS:\runtime\test_type_error.py.
    
       588:     if friendly_traceback.get_lang() == "en":
       589:         assert "Did you forget to convert `c` into an integer?" in result
       591:     try:
    -->592:         "a" * "2"
       593:     except TypeError as e:


Cannot unpack non iterable object
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 766, in test_Cannot_unpack_non_iterable_object
        a, b = 42.0
    TypeError: cannot unpack non-iterable float object
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    Unpacking is a convenient way to assign a name,
    to each item of an iterable.
    An iterable is an object capable of returning its members one at a time.
    Python containers (`list, tuple, dict`, etc.) are iterables,
    but not objects of type `float`.
    
    Exception raised on line 766 of file TESTS:\runtime\test_type_error.py.
    
       764: def test_Cannot_unpack_non_iterable_object():
       765:     try:
    -->766:         a, b = 42.0
       767:     except TypeError as e:


Comparison not supported
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 325, in test_Comparison_not_supported
        b >= a
    TypeError: '>=' not supported between instances of 'int' and 'str'
    
        Did you forget to convert the string `a` into an integer (`int`)?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You tried to do an order comparison (>=)
    between two incompatible types of objects:
    an integer (`int`) and a string (`str`).
    Perhaps you forgot to convert the string `a` into an integer (`int`).
    
    Exception raised on line 325 of file TESTS:\runtime\test_type_error.py.
    
       322:     try:
       323:         a = "2"
       324:         b = 42
    -->325:         b >= a
       326:     except TypeError as e:

            a:  '2'
            b:  42
        


Derive from BaseException
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 535, in test_Derive_from_BaseException
        raise "exception"  # noqa
    TypeError: exceptions must derive from BaseException
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    In Python 3, exceptions must be derived from BaseException.
    
    Exception raised on line 535 of file TESTS:\runtime\test_type_error.py.
    
       533: def test_Derive_from_BaseException():
       534:     try:
    -->535:         raise "exception"  # noqa
       536:     except TypeError as e:


Indices must be integers or slices
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 674, in test_Indices_must_be_integers_or_slices
        [1, 2, 3]["2"]
    TypeError: list indices must be integers or slices, not str
    
        Did you forget to convert `"2"` into an integer?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    In the expression `[1, 2, 3]["2"]`
    what is included between the square brackets, `[...]`,
    must be either an integer or a slice
    (`start:stop` or `start:stop:step`) 
    and you have used a string (`str`) instead.
    
    Perhaps you forgot to convert `"2"` into an integer.
    
    Exception raised on line 674 of file TESTS:\runtime\test_type_error.py.
    
       670:     if friendly_traceback.get_lang() == "en":
       671:         assert "Perhaps you forgot to convert `2.0` into an integer." in result
       673:     try:
    -->674:         [1, 2, 3]["2"]
       675:     except TypeError as e:


Not an integer
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 637, in test_Not_an_integer
        range(c, d)
    TypeError: 'str' object cannot be interpreted as an integer
    
        Did you forget to convert `c, d` into integers?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You wrote an object of type `str` where an integer was expected.
    Perhaps you forgot to convert `c, d` into integers.
    Exception raised on line 637 of file TESTS:\runtime\test_type_error.py.
    
       633:         assert "Perhaps you forgot to convert `1.0" in result
       635:     c, d = "2", "3"
       636:     try:
    -->637:         range(c, d)
       638:     except TypeError as e:

            c:  '2'
            d:  '3'
            range:  <class range>
        


Not callable
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 519, in test_Not_callable
        _ = [1, 2](a + b)
    TypeError: 'list' object is not callable
    
        Did you mean `[1, 2][a + b]`?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    Because of the surrounding parenthesis, `(a + b)` 
    is interpreted by Python as indicating a function call for 
    `[1, 2]`, which is an object of type `list`
    which cannot be called.
    
    However, `[1, 2]` is a sequence.
    Perhaps you meant to use `[]` instead of `()` and write
    `[1, 2][a + b]`
    
    Exception raised on line 519 of file TESTS:\runtime\test_type_error.py.
    
       515:         assert "b.a_list[3]" in result
       517:     try:
       518:         a, b = 3, 7
    -->519:         _ = [1, 2](a + b)
                        ^^^^^^^^^^^^^
       520:     except TypeError as e:

            a:  3
            b:  7
            a + b:  10
        


Object is not iterable
~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 752, in test_Object_is_not_iterable
        list(42)
    TypeError: 'int' object is not iterable
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    An iterable is an object capable of returning its members one at a time.
    Python containers (`list, tuple, dict`, etc.) are iterables.
    An iterable is required here.
    
    Exception raised on line 752 of file TESTS:\runtime\test_type_error.py.
    
       750: def test_Object_is_not_iterable():
       751:     try:
    -->752:         list(42)
       753:     except TypeError as e:

            list:  <class list>
        


Object is not subscriptable
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 735, in test_Object_is_not_subscriptable
        a = f[1]
    TypeError: 'function' object is not subscriptable
    
        Did you mean `f(1)`?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    Subscriptable objects are typically containers from which
    you can retrieve item using the notation `[...]`.
    
    Perhaps you meant to write `f(1)`.
    
    Exception raised on line 735 of file TESTS:\runtime\test_type_error.py.
    
       731:     def f():
       732:         pass
       734:     try:
    -->735:         a = f[1]
                        ^^^^
       736:     except TypeError as e:

            f:  <function f>
                defined in <function test_Object_is_not_subscriptable>
        


Slice indices must be integers or None
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 688, in test_Slice_indices_must_be_integers_or_None
        [1, 2, 3][1.0:2.0]
    TypeError: slice indices must be integers or None or have an __index__ method
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    When using a slice to extract a range of elements
    from a sequence, that is something like
    `[start:stop]` or `[start:stop:step]`
    each of `start`, `stop`, `step` must be either an integer, `None`,
    or possibly some other object having an `__index__` method.
    
    Exception raised on line 688 of file TESTS:\runtime\test_type_error.py.
    
       686: def test_Slice_indices_must_be_integers_or_None():
       687:     try:
    -->688:         [1, 2, 3][1.0:2.0]
       689:     except TypeError as e:


Too few positional argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 449, in test_Too_few_positional_argument
        fn(1)
    TypeError: fn() missing 2 required positional arguments: 'b' and 'c'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You apparently have called the function 'fn()' with
    fewer positional arguments than it requires (2 missing).
    
    Exception raised on line 449 of file TESTS:\runtime\test_type_error.py.
    
       445:     def fn(a, b, c):
       446:         pass
       448:     try:
    -->449:         fn(1)
       450:     except TypeError as e:

            fn:  <function fn>
                defined in <function test_Too_few_positional_argument>
        


Too many positional argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 430, in test_Too_many_positional_argument
        A().f(1)
    TypeError: f() takes 1 positional argument but 2 were given
    
        Perhaps you forgot `self` when defining `f`.
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You apparently have called the function `f` with
    2 positional argument(s) while it requires 1
    such positional argument(s).
    Perhaps you forgot `self` when defining `f`.
    
    Exception raised on line 430 of file TESTS:\runtime\test_type_error.py.
    
       426:         def f(x):
       427:             pass
       429:     try:
    -->430:         A().f(1)
       431:     except TypeError as e:

            A:  <class A>
                defined in <function test_type_error.test_Too_many_positional_argument>
        


Tuple no item assignment
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 397, in test_Tuple_no_item_assignment
        a[0] = 0
    TypeError: 'tuple' object does not support item assignment
    
        Did you mean to use a list?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    In Python, some objects are known as immutable:
    once defined, their value cannot be changed.
    You tried change part of such an immutable object: a `tuple`,
    most likely by using an indexing operation.
    Perhaps you meant to use a list instead.
    
    Exception raised on line 397 of file TESTS:\runtime\test_type_error.py.
    
       394: def test_Tuple_no_item_assignment():
       395:     a = (1, 2, 3)
       396:     try:
    -->397:         a[0] = 0
       398:     except TypeError as e:

            a:  (1, 2, 3)
            a[0]:  1
        


Unhachable type
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 705, in test_Unhachable_type
        {[1, 2]: 1}
    TypeError: unhashable type: 'list'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    Only hashable objects can be used
    as elements of `set` or keys of `dict`.
    Hashable objects are objects that do not change value
    once they have been created.Instead of using a `list`, consider using a `tuple`.
    
    Exception raised on line 705 of file TESTS:\runtime\test_type_error.py.
    
       703: def test_Unhachable_type():
       704:     try:
    -->705:         {[1, 2]: 1}
       706:     except TypeError as e:


Unsupported operand types
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 288, in test_Unsupported_operand_types
        a @= b
    TypeError: unsupported operand type(s) for @=: 'str' and 'int'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You tried to use the operator @=
    using two incompatible types of objects:
    a string (`str`) and an integer (`int`).
    This operator is normally used only
    for multiplication of matrices.
    
    Exception raised on line 288 of file TESTS:\runtime\test_type_error.py.
    
       285:     try:
       286:         a = "a"
       287:         b = 2
    -->288:         a @= b
       289:     except TypeError as e:

            a:  'a'
            b:  2
        


function got multiple argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 900, in test_function_got_multiple_argument
        fn2(0, a=1)
    TypeError: fn2() got multiple values for argument 'a'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You have specified the value of argument `a` more than once
    when calling the function named `fn2`.
    This function has the following arguments:
    `a, b=1`
    
    Exception raised on line 900 of file TESTS:\runtime\test_type_error.py.
    
       896:     def fn2(a, b=1):
       897:         pass
       899:     try:
    -->900:         fn2(0, a=1)
       901:     except TypeError as e:

            fn2:  <function fn2>
                defined in <function test_function_got_multiple_argument>
        


function has no len
~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 825, in test_function_has_no_len
        len(bad)
    TypeError: object of type 'function' has no len()
    
        Did you forget to call `bad`?
        
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    I suspect that you forgot to add parentheses to call `bad`.
    You might have meant to write:
    `len(bad())`
    
    Exception raised on line 825 of file TESTS:\runtime\test_type_error.py.
    
       821:     def bad():
       822:         pass
       824:     try:
    -->825:         len(bad)
       826:     except TypeError as e:

            bad:  <function bad> defined in <function test_function_has_no_len>
            len:  <builtin function len>
        


getattr attribute name must be string
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 946, in test_getattr_attribute_name_must_be_string
        getattr("__repr__", 1)  # as reported in issue #77
    TypeError: getattr(): attribute name must be string
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    The second argument of the function `getattr()` must be a string.
    
    Exception raised on line 946 of file TESTS:\runtime\test_type_error.py.
    
       939:     if friendly_traceback.get_lang() == "en":
       940:         assert (
       941:             "The second argument of the function `hasattr()` must be a string."
       942:             in result
       943:         )
       945:     try:
    -->946:         getattr("__repr__", 1)  # as reported in issue #77
       947:     except TypeError as e:

            getattr:  <builtin function getattr>
        


method got multiple argument
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 919, in test_method_got_multiple_argument
        t.some_method(0, a=1)
    TypeError: some_method() got multiple values for argument 'a'
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    You have specified the value of argument `a` more than once
    when calling the function named `t.some_method`.
    This function has only one argument: `a`
    
    Exception raised on line 919 of file TESTS:\runtime\test_type_error.py.
    
       915:             pass
       917:     t = T()
       918:     try:
    -->919:         t.some_method(0, a=1)
       920:     except TypeError as e:

            t:  <T object>
                defined in <function test_type_error.test_method_got_multiple_argument>
            t.some_method:  <bound method T.some_method>
                of <T object>
                defined in <function test_type_error.test_method_got_multiple_argument>
        


vars arg must have dict
~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_type_error.py", line 869, in test_vars_arg_must_have_dict
        vars(f)
    TypeError: vars() argument must have __dict__ attribute
    
    A `TypeError` is usually caused by trying
    to combine two incompatible types of objects,
    by calling a function with the wrong type of object,
    or by trying to do an operation not allowed on a given type of object.
    
    The function `vars` is used to list the content of the
    `__dict__` attribute of an object.
    Object `f` uses `__slots__` instead of `__dict__`.
    
    Exception raised on line 869 of file TESTS:\runtime\test_type_error.py.
    
       865:         assert no_slots not in result
       866:         assert use_slots not in result
       868:     try:
    -->869:         vars(f)
       870:     except TypeError as e:

            f:  <F object>
                defined in <function test_type_error.test_vars_arg_must_have_dict>
            vars:  <builtin function vars>
        


UnboundLocalError
-----------------


Missing both
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 63, in test_Missing_both
        outer_missing_both()
      File "TESTS:\runtime\test_unbound_local_error.py", line 22, in outer_missing_both
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 21, in inner
        spam_missing_both += 1
    UnboundLocalError: local variable 'spam_missing_both' referenced before assignment
    
        Did you forget to add either `global spam_missing_both` or 
        `nonlocal spam_missing_both`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    You're trying to use the name `spam_missing_both` identified by Python as being
    in the local scope of a function before having assigned it a value.
    
    The name `spam_missing_both` exists in both the global and nonlocal scope.
    This can be rather confusing and is not recommended.
    Depending on which variable you wanted to refer to, you needed to add either
    
        global spam_missing_both
    
    or
    
        nonlocal spam_missing_both
    
    as the first line inside your function.
    
    Execution stopped on line 63 of file TESTS:\runtime\test_unbound_local_error.py.
    
       61: def test_Missing_both():
       62:     try:
    -->63:         outer_missing_both()
       64:     except UnboundLocalError as e:

            global outer_missing_both:  <function outer_missing_both>
        
    Exception raised on line 21 of file TESTS:\runtime\test_unbound_local_error.py.
    
       20:     def inner():
    -->21:         spam_missing_both += 1

            global spam_missing_both:  1
        


Missing global
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 27, in test_Missing_global
        outer_missing_global()
      File "TESTS:\runtime\test_unbound_local_error.py", line 10, in outer_missing_global
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 9, in inner
        spam_missing_global += 1
    UnboundLocalError: local variable 'spam_missing_global' referenced before assignment
    
        Did you forget to add `global spam_missing_global`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    You're trying to use the name `spam_missing_global` identified by Python as being
    in the local scope of a function before having assigned it a value.
    
    The name `spam_missing_global` exists in the global scope.
    Perhaps the statement
    
        global spam_missing_global
    
    should have been included as the first line inside your function.
    
    Execution stopped on line 27 of file TESTS:\runtime\test_unbound_local_error.py.
    
       25: def test_Missing_global():
       26:     try:
    -->27:         outer_missing_global()
       28:     except UnboundLocalError as e:

            global outer_missing_global:  <function outer_missing_global>
        
    Exception raised on line 9 of file TESTS:\runtime\test_unbound_local_error.py.
    
       8:     def inner():
    -->9:         spam_missing_global += 1

            global spam_missing_global:  1
        


Missing nonlocal
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 45, in test_Missing_nonlocal
        outer_missing_nonlocal()
      File "TESTS:\runtime\test_unbound_local_error.py", line 16, in outer_missing_nonlocal
        inner()
      File "TESTS:\runtime\test_unbound_local_error.py", line 15, in inner
        spam_missing_nonlocal += 1
    UnboundLocalError: local variable 'spam_missing_nonlocal' referenced before assignment
    
        Did you forget to add `nonlocal spam_missing_nonlocal`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    You're trying to use the name `spam_missing_nonlocal` identified by Python as being
    in the local scope of a function before having assigned it a value.
    
    The name `spam_missing_nonlocal` exists in the nonlocal scope.
    Perhaps the statement
    
        nonlocal spam_missing_nonlocal
    
    should have been included as the first line inside your function.
    
    Execution stopped on line 45 of file TESTS:\runtime\test_unbound_local_error.py.
    
       43: def test_Missing_nonlocal():
       44:     try:
    -->45:         outer_missing_nonlocal()
       46:     except UnboundLocalError as e:

            global outer_missing_nonlocal:  <function outer_missing_nonlocal>
        
    Exception raised on line 15 of file TESTS:\runtime\test_unbound_local_error.py.
    
       14:     def inner():
    -->15:         spam_missing_nonlocal += 1


Typo in local
~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 101, in test_Typo_in_local
        test2()
      File "TESTS:\runtime\test_unbound_local_error.py", line 98, in test2
        alpha3 += 1
    UnboundLocalError: local variable 'alpha3' referenced before assignment
    
        Did you mean `alpha1`?
        
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    Instead of writing `alpha3`, perhaps you meant one of the following:
    *   Local scope: `alpha1`, `alpha2`
    
    Execution stopped on line 101 of file TESTS:\runtime\test_unbound_local_error.py.
    
        97:         alpha2 = 1
        98:         alpha3 += 1
       100:     try:
    -->101:         test2()
       102:     except UnboundLocalError as e:

            test2:  <function test2> defined in <function test_Typo_in_local>
        
    Exception raised on line 98 of file TESTS:\runtime\test_unbound_local_error.py.
    
       95:     def test2():
       96:         alpha1 = 1
       97:         alpha2 = 1
    -->98:         alpha3 += 1


Using name of builtin
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unbound_local_error.py", line 121, in test_Using_name_of_builtin
        dist([])
      File "TESTS:\runtime\test_unbound_local_error.py", line 117, in dist
        max = max(points)
    UnboundLocalError: local variable 'max' referenced before assignment
    
    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a `global`
    (or sometimes `nonlocal`) variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an `UnboundLocalError`.
    
    `max` is a Python builtin function.
    You have tried to assign a value to `max` inside a function
    while also using its original meaning in the function.
    
    Note that it is generally not a good idea to give a local variable
    the same name as a Python builtin function (like `max`).
    
    Execution stopped on line 121 of file TESTS:\runtime\test_unbound_local_error.py.
    
       118:         min = min(points)
       119:         return max - min
       120:     try:
    -->121:         dist([])
       122:     except UnboundLocalError as e:

            dist:  <function dist> defined in <function test_Using_name_of_builtin>
        
    Exception raised on line 117 of file TESTS:\runtime\test_unbound_local_error.py.
    
       116:     def dist(points):
    -->117:         max = max(points)
                    ^^^
       118:         min = min(points)

            max:  <builtin function max>
        


UnknownError
------------


Generic
~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_unknown_error.py", line 12, in test_Generic
        raise UnknownException("Some informative message about an unknown exception.")
    UnknownException: Some informative message about an unknown exception.
    
    No information is known about this exception.
    Please report this example to
    https://github.com/friendly-traceback/friendly-traceback/issues/new
    If you are using a REPL, use `www('bug')` to do so.
    
    If you are using the Friendly console, use `www()` to
    do an Internet search for this particular case.
    
    Exception raised on line 12 of file TESTS:\runtime\test_unknown_error.py.
    
        9:     old_debug = friendly_traceback.debug_helper.DEBUG
       10:     friendly_traceback.debug_helper.DEBUG = False
       11:     try:
    -->12:         raise UnknownException("Some informative message about an unknown exception.")
       13:     except Exception as e:

            global UnknownException:  <class test_unknown_error.UnknownException>
        


ValueError
----------


Convert to int
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 187, in test_Convert_to_int
        int('13a')
    ValueError: invalid literal for int() with base 10: '13a'
    
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
    `'13a'` is an invalid argument for `int()` in base `10`.
    In base `10`, `int()` is most often use to convert a string
    containing the digits `0` to `9` into an integer.
    The following characters are not allowed: `a`.
    
    Exception raised on line 187 of file TESTS:\runtime\test_value_error.py.
    
       183:     if english:
       184:         assert "needs to be first converted using `float()`" in result
       186:     try:
    -->187:         int('13a')
       188:     except ValueError as e:

            int:  <class int>
        


Could not convert to float
~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 88, in test_Could_not_convert_to_float
        float("42b")
    ValueError: could not convert string to float: '42b'
    
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
    The string `42b` cannot be converted to a `float`.
    
    Exception raised on line 88 of file TESTS:\runtime\test_value_error.py.
    
       86: def test_Could_not_convert_to_float():
       87:     try:
    -->88:         float("42b")
       89:     except ValueError as e:

            float:  <class float>
        


Date invalid month
~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 58, in test_Date_invalid_month
        d = date(2021, 13, 1)
    ValueError: month must be in 1..12
    
        Did you specify an invalid month?
        
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
    I am guessing that you specify an invalid value for a month
    in a `date` object. Valid values are integers, from 1 to 12.
    
    Exception raised on line 58 of file TESTS:\runtime\test_value_error.py.
    
       55: def test_Date_invalid_month():
       56:     from datetime import date
       57:     try:
    -->58:         d = date(2021, 13, 1)
                       ^^^^^^^^^^^^^^^^^
       59:     except ValueError as e:

            date:  <class datetime.date>
        


Not enough values to unpack
~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 28, in test_Not_enough_values_to_unpack
        a, b, c = d
    ValueError: not enough values to unpack (expected 3, got 2)
    
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
    Unpacking is a convenient way to assign a name,
    to each item of an iterable.
    In this instance, there are more names (3)
    than the length of the iterable, a string (`str`) of length 2.
    
    Exception raised on line 28 of file TESTS:\runtime\test_value_error.py.
    
       24:     assert "ValueError: not enough values to unpack (expected 3, got 2)" in result
       26:     d = "ab"
       27:     try:
    -->28:         a, b, c = d
       29:     except ValueError as e:

            d:  'ab'
        


Pow third arg cannot be zero
~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 103, in test_Pow_third_arg_cannot_be_zero
        pow(2, 4, a)
    ValueError: pow() 3rd argument cannot be 0
    
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
    The third argument of the function `pow()` cannot be zero.
    
    Exception raised on line 103 of file TESTS:\runtime\test_value_error.py.
    
       100: def test_Pow_third_arg_cannot_be_zero():
       101:     a = 0
       102:     try:
    -->103:         pow(2, 4, a)
       104:     except ValueError as e:

            a:  0
            pow:  <builtin function pow>
        


Slots conflicts with class variable
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 72, in test_Slots_conflicts_with_class_variable
        class F:
    ValueError: 'a' in __slots__ conflicts with class variable
    
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
    The name `a` is used both as the name of a class variable
    and as a string item in the class `__slots__`;
    this is not allowed.
    
    Exception raised on line 72 of file TESTS:\runtime\test_value_error.py.
    
       70: def test_Slots_conflicts_with_class_variable():
       71:     try:
    -->72:         class F:
       73:             __slots__ = ["a", "b"]


Too many values to unpack
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 43, in test_Too_many_values_to_unpack
        a, b = c
    ValueError: too many values to unpack (expected 2)
    
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
    Unpacking is a convenient way to assign a name,
    to each item of an iterable.
    In this instance, there are fewer names (2)
    than the length of the iterable, a `list` of length 3.
    
    Exception raised on line 43 of file TESTS:\runtime\test_value_error.py.
    
       40: def test_Too_many_values_to_unpack():
       41:     c = [1, 2, 3]
       42:     try:
    -->43:         a, b = c
       44:     except ValueError as e:

            c:  [1, 2, 3]
        


int base not in range
~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 201, in test_int_base_not_in_range
        int('18', base=37)
    ValueError: int() base must be >= 2 and <= 36, or 0
    
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
    The argument `base` of `int()` must be either zero
    or any integer from 2 to 36.
    You wrote 37 which is not allowed.
    
    Exception raised on line 201 of file TESTS:\runtime\test_value_error.py.
    
       199: def test_int_base_not_in_range():
       200:     try:
    -->201:         int('18', base=37)
       202:     except ValueError as e:

            int:  <class int>
        


time strptime incorrect format
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_value_error.py", line 127, in test_time_strptime_incorrect_format
        time.strptime("2020-01-01", "%d %m %Y")
    ValueError: time data '2020-01-01' does not match format '%d %m %Y'
    
    A `ValueError` indicates that a function or an operation
    received an argument of the right type, but an inappropriate value.
    
    The value you gave for the time is not in the format you specified.
    Make sure to use the same separator between items
    (for example, between day and month) and keep the order the same
    in both the data provided and the format you specified.
    The following table might be useful:
    https://docs.python.org/3/library/time.html#time.strftime
    The following site might also be useful: https://www.strfti.me/
    
    Exception raised on line 127 of file TESTS:\runtime\test_value_error.py.
    
       123:         return
       125:     import time
       126:     try:
    -->127:         time.strptime("2020-01-01", "%d %m %Y")
       128:     except ValueError as e:

            time:  <module time (builtin)>
            time.strptime:  <builtin function strptime>
        


ZeroDivisionError
-----------------


Complex division
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 155, in test_Complex_division
        1 / zero
    ZeroDivisionError: complex division by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    You are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Exception raised on line 155 of file TESTS:\runtime\test_zero_division_error.py.
    
       152: def test_Complex_division():
       153:     zero = 0j
       154:     try:
    -->155:         1 / zero
       156:     except ZeroDivisionError as e:

            zero:  0j
        


Division by zero literal
~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 199, in test_Division_by_zero_literal
        1. / 0
    ZeroDivisionError: float division by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    You are dividing by zero.
    
    Exception raised on line 199 of file TESTS:\runtime\test_zero_division_error.py.
    
       194:     if friendly_traceback.get_lang() == "en":
       195:         assert "Using the modulo operator, you are dividing by zero" in result
       198:     try:
    -->199:         1. / 0
       200:     except ZeroDivisionError as e:


Division operator
~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 17, in test_Division_operator
        1 / zero
    ZeroDivisionError: division by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    You are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Exception raised on line 17 of file TESTS:\runtime\test_zero_division_error.py.
    
       13:     if friendly_traceback.get_lang() == "en":
       14:         assert "The following mathematical expression includes a division by zero" in result
       16:     try:
    -->17:         1 / zero
       18:     except ZeroDivisionError as e:

            zero:  0
        


Divmod
~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 82, in test_Divmod
        divmod(1, zero)
    ZeroDivisionError: integer division or modulo by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    The second argument of the `divmod()` function is zero.
    
    Exception raised on line 82 of file TESTS:\runtime\test_zero_division_error.py.
    
       79: def test_Divmod():
       80:     zero = 0
       81:     try:
    -->82:         divmod(1, zero)
       83:     except ZeroDivisionError as e:

            zero:  0
            divmod:  <builtin function divmod>
        


Float division
~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 125, in test_Float_division
        1 / zero
    ZeroDivisionError: float division by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    You are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Exception raised on line 125 of file TESTS:\runtime\test_zero_division_error.py.
    
       122: def test_Float_division():
       123:     zero = 0.
       124:     try:
    -->125:         1 / zero
       126:     except ZeroDivisionError as e:

            zero:  0.0
        


Float divmod
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 140, in test_Float_divmod
        divmod(1, zero)
    ZeroDivisionError: float divmod()
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    The second argument of the `divmod()` function is equal to zero.
    
    Exception raised on line 140 of file TESTS:\runtime\test_zero_division_error.py.
    
       137: def test_Float_divmod():
       138:     zero = 0.
       139:     try:
    -->140:         divmod(1, zero)
       141:     except ZeroDivisionError as e:

            zero:  0.0
            divmod:  <builtin function divmod>
        


Float modulo
~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 110, in test_Float_modulo
        1 % zero
    ZeroDivisionError: float modulo
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    Using the modulo operator, you are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Exception raised on line 110 of file TESTS:\runtime\test_zero_division_error.py.
    
       106:         assert "The following mathematical expression includes a division by zero" in result
       107:         assert "done using the modulo operator" in result
       109:     try:
    -->110:         1 % zero
       111:     except ZeroDivisionError as e:

            zero:  0.0
        


Integer division operator
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 42, in test_Integer_division_operator
        1 // zero
    ZeroDivisionError: integer division or modulo by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    You are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Exception raised on line 42 of file TESTS:\runtime\test_zero_division_error.py.
    
       38:     if friendly_traceback.get_lang() == "en":
       39:         assert "The following mathematical expression includes a division by zero" in result
       41:     try:
    -->42:         1 // zero
       43:     except ZeroDivisionError as e:

            zero:  0
        


Mixed operations
~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 212, in test_Mixed_operations
        a = divmod(8, 1 // 2)
    ZeroDivisionError: integer division or modulo by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    The following mathematical expression includes a division by zero:
    
        divmod(8, 1 // 2)
    
    Exception raised on line 212 of file TESTS:\runtime\test_zero_division_error.py.
    
       210: def test_Mixed_operations():
       211:     try:
    -->212:         a = divmod(8, 1 // 2)
                        ^^^^^^^^^^^^^^^^^
       213:     except ZeroDivisionError as e:

            divmod:  <builtin function divmod>
            1 // 2:  0
        


Modulo operator
~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 67, in test_Modulo_operator
        1 % zero
    ZeroDivisionError: integer division or modulo by zero
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    Using the modulo operator, you are dividing by the following term
    
         zero
    
    which is equal to zero.
    
    Exception raised on line 67 of file TESTS:\runtime\test_zero_division_error.py.
    
       63:     if friendly_traceback.get_lang() == "en":
       64:         assert "The following mathematical expression includes a division by zero" in result
       66:     try:
    -->67:         1 % zero
       68:     except ZeroDivisionError as e:

            zero:  0
        


Raise zero negative power
~~~~~~~~~~~~~~~~~~~~~~~~~

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\runtime\test_zero_division_error.py", line 170, in test_Raise_zero_negative_power
        zero ** -1
    ZeroDivisionError: 0.0 cannot be raised to a negative power
    
    A `ZeroDivisionError` occurs when you are attempting to divide a value
    by zero either directly or by using some other mathematical operation.
    
    You are attempting to raise the number 0 to a negative power
    which is equivalent to dividing by zero.
    
    Exception raised on line 170 of file TESTS:\runtime\test_zero_division_error.py.
    
       167: def test_Raise_zero_negative_power():
       168:     zero = 0
       169:     try:
    -->170:         zero ** -1
       171:     except ZeroDivisionError as e:

            zero:  0
        

