
Friendly SyntaxError tracebacks - en español
=============================================

Friendly tiene como objetivo proporcionar comentarios más amigables
cuando se produce una excepción
se plantea que lo que hace Python (translated by Google Translate).

This file contains only examples of SyntaxError and its sub-classes.
Some tests may appear to be repetitive to a human reader
but they are may be included to ensure more complete test coverage.

.. note::

     The content of this page is generated by running
     `trb_syntax_spanish.py` located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.
     On Windows, if Sphinx is installed on your computer, it is suggested
     instead to run make_trb.bat in the root directory as it will create
     similar files for all languages *and* update the documentation.

Friendly-traceback version: 0.4.78
Python version: 3.9.5



(1) Using 'and' in import statement
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\and_in_import_statement.py", line 1
        from math import sin and cos
                             ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\and_in_import_statement.py'
    en la ubicación indicada por ^.
    
    -->1: from math import sin and cos
                               ^

    La palabra clave de Python `and` sólo puede utilizarse para expresiones booleanas.
    Quizás haya querido escribir
    
    `from math import sin , cos`
    

(2) Using 'and' after comma in import statement
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\and_in_import_statement_2.py", line 1
        from math import sin, tan, and cos
                                   ^
    SyntaxError: trailing comma not allowed without surrounding parentheses
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\and_in_import_statement_2.py'
    en la ubicación indicada por ^.
    
    -->1: from math import sin, tan, and cos
                                     ^

    Python indica que hay que rodear una expresión
    que termina con una coma por medio de paréntesis.
    However, I suspect that you wrote the keyword `and` by mistake.
    The Python keyword `and` can only be used for boolean expressions.
    Quizás quisiste escribir
    
    `from math import sin, tan,  cos`
    

(3) Annotated name cannot be global
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\annotated_name_global.py", line 4
        x:int = 1
        ^
    SyntaxError: annotated name 'x' can't be global
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\annotated_name_global.py'
    en la ubicación indicada por ^.
    
       1: # SyntaxError: annotated name 'x' can't be global
       2: def foo():
       3:     global x
    -->4:     x:int = 1
              ^

    The object named `x` is defined with type annotation
    as a local variable. It cannot be declared to be a global variable.
    

(4) Incorrect use of 'from module import ... as ...
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\as_instead_of_comma_in_import.py", line 2
        from math import (sin, cos) as funcs
                                    ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\as_instead_of_comma_in_import.py'
    en la ubicación indicada por ^.
    
       1: # issue 158
    -->2: from math import (sin, cos) as funcs
                                      ^

    Supongo que estás intentando importar al menos un objeto
    del módulo `math` y renombrarlo usando la palabra clave de Python `as`;
    esta palabra clave sólo puede ser utilizada para renombrar un objeto a la vez
    utilizando una sintaxis bien definida.
    Le sugiero que divida cualquier declaración de importación con cada objeto
    renombrado en una línea separada como sigue:
    
        from math import objeto_1 as nombre_1
        from math import objeto_2 as nombre_2  # si es necesario
    

(5) Assign instead of equal (or walrus).
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_instead_of_equal.py", line 1
        a = (b = 2)  # issue #65
               ^
    SyntaxError: invalid syntax
    
        Tal vez necesitabas `==` o `:=` en lugar de `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_instead_of_equal.py'
    en la ubicación indicada por ^.
    
    -->1: a = (b = 2)  # issue #65
                 ^

    Has utilizado un operador de asignación `=`; quizás querías utilizar 
    un operador de igualdad, `==`, o el operador de asignación aumentado `:=`.
    

(6) Name assigned prior to global declaration
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_global_1.py", line 7
        global p
        ^
    SyntaxError: name 'p' is assigned to before global declaration
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_name_before_global_1.py'
    en la ubicación indicada por ^.
    
       3: 
       4: 
       5: def fn():
       6:     p = 1
    -->7:     global p
              ^

    You assigned a value to the variable `p`
    before declaring it as a global variable.
    

(7) Name used prior to global declaration
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_global_2.py", line 7
        global r
        ^
    SyntaxError: name 'r' is used prior to global declaration
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_name_before_global_2.py'
    en la ubicación indicada por ^.
    
       3: 
       4: 
       5: def fn():
       6:     print(r)
    -->7:     global r
              ^

    You used the variable `r`
    before declaring it as a global variable.
    

(8) Name used prior to nonlocal declaration
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_nonlocal_1.py", line 9
        nonlocal q
        ^
    SyntaxError: name 'q' is used prior to nonlocal declaration
    
        Did you forget to write `nonlocal` first?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_name_before_nonlocal_1.py'
    en la ubicación indicada por ^.
    
        5:     q = 1
        6: 
        7:     def g():
        8:         print(q)
    --> 9:         nonlocal q
                   ^

    You used the variable `q`
    before declaring it as a nonlocal variable.
    

(9) Name assigned prior to nonlocal declaration
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_nonlocal_2.py", line 9
        nonlocal s
        ^
    SyntaxError: name 's' is assigned to before nonlocal declaration
    
        Did you forget to add `nonlocal`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_name_before_nonlocal_2.py'
    en la ubicación indicada por ^.
    
        5:     s = 1
        6: 
        7:     def g():
        8:         s = 2
    --> 9:         nonlocal s
                   ^

    You assigned a value to the variable `s`
    before declaring it as a nonlocal variable.
    

(10) Assign to conditional expression
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_conditional.py", line 3
        a if 1 else b = 1
        ^
    SyntaxError: cannot assign to conditional expression
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_conditional.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't [cannot] assign to conditional expression"""
       2: 
    -->3: a if 1 else b = 1
          ^

    On the left-hand side of an equal sign, you have a
    conditional expression instead of the name of a variable.
    A conditional expression has the following form:
    
        variable = object if condition else other_object
    You can only assign objects to identifiers (variable names).
    

(11) Assignment to keyword (__debug__)
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_debug.py", line 4
        __debug__ = 1
        ^
    SyntaxError: cannot assign to __debug__
    
        You cannot assign a value to `__debug__`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_debug.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: cannot assign to __debug__ in Py 3.8
       2:    and assignment to keyword before."""
       3: 
    -->4: __debug__ = 1
          ^

    `__debug__` is a constant in Python; you cannot assign it a different value.
    

(12) Assignment to keyword (__debug__)
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_debug2.py", line 4
        a.__debug__ = 1
        ^
    SyntaxError: cannot assign to __debug__
    
        You cannot assign a value to `__debug__`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_debug2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: cannot assign to __debug__ in Py 3.8
       2:    and assignment to keyword before."""
       3: 
    -->4: a.__debug__ = 1
          ^

    `__debug__` is a constant in Python; you cannot assign it a different value.
    

(13) Assignment to Ellipsis symbol
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_ellipsis.py", line 4
        ... = 1
        ^
    SyntaxError: cannot assign to Ellipsis
    
        You cannot assign a value to the ellipsis symbol [`...`].
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_ellipsis.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: cannot assign to Ellipsis in Py 3.8
       2:    and assignment to keyword before."""
       3: 
    -->4: ... = 1
          ^

    The ellipsis symbol `...` is a constant in Python;you cannot assign it a different value.
    

(14) Cannot assign to f-string
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_f_string.py", line 6
        f'{x}' = 42
        ^
    SyntaxError: cannot assign to f-string expression
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_f_string.py'
    en la ubicación indicada por ^.
    
       1: """Should raise
       2: Python < 3.8: SyntaxError: can't assign to literal
       3: Python >= 3.8: SyntaxError: cannot assign to f-string expression
       4: """
       5: 
    -->6: f'{x}' = 42
          ^

    You wrote an expression that has the f-string `f'{x}'`
    on the left-hand side of the equal sign.
    An f-string should only appear on the right-hand side of an equal sign.
    You can only assign objects to identifiers (variable names).
    

(15) Cannot assign to function call: single = sign
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_function_call_1.py", line 6
        len('a') = 3
        ^
    SyntaxError: cannot assign to function call
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_function_call_1.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't assign to function call
       2: 
       3: Python 3.8: SyntaxError: cannot assign to function call
       4: """
       5: 
    -->6: len('a') = 3
          ^

    You wrote the expression
    
        len('a') = 3
    
    where `len('a')`, on the left-hand side of the equal sign, either is
    or includes a function call and is not simply the name of a variable.
    You can only assign objects to identifiers (variable names).
    

(16) Cannot assign to function call: two = signs
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_function_call_2.py", line 6
        func(a, b=3) = 4
        ^
    SyntaxError: cannot assign to function call
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_function_call_2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't assign to function call
       2: 
       3: Python 3.8: SyntaxError: cannot assign to function call
       4: """
       5: 
    -->6: func(a, b=3) = 4
          ^

    You wrote an expression like
    
        func(...) = algún valor
    
    where `func(...)`, on the left-hand side of the equal sign, is
    a function call and not the name of a variable.
    You can only assign objects to identifiers (variable names).
    

(17) Assign to generator expression
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_generator.py", line 3
        (x for x in x) = 1
        ^
    SyntaxError: cannot assign to generator expression
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_generator.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't [cannot] assign to generator expression"""
       2: 
    -->3: (x for x in x) = 1
          ^

    On the left-hand side of an equal sign, you have a
    generator expression instead of the name of a variable.
    You can only assign objects to identifiers (variable names).
    

(18) Cannot assign to literal - 4
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_dict.py", line 7
        {1 : 2, 2 : 4} = 5
        ^
    SyntaxError: cannot assign to dict display
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_literal_dict.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError:
       2: Python 3.8: cannot assign to dict display
       3: Python 3.6, 3.7: can't assign to literal
       4: 
       5:  """
       6: 
    -->7: {1 : 2, 2 : 4} = 5
          ^

    You wrote an expression like
    
        {1 : 2, 2 : 4} = 5
    where `{1 : 2, 2 : 4}`, on the left-hand side of the equal sign,
    is or includes an actual object de tipo `dict`
    and is not simply the name of a variable.
    
    You can only assign objects to identifiers (variable names).
    

(19) Cannot assign to literal int
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_int.py", line 3
        1 = a
        ^
    SyntaxError: cannot assign to literal
    
        Perhaps you meant to write `a = 1`
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_literal_int.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't assign to literal"""
       2: 
    -->3: 1 = a
          ^

    You wrote an expression like
    
        1 = a
    where `1`, on the left-hand side of the equal sign,
    is or includes an actual object de tipo `int`
    and is not simply the name of a variable.
    Perhaps you meant to write:
    
        a = 1
    
    

(20) Cannot assign to literal int - 2
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_int_2.py", line 3
        1 = 2
        ^
    SyntaxError: cannot assign to literal
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_literal_int_2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't assign to literal"""
       2: 
    -->3: 1 = 2
          ^

    You wrote an expression like
    
        1 = 2
    where `1`, on the left-hand side of the equal sign,
    is or includes an actual object de tipo `int`
    and is not simply the name of a variable.
    
    You can only assign objects to identifiers (variable names).
    

(21) Cannot assign to literal - 5
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_int_3.py", line 4
        1 = a = b
        ^
    SyntaxError: cannot assign to literal
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_literal_int_3.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't assign to literal
       2: or (Python 3.8) cannot assign to literal"""
       3: 
    -->4: 1 = a = b
          ^

    You wrote an expression like
    
        ... = nombre_de_variable
    where `...`, on the left-hand side of the equal sign,
    is or includes an actual object 
    and is not simply the name of a variable.
    
    You can only assign objects to identifiers (variable names).
    

(22) Cannot assign to literal - 3
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_set.py", line 7
        {1, 2, 3} = 4
        ^
    SyntaxError: cannot assign to set display
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_literal_set.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError:
       2: Python 3.8: cannot assign to set display
       3: Python 3.6, 3.7: can't assign to literal
       4: 
       5:  """
       6: 
    -->7: {1, 2, 3} = 4
          ^

    You wrote an expression like
    
        {1, 2, 3} = 4
    where `{1, 2, 3}`, on the left-hand side of the equal sign,
    is or includes an actual object de tipo `set`
    and is not simply the name of a variable.
    
    You can only assign objects to identifiers (variable names).
    

(23) Assign to keyword def
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_keyword_def.py", line 3
        def = 2
            ^
    SyntaxError: invalid syntax
    
        Las palabras clave de Python no pueden utilizarse como identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_keyword_def.py'
    en la ubicación indicada por ^.
    
       1: """ Should raise SyntaxError"""
       2: 
    -->3: def = 2
              ^

    You were trying to assign a value to the Python keyword `def`.
    This is not allowed.
    
    

(24) Assign to keyword else
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_keyword_else.py", line 3
        else = 1
        ^
    SyntaxError: invalid syntax
    
        Las palabras clave de Python no pueden utilizarse como identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_keyword_else.py'
    en la ubicación indicada por ^.
    
       1: """ Should raise SyntaxError"""
       2: 
    -->3: else = 1
          ^

    You were trying to assign a value to the Python keyword `else`.
    This is not allowed.
    
    

(25) Assignment to keyword (None)
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_keyword_none.py", line 4
        None = 1
        ^
    SyntaxError: cannot assign to None
    
        You cannot assign a value to `None`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_keyword_none.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: cannot assign to None in Py 3.8
       2:    and can't assign to keyword before."""
       3: 
    -->4: None = 1
          ^

    `None` is a constant in Python; you cannot assign it a different value.
    

(26) Assign to math operation
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_operation.py", line 4
        a + 1 = 2
        ^
    SyntaxError: cannot assign to operator
    
        Perhaps you needed `==` instead of `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_operation.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't assign to operator
       2: or (Python 3.8) cannot assign to operator"""
       3: 
    -->4: a + 1 = 2
          ^

    You wrote an expression that includes some mathematical operations
    on the left-hand side of the equal sign which should be
    only used to assign a value to a variable.
    

(27) Assign to yield expression
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_yield_expression.py", line 1
        (yield i) = 3
         ^
    SyntaxError: cannot assign to yield expression
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_yield_expression.py'
    en la ubicación indicada por ^.
    
    -->1: (yield
           ^

    You wrote an expression that includes the `yield` keyword
    on the left-hand side of the equal sign.
    You cannot assign a value to such an expression.
    Note that, like the keyword `return`,
    `yield` can only be used inside a function.
    

(28) Augmented assignment inside comprehension
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assignment_expression_cannot_rebind.py", line 1
        a = [(i := 1) for i in [1]]
             ^
    SyntaxError: assignment expression cannot rebind comprehension iteration variable 'i'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assignment_expression_cannot_rebind.py'
    en la ubicación indicada por ^.
    
    -->1: a = [(i := 1) for i in [1]]
               ^

    You are using the augmented assignment operator `:=` inside
    a comprehension to assign a value to the iteration variable `i`.
    This variable is meant to be used only inside the comprehension.
    The augmented assignment operator is normally used to assign a value
    to a variable so that the variable can be reused later.
    This is not possible for variable `i`.
    

(29) Augmented assignment inside comprehension - inner loop
-----------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assignment_expression_cannot_rebind_2.py", line 1
        [i for i in range(5) if (j := 0) for k[j + 1] in range(5)]
        ^
    SyntaxError: comprehension inner loop cannot rebind assignment expression target 'j'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assignment_expression_cannot_rebind_2.py'
    en la ubicación indicada por ^.
    
    -->1: [i for i in range(5) if (j := 0) for k[j + 1] in range(5)]
          ^

    You are using the augmented assignment operator `:=` inside
    a comprehension to assign a value to the iteration variable `j`.
    This variable is meant to be used only inside the comprehension.
    The augmented assignment operator is normally used to assign a value
    to a variable so that the variable can be reused later.
    This is not possible for variable `j`.
    

(30) def: missing parentheses
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\async_def_missing_parens.py", line 1
        async def name:
                      ^
    SyntaxError: invalid syntax
    
        ¿Has olvidado los paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\async_def_missing_parens.py'
    en la ubicación indicada por ^.
    
    -->1: async def name:
                        ^

    Tal vez haya olvidado incluir los paréntesis.
    Puede que hayas querido escribir
    
        async def name():
    

(31) Augmented assignment to literal
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\augmented_assignment_to_literal.py", line 1
        if "word" := True:
           ^
    SyntaxError: cannot use assignment expressions with literal
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\augmented_assignment_to_literal.py'
    en la ubicación indicada por ^.
    
    -->1: if "word" := True:
             ^

    You cannot use the augmented assignment operator `:=`,
    sometimes called the walrus operator, with literals like `"word"`.
    You can only assign objects to identifiers (variable names).
    

(32) Walrus/Named assignment depending on Python version
--------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\augmented_assigment_with_true.py", line 4
        (True := 1)
         ^
    SyntaxError: cannot use assignment expressions with True
    
        You cannot assign a value to `True`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\augmented_assigment_with_true.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax
       2: or (Python 3.8) cannot use named assignment with True"""
       3: 
    -->4: (True := 1)
           ^

    `True` is a constant in Python; you cannot assign it a different value.
    

(33) Backslash instead of slash
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\backslash_instead_of_slash.py", line 1
        a = 3 \ 4.0
                  ^
    SyntaxError: unexpected character after line continuation character
    
        ¿Querías dividir por 4.0?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\backslash_instead_of_slash.py'
    en la ubicación indicada por ^.
    
    -->1: a = 3 \ 4.0
                    ^

    You are using the continuation character `\` outside of a string,
    and it is followed by some other character(s).
    I am guessing that you wanted to divide by the number 4.0 
    and wrote \ instead of /.

(34) Brackets instead of parentheses
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\bracket_instead_of_paren.py", line 1
        print(sum[i for i in [1, 2, 3] if i%2==0])
                    ^
    SyntaxError: invalid syntax
    
        You used square brackets, `[...]` instead of parentheses.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\bracket_instead_of_paren.py'
    en la ubicación indicada por ^.
    
    -->1: print(sum[i for i in [1, 2, 3] if i%2==0])
                      ^

    You used square brackets, `[...]` instead of parentheses.
    Write the following instead:
    
        print(sum(i for i in [1, 2, 3] if i%2==0))

(35) break outside loop
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\break_outside_loop.py", line 4
        break
        ^
    SyntaxError: 'break' outside loop
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\break_outside_loop.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: 'break' outside loop"""
       2: 
       3: if True:
    -->4:     break
              ^

    The Python keyword `break` can only be used inside a `for` loop or inside a `while` loop.
    

(36) Cannot assign to attribute here.
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_assign_to_attribute_here.py", line 1
        if x.a = 1:
               ^
    SyntaxError: invalid syntax
    
        Perhaps you needed `==` instead of `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\cannot_assign_to_attribute_here.py'
    en la ubicación indicada por ^.
    
    -->1: if x.a = 1:
                 ^

    Es probable que hayas utilizado un operador de asignación `=` en lugar de un operador de igualdad `==`.
    The following statement would not contain a syntax error:
    
        if x.a == 1:

(37) Cannot guess the cause
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_guess_the_cause.py", line 1
        SyntaxErrors can be annoying!
                     ^
    SyntaxError: invalid syntax
    
        Friendly-traceback no conoce la causa de este error.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\cannot_guess_the_cause.py'
    en la ubicación indicada por ^.
    
    -->1: SyntaxErrors can be annoying!
                       ^

    Currently, I cannot guess the likely cause of this error.
    Try to examine closely the line indicated as well as the line
    immediately above to see if you can identify some misspelled
    word, or missing symbols, like (, ), [, ], :, etc.
    
    Unless your code uses type annotations, which are beyond our scope,
    if you think that this is something which should be handled
    by friendly, please report this case to
    https://github.com/aroberge/friendly/issues
    
    

(38) Cannot use star operator
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_use_star.py", line 3
        *a
        ^
    SyntaxError: can't use starred expression here
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\cannot_use_star.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't use starred expression here"""
       2: 
    -->3: *a
           ^

    The star operator `*` is interpreted to mean that
    iterable unpacking is to be used to assign a name
    to each item of an iterable, which does not make sense here.
    

(39) Cannot use double star operator
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_use_double_star.py", line 4
        (**k)
         ^
    SyntaxError: f-string: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\cannot_use_double_star.py'
    en la ubicación indicada por ^.
    
    -->1: (**k)
           ^

    The double star operator `**` is likely interpreted to mean that
    dict unpacking is to be used which is not allowed or does not make sense here.
    

(40) Missing class name
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\class_missing_name.py", line 1
        class:
             ^
    SyntaxError: invalid syntax
    
        Una clase necesita un nombre.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\class_missing_name.py'
    en la ubicación indicada por ^.
    
    -->1: class:
               ^

    A `class` statement requires a name:
    
        class SomeName:
            ...
    
    

(41) Missing () for tuples in comprehension
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\comprehension_missing_tuple_paren.py", line 1
        x = [i, i**2 for i in range(10)]
                     ^
    SyntaxError: invalid syntax
    
        ¿Has olvidado los paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\comprehension_missing_tuple_paren.py'
    en la ubicación indicada por ^.
    
    -->1: x = [i, i**2 for i in range(10)]
                       ^

    I am guessing that you were writing a comprehension or a generator expression
    and forgot to include parentheses around tuples.
    As an example, instead of writing
    
        [i, i**2 for i in range(10)]
    
    you would need to write
    
        [(i, i**2) for i in range(10)]
    
    

(42) Comprehension with condition (no else)
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\comprehension_with_condition_no_else.py", line 1
        a = [f(x) if condition for x in sequence]
                               ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\comprehension_with_condition_no_else.py'
    en la ubicación indicada por ^.
    
    -->1: a = [f(x) if condition for x in sequence]
                                 ^

    Supongo que estabas escribiendo una comprensión o una expresión generadora
    y utilizas el orden incorrecto para una condición.
    El orden correcto depende de si hay una cláusula `else` o no.
    Por ejemplo, el orden correcto para una comprensión de lista con
    condición puede ser
    
        [f(x) if condición else otro for x in secuencia]  # 'if' antes de 'for'
    
    o, si no hay ningún `else`
    
        [f(x) for x in secuencia if condición]  # 'if' despues de 'for'
    
    

(43) Comprehension with condition (with else)
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\comprehension_with_condition_with_else.py", line 1
        a = [f(x) for x in sequence if condition else other]
                                                 ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\comprehension_with_condition_with_else.py'
    en la ubicación indicada por ^.
    
    -->1: a = [f(x) for x in sequence if condition else other]
                                                   ^

    Supongo que estabas escribiendo una comprensión o una expresión generadora
    y utilizas el orden incorrecto para una condición.
    El orden correcto depende de si hay una cláusula `else` o no.
    Por ejemplo, el orden correcto para una comprensión de lista con
    condición puede ser
    
        [f(x) if condición else otro for x in secuencia]  # 'if' antes de 'for'
    
    o, si no hay ningún `else`
    
        [f(x) for x in secuencia if condición]  # 'if' despues de 'for'
    
    

(44) continue outside loop
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\continue_outside_loop.py", line 4
        continue
        ^
    SyntaxError: 'continue' not properly in loop
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\continue_outside_loop.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: 'continue' outside loop"""
       2: 
       3: if True:
    -->4:     continue
              ^

    The Python keyword `continue` can only be used inside a `for` loop or inside a `while` loop.
    

(45) Copy/paste from interpreter
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\copy_pasted_code.py", line 2
        >>> print("Hello World!")
        ^
    SyntaxError: invalid syntax
    
        ¿Usaste copiar y pegar?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\copy_pasted_code.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: >>> print("Hello World!")
          ^

    Parece que has copiado y pegado código de un intérprete interactivo.
    El prompt de Python, `>>>`, no debería estar incluido en tu código.
    

(46) Copy/paste from interpreter - 2
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\copy_pasted_code_2.py", line 2
        ... print("Hello World!")
            ^
    SyntaxError: invalid syntax
    
        ¿Usaste copiar y pegar?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\copy_pasted_code_2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: ... print("Hello World!")
              ^

    Parece que has copiado y pegado código de un intérprete interactivo.
    El prompt de Python, `...`, no debería estar incluido en tu código.
    

(47) def: positional arg after kwargs
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_arg_after_kwarg.py", line 1
        def test(a, **kwargs, b):
                              ^
    SyntaxError: invalid syntax
    
        Los argumentos posicionales deben ir antes de los argumentos de palabra clave.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_arg_after_kwarg.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, **kwargs, b):
                                ^

    Los argumentos posicionales deben ir antes de los argumentos de palabra clave.
    `b` is a positional argument that appears after one or more
    keyword arguments in your function definition.
    

(48) def: named arguments must follow bare *
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_bare_star_arg.py", line 4
        def f(*):
               ^
    SyntaxError: named arguments must follow bare *
    
        Did you forget something after `*`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_bare_star_arg.py'
    en la ubicación indicada por ^.
    
       1: # SyntaxError: named arguments must follow bare *
       2: 
       3: 
    -->4: def f(*):
                  ^

    Assuming you were defining a function, you need
    to replace `*` by either `*arguments` or
    by `*, named_argument=value`.
    

(49) def: misused as code block
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_code_block.py", line 3
        def :
            ^
    SyntaxError: invalid syntax
    
        Una función necesita un nombre.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_code_block.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError"""
       2: 
    -->3: def :
              ^

    Has intentado definir una función y no has utilizado la sintaxis correcta.
    The correct syntax is:
    
        def name ( ... ):
    

(50) def: misused as code block - 2
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_code_block_2.py", line 2
        def :
            ^
    SyntaxError: invalid syntax
    
        Las funciones y los métodos necesitan un nombre.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_code_block_2.py'
    en la ubicación indicada por ^.
    
       1: class A:
    -->2:     def :
                  ^

    Has intentado definir una función o un método y no has utilizado la sintaxis correcta.
    The correct syntax is:
    
        def name ( ... ):
    

(51) Dotted name as function argument
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dotted_argument.py", line 3
        def test(x.y):
                  ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_dotted_argument.py'
    en la ubicación indicada por ^.
    
       1: 
       2: 
    -->3: def test(x.y):
                    ^

    No se pueden utilizar nombres con puntos como argumentos de funciones.
    Tal vez querías escribir una coma.
    

(52) Dotted name as function argument
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dotted_argument_2.py", line 2
        def test(x., y):
                  ^
    SyntaxError: invalid syntax
    
        No se pueden utilizar nombres con puntos como argumentos de funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_dotted_argument_2.py'
    en la ubicación indicada por ^.
    
       1: 
    -->2: def test(x., y):
                    ^

    No se pueden utilizar nombres con puntos como argumentos de funciones.
    

(53) Dotted function name
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dotted_function_name.py", line 3
        def test.x():
                ^
    SyntaxError: invalid syntax
    
        No se pueden utilizar puntos en los nombres de las funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_dotted_function_name.py'
    en la ubicación indicada por ^.
    
       1: 
       2: 
    -->3: def test.x():
                  ^

    No se pueden utilizar puntos en los nombres de las funciones.
    

(54) def: dict as argument
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dict_as_arg.py", line 1
        def test({'a': 1}, y):  # dict as first argument
                 ^
    SyntaxError: invalid syntax
    
        No puede tener ningún dict o set explícito como argumentos de la función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_dict_as_arg.py'
    en la ubicación indicada por ^.
    
    -->1: def test({'a': 1}, y):  # dict as first argument
                   ^

    No puede tener ningún dict o set explícito como argumentos de la función.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(55) def: Keyword arg only once in function definition
------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_duplicate_arg.py", line 4
        def f(aa=1, aa=2):
        ^
    SyntaxError: duplicate argument 'aa' in function definition
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_duplicate_arg.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: duplicate argument 'aa' in function definition"""
       2: 
       3: 
    -->4: def f(aa
          ^

    You have defined a function repeating the keyword argument
    
        aa
    twice; each keyword argument should appear only once in a function definition.
    

(56) def: semi-colon after colon
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_extra_semi_colon.py", line 1
        def test():;
                   ^
    SyntaxError: invalid syntax
    
        ¿Escribiste algo por error después de los dos puntos?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_extra_semi_colon.py'
    en la ubicación indicada por ^.
    
    -->1: def test():;
                     ^

    Una declaración de definición de función debe terminar con dos puntos.
    Un bloque de código debe ir después de los dos puntos.
    Eliminar `;`, podría solucionar el problema.
    

(57) def: extra comma
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_extra_comma.py", line 1
        def test(a,,b):
                   ^
    SyntaxError: invalid syntax
    
        Did you mean to write `,`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_extra_comma.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a,,b):
                     ^

    I suspect you made a typo and added `,` by mistake.
    The following statement contains no syntax error:
    
        def test(a,b):

(58) def: unspecified keywords before /
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_1.py", line 1
        def test(a, **kwargs, /):
                              ^
    SyntaxError: invalid syntax
    
        Keyword arguments must appear after the `/` symbol.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_forward_slash_1.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, **kwargs, /):
                                ^

    `/` indica que los argumentos anteriores en una definición de función
    son argumentos posicionales.
    You have unspecified keyword arguments that appear before
    the symbol `/`.
    

(59) def: / before star
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_2.py", line 1
        def test(a, *, b, /):
                          ^
    SyntaxError: invalid syntax
    
        `*` must appear after `/` in a function definition.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_forward_slash_2.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, *, b, /):
                            ^

    `/` indica que los argumentos anteriores en una definición de función
    son argumentos posicionales.
    However, `*` indicates that the arguments
    that follow must be keyword arguments.
    When they are used together, `/` must appear before `*`.
    

(60) def: / before star arg
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_3.py", line 1
        def test(a, *arg, /):
                          ^
    SyntaxError: invalid syntax
    
        `*arg` must appear after `/` in a function definition.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_forward_slash_3.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, *arg, /):
                            ^

    `/` indica que los argumentos anteriores en una definición de función
    son argumentos posicionales.
    `*arg` must appear after `/` in a function definition.
    

(61) def: / used twice
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_4.py", line 1
        def test(a, /, b, /):
                          ^
    SyntaxError: invalid syntax
    
        You can only use `/` once in a function definition.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_forward_slash_4.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, /, b, /):
                            ^

    You can only use `/` once in a function definition.
    

(62) def: non-identifier as a function name
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_function_name_invalid.py", line 3
        def 2be():
            ^
    SyntaxError: invalid syntax
    
        Has escrito un nombre de función no válido.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_function_name_invalid.py'
    en la ubicación indicada por ^.
    
       1: 
       2: 
    -->3: def 2be():
              ^

    El nombre de una función debe ser un identificador válido de Python,
    es decir, un nombre que comience con una letra o un carácter de subrayado, `_`,
    y que contenga sólo letras, dígitos o el carácter de subrayado.
    

(63) def: using a string as a function name
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_function_name_string.py", line 3
        def "function"():
            ^
    SyntaxError: invalid syntax
    
        El nombre de una función debe ser un identificador válido de Python,
        es decir, un nombre que comience con una letra o un carácter de subrayado, `_`,
        y que contenga sólo letras, dígitos o el carácter de subrayado.
        Has intentado utilizar una cadena como nombre de función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_function_name_string.py'
    en la ubicación indicada por ^.
    
       1: 
       2: 
    -->3: def "function"():
              ^

    El nombre de una función debe ser un identificador válido de Python,
    es decir, un nombre que comience con una letra o un carácter de subrayado, `_`,
    y que contenga sólo letras, dígitos o el carácter de subrayado.
    Has intentado utilizar una cadena como nombre de función.
    

(64) def: keyword cannot be argument in def - 1
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_1.py", line 5
        def f(None=1):
              ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_keyword_as_arg_1.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax
       2: """
       3: 
       4: 
    -->5: def f(None=1):
                ^

    Supongo que has intentado utilizar la palabra clave de Python
    `None` como argumento en la definición de una función
    donde se esperaba un identificador (nombre de variable).
    

(65) def: keyword cannot be argument in def - 2
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_2.py", line 5
        def f(x, True):
                 ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_keyword_as_arg_2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax
       2: """
       3: 
       4: 
    -->5: def f(x, True):
                   ^

    Supongo que has intentado utilizar la palabra clave de Python
    `True` como argumento en la definición de una función
    donde se esperaba un identificador (nombre de variable).
    

(66) def: keyword cannot be argument in def - 3
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_3.py", line 5
        def f(*None):
               ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_keyword_as_arg_3.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax
       2: """
       3: 
       4: 
    -->5: def f(*None):
                 ^

    Supongo que has intentado utilizar la palabra clave de Python
    `None` como argumento en la definición de una función
    donde se esperaba un identificador (nombre de variable).
    

(67) def: keyword cannot be argument in def - 4
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_4.py", line 5
        def f(**None):
                ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_keyword_as_arg_4.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax
       2: """
       3: 
       4: 
    -->5: def f(**None):
                  ^

    Supongo que has intentado utilizar la palabra clave de Python
    `None` como argumento en la definición de una función
    donde se esperaba un identificador (nombre de variable).
    

(68) def: Python keyword as function name
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_name.py", line 3
        def pass():
            ^
    SyntaxError: invalid syntax
    
        No se puede utilizar una palabra clave de Python como nombre de función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_keyword_as_name.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: def pass():
              ^

    Has intentado utilizar la palabra clave de Python `pass` como nombre de función.
    

(69) def: list as argument - 1
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_list_as_arg_1.py", line 1
        def test([x], y):  # list as first argument
                 ^
    SyntaxError: invalid syntax
    
        No se pueden tener listas explícitas como argumentos de funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_list_as_arg_1.py'
    en la ubicación indicada por ^.
    
    -->1: def test([x], y):  # list as first argument
                   ^

    No se pueden tener listas explícitas como argumentos de funciones.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(70) def: list as argument - 2
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_list_as_arg_2.py", line 1
        def test(x, [y]):  # list as second argument, after comma
                    ^
    SyntaxError: invalid syntax
    
        No se pueden tener listas explícitas como argumentos de funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_list_as_arg_2.py'
    en la ubicación indicada por ^.
    
    -->1: def test(x, [y]):  # list as second argument, after comma
                      ^

    No se pueden tener listas explícitas como argumentos de funciones.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(71) def: missing colon
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_colon.py", line 1
        def test()
                  ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste escribir dos puntos?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_missing_colon.py'
    en la ubicación indicada por ^.
    
    -->1: def test()
                    ^

    Una declaración de definición de función debe terminar con dos puntos.
    

(72) def: missing comma between function args
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_comma.py", line 4
        def a(b, c d):
                   ^
    SyntaxError: invalid syntax
    
        ¿Te has olvidado de una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_missing_comma.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
       3: 
    -->4: def a(b, c d):
                     ^

    Python indica que el error es causado por `d` escrito inmediatamente después de `c`.
    Es posible que haya olvidado una coma entre los elementos de una tupla, 
    o entre los argumentos de una función, 
    antes de la posición indicada por ^.
    Tal vez se refería a
    
        def a(b, c, d):
    

(73) def: missing parentheses
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_parens.py", line 3
        def name:
                ^
    SyntaxError: invalid syntax
    
        ¿Has olvidado los paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_missing_parens.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError"""
       2: 
    -->3: def name:
                  ^

    Tal vez haya olvidado incluir los paréntesis.
    Puede que hayas querido escribir
    
        def name():
    

(74) def: missing parentheses around arguments
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_parens_2.py", line 2
        def name a, b:
                 ^
    SyntaxError: invalid syntax
    
        ¿Has olvidado los paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_missing_parens_2.py'
    en la ubicación indicada por ^.
    
       1: 
    -->2: def name a, b:
                   ^

    Tal vez haya olvidado incluir los paréntesis.
    Puede que hayas querido escribir
    
        def name (a, b):
    

(75) def: missing function name
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_name.py", line 3
        def ( arg )  :
            ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_missing_name.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError"""
       2: 
    -->3: def ( arg )  :
              ^

    Has olvidado nombrar tu función.
    The correct syntax is:
    
        def name ( ... ):
    

(76) def: name is parameter and global
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_name_is_parameter_and_global.py", line 6
        global x
        ^
    SyntaxError: name 'x' is parameter and global
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_name_is_parameter_and_global.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: name 'x' is parameter and global
       2: """
       3: 
       4: 
       5: def f(x):
    -->6:     global x
              ^

    You are including the statement
    
            global x
    
    
    indicating that `x` is a variable defined outside a function.
    You are also using the same `x` as an argument for that
    function, thus indicating that it should be variable known only
    inside that function, which is the contrary of what `global` implied.
    

(77) def: non-default argument follows default argument
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_non_default_after_default.py", line 5
        def test(a=1, b):
                       ^
    SyntaxError: non-default argument follows default argument
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_non_default_after_default.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: non-default argument follows default argument
       2: """
       3: 
       4: 
    -->5: def test(a=1, b):
                          ^

    In Python, you can define functions with only positional arguments
    
        def test(a, b, c): ...
    
    or only keyword arguments
    
        def test(a=1, b=2, c=3): ...
    
    or a combination of the two
    
        def test(a, b, c=3): ...
    
    but with the keyword arguments appearing after all the positional ones.
    According to Python, you used positional arguments after keyword ones.
    

(78) Single number used as arg in function def
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_number_as_arg.py", line 1
        def f(1):
              ^
    SyntaxError: invalid syntax
    
        No se pueden utilizar números como argumentos de funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_number_as_arg.py'
    en la ubicación indicada por ^.
    
    -->1: def f(1):
                ^

    Ha utilizado un número como argumento al definir una función.
    Sólo puede utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(79) Operator after ``**``
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_after_2star.py", line 1
        def test(**):
                   ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_operator_after_2star.py'
    en la ubicación indicada por ^.
    
    -->1: def test(**):
                      ^

    The `**` operator needs to be followed by an identifier (variable name).
    

(80) def: operator instead of comma
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_instead_of_comma.py", line 1
        def test(a + b):
                   ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_operator_instead_of_comma.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a + b):
                     ^

    No se pueden tener operadores como argumentos de la función.
    I suspect you made a typo and wrote `+` instead of a comma.
    The following statement contains no syntax error:
    
        def test(a , b):

(81) def: operator instead of equal
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_instead_of_equal.py", line 1
        def test(a, b=3, c+None):
                          ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir un signo de igualdad?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_operator_instead_of_equal.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, b=3, c+None):
                            ^

    No se pueden tener operadores como argumentos de la función.
    I suspect you made a typo and wrote `+` instead of an equal sign.
    The following statement contains no syntax error:
    
        def test(a, b=3, c=None):

(82) def: operator instead of name
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_instead_of_name.py", line 1
        def test(a, +, b):
                    ^
    SyntaxError: invalid syntax
    
        No se puede utilizar `+` como argumento.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_operator_instead_of_name.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, +, b):
                      ^

    I suspect you made a typo and wrote `+` by mistake.
    If you replace it by a unique variable name, the result
    will contain no syntax error.
    

(83) def: positional argument follows keyword argument
------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_positional_after_keyword_arg.py", line 5
        test(a=1, b)
                   ^
    SyntaxError: positional argument follows keyword argument
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_positional_after_keyword_arg.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: positional argument follows keyword argument
       2: """
       3: 
       4: 
    -->5: test(a=1, b)
                     ^

    In Python, you can call functions with only positional arguments
    
        test(1, 2, 3)
    
    or only keyword arguments
    
        test(a=1, b=2, c=3)
    
    or a combination of the two
    
        test(1, 2, c=3)
    
    but with the keyword arguments appearing after all the positional ones.
    According to Python, you used positional arguments after keyword ones.
    

(84) def: semi-colon instead of colon
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_semi_colon_instead_of_colon.py", line 1
        def test();
                  ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste escribir dos puntos?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_semi_colon_instead_of_colon.py'
    en la ubicación indicada por ^.
    
    -->1: def test();
                    ^

    Una declaración de definición de función debe terminar con dos puntos.
    Has escrito `;` en lugar de dos puntos.
    

(85) def: set as argument
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_set_as_arg.py", line 1
        def test(y, {'a', 'b'}):  # set as second argument, after comma
                    ^
    SyntaxError: invalid syntax
    
        No puede tener ningún dict o set explícito como argumentos de la función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_set_as_arg.py'
    en la ubicación indicada por ^.
    
    -->1: def test(y, {'a', 'b'}):  # set as second argument, after comma
                      ^

    No puede tener ningún dict o set explícito como argumentos de la función.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(86) def: ``*arg`` before /
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_arg_before_slash.py", line 1
        def test(a, *arg, /):
                          ^
    SyntaxError: invalid syntax
    
        `*arg` must appear after `/` in a function definition.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_arg_before_slash.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, *arg, /):
                            ^

    `/` indica que los argumentos anteriores en una definición de función
    son argumentos posicionales.
    `*arg` must appear after `/` in a function definition.
    

(87) def: ``*`` used twice
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_used_only_once.py", line 1
        def test(a, *arg, *, b=1):
                          ^
    SyntaxError: invalid syntax
    
        You can only use `*` once in a function definition.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_used_only_once.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, *arg, *, b=1):
                            ^

    You can only use `*` once in a function definition.
    It must either be used by itself, `*`,
    or in the form `*arg`, but not both.
    

(88) def: ``*`` used twice
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_used_only_once_1.py", line 1
        def test(a, *, *):
                       ^
    SyntaxError: invalid syntax
    
        You can only use `*` once in a function definition.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_used_only_once_1.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, *, *):
                         ^

    You can only use `*` once in a function definition.
    

(89) def: ``*`` used twice
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_used_only_once_2.py", line 1
        def test(a, *arg, *other):
                          ^
    SyntaxError: invalid syntax
    
        You can only use `*` once in a function definition.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_used_only_once_2.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, *arg, *other):
                            ^

    You can only use `*` once in a function definition.
    You have used it twice, with `*arg` and `*other`.
    

(90) def: ``*`` after ``**``
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_after_2star.py", line 1
        def test(**kw, *arg):
                       ^
    SyntaxError: invalid syntax
    
        You can only use `*` once in a function definition.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_after_2star.py'
    en la ubicación indicada por ^.
    
    -->1: def test(**kw, *arg):
                         ^

    `*arg` must appear before `**kw`.
    

(91) def: ``*`` after ``**``
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_after_2star_2.py", line 1
        def test(**kw, *):
                       ^
    SyntaxError: invalid syntax
    
        You can only use `*` once in a function definition.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_after_2star_2.py'
    en la ubicación indicada por ^.
    
    -->1: def test(**kw, *):
                         ^

    `**kw` must appear after the `*` operator.
    

(92) Single string used as arg in function def
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_string_as_arg.py", line 1
        def f("1"):
              ^
    SyntaxError: invalid syntax
    
        No se pueden utilizar cadenas como argumentos de funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_string_as_arg.py'
    en la ubicación indicada por ^.
    
    -->1: def f("1"):
                ^

    Ha utilizado una cadena como argumento al definir una función.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(93) def: tuple as function argument
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_tuple_as_arg_1.py", line 1
        def test((a, b), c):
                 ^
    SyntaxError: invalid syntax
    
        No se pueden tener tuplas explícitas como argumentos de la función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_tuple_as_arg_1.py'
    en la ubicación indicada por ^.
    
    -->1: def test((a, b), c):
                   ^

    No se pueden tener tuplas explícitas como argumentos de la función.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    Asignar cualquier tupla a un parámetro y desempaquetarla
    dentro del cuerpo de la función.
    

(94) def: tuple as function argument - 2
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_tuple_as_arg_2.py", line 1
        def test(a, (b, c)):
                    ^
    SyntaxError: invalid syntax
    
        No se pueden tener tuplas explícitas como argumentos de la función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_tuple_as_arg_2.py'
    en la ubicación indicada por ^.
    
    -->1: def test(a, (b, c)):
                      ^

    No se pueden tener tuplas explícitas como argumentos de la función.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    Asignar cualquier tupla a un parámetro y desempaquetarla
    dentro del cuerpo de la función.
    

(95) Deleting star expression - 1
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\del_paren_star_1.py", line 1
        del (*x)
             ^
    SyntaxError: can't use starred expression here
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\del_paren_star_1.py'
    en la ubicación indicada por ^.
    
    -->1: del (*x)
               ^

    The star operator `*` is interpreted to mean that
    iterable unpacking is to be used to assign a name
    to each item of an iterable, which does not make sense here.
    You can only delete names of objects, or items in mutable containers
    such as `list`, `set`, or `dict`.
    

(96) Deleting star expression - 2
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\del_paren_star_2.py", line 1
        del (*x,)
             ^
    SyntaxError: cannot delete starred
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\del_paren_star_2.py'
    en la ubicación indicada por ^.
    
    -->1: del (*x,)
               ^

    The star operator `*` is interpreted to mean that
    iterable unpacking is to be used to assign a name
    to each item of an iterable, which does not make sense here.
    You can only delete names of objects, or items in mutable containers
    such as `list`, `set`, or `dict`.
    

(97) Cannot delete a constant
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_constant_keyword.py", line 1
        del True
            ^
    SyntaxError: cannot delete True
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_constant_keyword.py'
    en la ubicación indicada por ^.
    
    -->1: del True
              ^

    You cannot delete the constant `True`.
    You can only delete names of objects, or items in mutable containers
    such as `list`, `set`, or `dict`.
    

(98) Cannot delete expression
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_expression.py", line 1
        del a.b.c[0] + 2
            ^
    SyntaxError: cannot delete operator
    
        You can only delete names of objects, or items in mutable containers
        such as `list`, `set`, or `dict`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_expression.py'
    en la ubicación indicada por ^.
    
    -->1: del a.b.c[0] + 2
              ^

    You cannot delete the expression `a.b.c[0] + 2`.
    You can only delete names of objects, or items in mutable containers
    such as `list`, `set`, or `dict`.
    

(99) Cannot delete function call
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_function_call.py", line 5
        del f(a)
            ^
    SyntaxError: cannot delete function call
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_function_call.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't or cannot delete function call
       2: """
       3: 
       4: 
    -->5: del f(a)
              ^

    You attempted to delete a function call
    
        del f(a)
    instead of deleting the function's name
    
        del f
    

(100) Cannot delete named expression
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_named_expression.py", line 1
        del (a := 5)
             ^
    SyntaxError: cannot delete named expression
    
        You can only delete names of objects, or items in mutable containers
        such as `list`, `set`, or `dict`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_named_expression.py'
    en la ubicación indicada por ^.
    
    -->1: del (a := 5)
               ^

    You cannot delete the named expression `(a := 5)`.
    You can only delete names of objects, or items in mutable containers
    such as `list`, `set`, or `dict`.
    

(101) Delete only names or items
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_names_or_items.py", line 1
        del a += b
              ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_names_or_items.py'
    en la ubicación indicada por ^.
    
    -->1: del a += b
                ^

    You can only delete names of objects, or items in mutable containers
    such as `list`, `set`, or `dict`.
    

(102) Deleting string literal
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_string_literal.py", line 1
        del "Hello world!"
            ^
    SyntaxError: cannot delete literal
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_string_literal.py'
    en la ubicación indicada por ^.
    
    -->1: del "Hello world!"
              ^

    You cannot delete the literal `"Hello world!"`.
    You can only delete names of objects, or items in mutable containers
    such as `list`, `set`, or `dict`.
    

(103) Value missing in dict - 1
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_1.py", line 1
        a = {1:2, 3}
                   ^
    SyntaxError: invalid syntax
    
        Did you forget to write a dict value?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\dict_value_missing_1.py'
    en la ubicación indicada por ^.
    
    -->1: a = {1:2, 3}
                     ^

    Parece que el error se ha producido al escribir un `dict` de Python.
    Tal vez escribió una clave de `dict` sin escribir el valor correspondiente.
    

(104) Value missing in dict - 2
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_2.py", line 2
        a = {1:2, 3:}
                    ^
    SyntaxError: invalid syntax
    
        Did you forget to write a dict value?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\dict_value_missing_2.py'
    en la ubicación indicada por ^.
    
       1: # a = {1:2, 3}
    -->2: a = {1:2, 3:}
                      ^

    It looks like the error occurred as you were writing a Python dict.
    Perhaps you forgot to write a value after a colon.
    

(105) Value missing in dict - 3
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_3.py", line 3
        a = {1:2, 3, 4:5}
                   ^
    SyntaxError: invalid syntax
    
        Did you forget to write a dict value?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\dict_value_missing_3.py'
    en la ubicación indicada por ^.
    
       1: # a = {1:2, 3}
       2: # a = {1:2, 3:}
    -->3: a = {1:2, 3, 4:5}
                     ^

    Parece que el error se ha producido al escribir un `dict` de Python.
    Tal vez escribió una clave de `dict` sin escribir el valor correspondiente.
    

(106) Value missing in dict - 4
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_4.py", line 4
        a = {1:2, 3:, 4:5}
                    ^
    SyntaxError: invalid syntax
    
        Did you forget to write a dict value?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\dict_value_missing_4.py'
    en la ubicación indicada por ^.
    
       1: # a = {1:2, 3}
       2: # a = {1:2, 3:}
       3: # a = {1:2, 3, 4:5}
    -->4: a = {1:2, 3:, 4:5}
                      ^

    It looks like the error occurred as you were writing a Python dict.
    Perhaps you forgot to write a value after a colon.
    

(107) Different operators in a row
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\different_operators_in_a_row.py", line 1
        3 */ 4
           ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\different_operators_in_a_row.py'
    en la ubicación indicada por ^.
    
    -->1: 3 */ 4
             ^

    You cannot have these two operators, `*` and `/`,
    following each other. Perhaps you wrote one of them by mistake
    or forgot to write something between them.
    

(108) Dot followed by parenthesis
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dot_before_paren.py", line 3
        print(len.('hello'))
                  ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\dot_before_paren.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax
       2: Reported by Hackinscience."""
    -->3: print(len.('hello'))
                    ^

    No puede haber un punto `.` seguido de `(`.
    Tal vez haya que sustituir el punto por una coma.
    

(109) Extra token
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\duplicate_token.py", line 1
        print(1 , , 2)
                  ^
    SyntaxError: invalid syntax
    
        ¿Has escrito `,` dos veces por error?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\duplicate_token.py'
    en la ubicación indicada por ^.
    
    -->1: print(1 , , 2)
                    ^

    Supongo que has escrito `,` dos veces seguidas por error.
    Si ese es el caso, tienes que eliminar la segunda.
    

(110) elif with no matching if
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\elif_not_matching_if.py", line 3
        elif True:
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\elif_not_matching_if.py'
    en la ubicación indicada por ^.
    
       1: if True:
       2:    pass
    -->3:    elif True:
             ^

    The `elif` keyword does not begin a code block that matches
    an `if` block, possibly because `elif` is not indented correctly.
    

(111) else with no matching statement
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\else_no_matching_statement.py", line 3
        else:
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\else_no_matching_statement.py'
    en la ubicación indicada por ^.
    
       1: if True:
       2:    pass
    -->3:    else:
             ^

    The `else` keyword does not begin a code block that matches
    a valid code block, possibly because `else` is not indented correctly.
    

(112) Write elif, not else if
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\else_if_instead_of_elif.py", line 5
        else if True:
             ^
    SyntaxError: invalid syntax
    
        Tal vez querías escribir `elif`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\else_if_instead_of_elif.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError"""
       2: 
       3: if False:
       4:     pass
    -->5: else if True:
               ^

    You likely meant to use Python's `elif` keyword
    but wrote `else if` instead.
    
    

(113) Write elif, not elseif
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\elseif_instead_of_elif.py", line 5
        elseif True:
               ^
    SyntaxError: invalid syntax
    
        Tal vez querías escribir `elif`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\elseif_instead_of_elif.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError"""
       2: 
       3: if False:
       4:     pass
    -->5: elseif True:
                 ^

    You likely meant to use Python's `elif` keyword
    but wrote `elseif` instead.
    
    

(114) EOL while scanning string literal
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\eol_string_literal.py", line 3
        alphabet = 'abc
                       ^
    SyntaxError: EOL while scanning string literal
    
        Did you forget a closing quote?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\eol_string_literal.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: EOL while scanning string literal"""
       2: 
    -->3: alphabet = 'abc
                         ^

    You started writing a string with a single or double quote
    but never ended the string with another quote on that line.
    

(115) Used equal sign instead of colon
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\equal_sign_instead_of_colon.py", line 4
        ages = {'Alice'=22, 'Bob'=24}
                       ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\equal_sign_instead_of_colon.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax
       2: """
       3: 
    -->4: ages = {'Alice'=22, 'Bob'=24}
                         ^

    Es posible que haya utilizado un signo igual `=` en lugar de dos puntos `:`
    para asignar valores a las claves de un dict
    antes o en la posición indicada por ^.
    

(116) Parens around multiple exceptions
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\except_multiple_exceptions.py", line 3
        except NameError, ValueError as err:
                        ^
    SyntaxError: invalid syntax
    
        ¿Has olvidado los paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\except_multiple_exceptions.py'
    en la ubicación indicada por ^.
    
       1: try:
       2:     pass
    -->3: except NameError, ValueError as err:
                          ^

    I am guessing that you wanted to use an `except` statement
    with multiple exception types. If that is the case, you must
    surround them with parentheses.
    

(117) Extra token
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\extra_token.py", line 1
        print(1 / 2) ==
                       ^
    SyntaxError: invalid syntax
    
        ¿Has escrito `==` por error?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\extra_token.py'
    en la ubicación indicada por ^.
    
    -->1: print(1 / 2) ==
                         ^

    Supongo que has escrito `==` por error.
    Quitándolo y escribiendo `print(1 / 2)` parece que se solucionara el error.
    

(118) Binary f-string not allowed
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_binary.py", line 1
        greet = bf"Hello {name}"
                  ^
    SyntaxError: invalid syntax
    
        `bf` es un prefijo de cadena no valido.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\f_string_binary.py'
    en la ubicación indicada por ^.
    
    -->1: greet = bf"Hello {name}"
                    ^

    Supongo que querías un f-string binario;
    esto no está permitido.
    

(119) f-string: closing } not allowed
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_curly_not_allowed.py", line 1
        f"ab}"
              ^
    SyntaxError: f-string: single '}' is not allowed
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\f_string_curly_not_allowed.py'
    en la ubicación indicada por ^.
    
    -->1: f"ab}"
                ^

    You have written an f-string which has an unmatched `}`.
    If you want to print a single `}`, you need to write `}}` in the f-string;
    otherwise, you need to add an opening `{`.
    

(120) f-string: missing closing }
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_expected_curly.py", line 1
        f"{ab"
              ^
    SyntaxError: f-string: expecting '}'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\f_string_expected_curly.py'
    en la ubicación indicada por ^.
    
    -->1: f"{ab"
                ^

    You have written an f-string which has an unmatched `{`.
    If you want to print a single `{`, you need to write `{{` in the f-string;
    otherwise, you need to add a closing `}`.
    

(121) f-string: unterminated string
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_unterminated.py", line 4
        print(f"Bob is {age['Bob]} years old.")
                                              ^
    SyntaxError: f-string: unterminated string
    
        Tal vez olvidó una comilla de cierre.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\f_string_unterminated.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: f-string: unterminated string
       2: """
       3: 
    -->4: print(f"Bob is {age['Bob]} years old.")
                                                ^

    Inside the f-string `f"Bob is {age['Bob]} years old."`, 
    you have another string, which starts with either a
    single quote (') or double quote ("), without a matching closing one.
    

(122) f-string with backslash
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_with_backslash.py", line 2
        print(f"{'\n'.join(names)}")
                                   ^
    SyntaxError: f-string expression part cannot include a backslash
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\f_string_with_backslash.py'
    en la ubicación indicada por ^.
    
       1: names = ['a', 'b']
    -->2: print(f"{'\n'.join(names)}")
                                     ^

    You have written an f-string whose content `{...}`
    includes a backslash; this is not allowed.
    Perhaps you can replace the part that contains a backslash by
    some variable. For example, suppose that you have an f-string like:
    
        f"{... 'hello\n' ...}"
    
    you could write this as
    
        hello = 'hello\n'
        f"{... hello ...}"
    

(123) Missing terms in for statement
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\for_missing_terms.py", line 1
        for:
           ^
    SyntaxError: invalid syntax
    
        A `for` loop requires at least 3 more terms.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\for_missing_terms.py'
    en la ubicación indicada por ^.
    
    -->1: for:
             ^

    A `for` loop is an iteration over a sequence:
    
        for element in sequence:
            ...
    
    

(124) Not a chance!
-------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_braces.py", line 1
        from __future__ import braces
        ^
    SyntaxError: not a chance
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\future_braces.py'
    en la ubicación indicada por ^.
    
    -->1: from __future__ import braces
          ^

    I suspect you wrote `from __future__ import braces` following
    someone else's suggestion. This will never work.
    
    Unlike other programming languages, Python's code block are defined by
    their indentation level, and not by using some curly braces, like `{...}`.
    

(125) Do not import * from __future__
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_import_star.py", line 1
        from __future__ import *
        ^
    SyntaxError: future feature * is not defined
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\future_import_star.py'
    en la ubicación indicada por ^.
    
    -->1: from __future__ import *
          ^

    When using a `from __future__ import` statement,
    you must import specific named features.
    
    The available features are `nested_scopes,
     generators,
     division,
     absolute_import,
     with_statement,
     print_function,
     unicode_literals,
     barry_as_FLUFL,
     generator_stop,
     annotations`.
    

(126) __future__ at beginning
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_must_be_first.py", line 3
        from __future__ import generators
        ^
    SyntaxError: from __future__ imports must occur at the beginning of the file
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\future_must_be_first.py'
    en la ubicación indicada por ^.
    
       1: 
       2: def fn():
    -->3:     from __future__ import generators
              ^

    A `from __future__ import` statement changes the way Python
    interprets the code in a file.
    It must appear at the beginning of the file.

(127) Typo in __future__
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_typo.py", line 1
        from __future__ import divisio
        ^
    SyntaxError: future feature divisio is not defined
    
        ¿Quieres decir `division`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\future_typo.py'
    en la ubicación indicada por ^.
    
    -->1: from __future__ import divisio
          ^

    Instead of `divisio`, perhaps you meant to import `division`.
    

(128) Unknown feature in __future__
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_unknown.py", line 1
        from __future__ import something
        ^
    SyntaxError: future feature something is not defined
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\future_unknown.py'
    en la ubicación indicada por ^.
    
    -->1: from __future__ import something
          ^

    `something` is not a valid feature of module `__future__`.
    
    The available features are `nested_scopes,
     generators,
     division,
     absolute_import,
     with_statement,
     print_function,
     unicode_literals,
     barry_as_FLUFL,
     generator_stop,
     annotations`.
    

(129) Parenthesis around generator expression
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\generator_expression_parens.py", line 6
        f(x for x in L, 1)
          ^
    SyntaxError: Generator expression must be parenthesized
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\generator_expression_parens.py'
    en la ubicación indicada por ^.
    
       2: def f(it, *varargs, **kwargs):
       3:     return list(it)
       4: 
       5: L = range(10)
    -->6: f(x for x in L, 1)
            ^

    You are using a generator expression, something of the form
    
        x for x in thing
    
    You must add parentheses enclosing that expression.
    

(130) Space between names
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\hyphen_instead_of_underscore.py", line 4
        a-b = 2
        ^
    SyntaxError: cannot assign to operator
    
        ¿Quieres decir `a_b`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\hyphen_instead_of_underscore.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: can't assign to operator
       2: or (Python 3.8) cannot assign to operator"""
       3: 
    -->4: a-b = 2
          ^

    You wrote an expression that includes some mathematical operations
    on the left-hand side of the equal sign which should be
    only used to assign a value to a variable.
    Perhaps you meant to write `a_b` instead of `a-b`
    

(131) Missing condition in if statement
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\if_missing_condition.py", line 1
        if:
          ^
    SyntaxError: invalid syntax
    
        Has olvidado añadir una condición.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\if_missing_condition.py'
    en la ubicación indicada por ^.
    
    -->1: if:
            ^

    An `if` statement requires a condition:
    
        if condition:
            ...
    
    

(132) use j instead of i
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\imaginary_i.py", line 3
        a = 3.0i
               ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `3.0j`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\imaginary_i.py'
    en la ubicación indicada por ^.
    
       1: # SyntaxError: invalid syntax
       2: 
    -->3: a = 3.0i
                 ^

    Tal vez pensó que `i` podría ser utilizado para representar
    la raíz cuadrada de `-1`. En Python, el símbolo utilizado para esto es `j`
    y la parte compleja se escribe como `algún_número` inmediatamente
    seguido de `j`, sin espacios intermedios.
    Tal vez haya querido escribir `3.0j`.
    

(133) Import inversion: import X from Y
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\import_from.py", line 3
        import pen from turtle
                   ^
    SyntaxError: invalid syntax
    
        Did you mean `from turtle import pen`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\import_from.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: import pen from turtle
                     ^

    You wrote something like
    
        import pen from turtle
    instead of
    
        from turtle import pen
    
    
    

(134) IndentationError: expected an indented block
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_1.py", line 4
        pass
        ^
    IndentationError: expected an indented block
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\indentation_error_1.py'
    en la ubicación indicada por ^.
    
       1: '''Should raise IndentationError'''
       2: 
       3: if True:
    -->4: pass
          ^

    Line `4` identified above was expected to begin a new indented block.
    

(135) IndentationError: unexpected indent
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_2.py", line 4
        pass
        ^
    IndentationError: unexpected indent
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\indentation_error_2.py'
    en la ubicación indicada por ^.
    
       1: '''Should raise IndentationError'''
       2: if True:
       3:     pass
    -->4:       pass
                ^

    Line `4` identified above is more indented than expected.
    

(136) IndentationError: unindent does not match ...
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_3.py", line 5
        pass
            ^
    IndentationError: unindent does not match any outer indentation level
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\indentation_error_3.py'
    en la ubicación indicada por ^.
    
       1: '''Should raise IndentationError'''
       2: 
       3: if True:
       4:       pass
    -->5:     pass
                  ^

    Line `5` identified above is less indented than expected.
    

(137) IndentationError: missing continuation line
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_4.py", line 6
        "c"
        ^
    IndentationError: unexpected indent
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\indentation_error_4.py'
    en la ubicación indicada por ^.
    
       2: 
       3: def f():
       4:      s = "a"\
       5:          "b"
    -->6:          "c"
                   ^

    Line `6` identified above is more indented than expected.
    
    However, line 6, which is identified as having a problem,
    consists of a single string which is also the case
    for the preceding line.
    Perhaps you meant to include a continuation character, `\`,
    at the end of line 5.
    

(138) Forgot 'o' for octal
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\integer_with_leading_zero_1.py", line 1
        x = 01
             ^
    SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
    
        ¿Querías decir `0o1`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\integer_with_leading_zero_1.py'
    en la ubicación indicada por ^.
    
    -->1: x = 01
               ^

    Perhaps you meant to write the octal number `0o1`
    and forgot the letter 'o', or perhaps you meant to write
    a decimal integer and did not know that it could not start with zeros.
    

(139) Integer with leading zeros
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\integer_with_leading_zero_2.py", line 1
        x = 000_123_456
                      ^
    SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
    
        ¿Querías decir `123_456`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\integer_with_leading_zero_2.py'
    en la ubicación indicada por ^.
    
    -->1: x = 000_123_456
                        ^

    Perhaps you meant to write the integer `123_456`
    and did not know that it could not start with zeros.
    

(140) Invalid character in identifier
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_character_in_identifier.py", line 6
        🤖 = 'Reeborg'
        ^
    SyntaxError: invalid character '🤖' (U+1F916)
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_character_in_identifier.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid character in identifier
       2: """
       3: 
       4: # Robot-face character below
       5: 
    -->6: 🤖 = 'Reeborg'
          ^

    Python indicates that you used the unicode character `🤖`
    which is not allowed.
    

(141) Invalid decimal literal - 1
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_decimal_literal1.py", line 1
        a = 1e
             ^
    SyntaxError: invalid syntax
    
        Perhaps you forgot a multiplication operator, `1 * e`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_decimal_literal1.py'
    en la ubicación indicada por ^.
    
    -->1: a = 1e
               ^

    Los nombres válidos no pueden empezar por un número.
    Perhaps you forgot a multiplication operator, `1 * e`.
    
    

(142) Invalid encoding
----------------------

.. code-block:: none


      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_encoding.py", line 2, in <module>
        compile(source, filename="example.py", mode="exec")
      File "TESTS:\None", line TESTS:\None
    SyntaxError: encoding problem: utf8 with BOM
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    La codificación del archivo no era valida.
    

(143) Invalid hexadecimal number
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_hexadecimal.py", line 3
        a = 0x123g4
                 ^
    SyntaxError: invalid syntax
    
        ¿Te has equivocado al escribir un entero hexadecimal?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_hexadecimal.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: a = 0x123g4
                   ^

    Parece que has utilizado un carácter no válido (`g`) en un número hexadecimal.
    
    Los números hexadecimales son enteros de base 16 que utilizan los símbolos `0` a `9`
    para representar los valores 0 a 9, y las letras `a` a `f` (o `A` a `F`)
    para representar los valores del 10 al 15.
    En Python, los números hexadecimales comienzan con `0x` o `0X`,
    seguido de los caracteres utilizados para representar el valor de ese número entero.
    

(144) Valid names cannot begin with a number
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier.py", line 3
        36abc = 3
          ^
    SyntaxError: invalid syntax
    
        Los nombres válidos no pueden empezar por un número.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_identifier.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: 36abc = 3
            ^

    Los nombres válidos no pueden empezar por un número.
    

(145) Valid names cannot begin with a number - 2
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_2.py", line 3
        tau = 2pi
               ^
    SyntaxError: invalid syntax
    
        Perhaps you forgot a multiplication operator, `2 * pi`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_identifier_2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: tau = 2pi
                 ^

    Los nombres válidos no pueden empezar por un número.
    Perhaps you forgot a multiplication operator, `2 * pi`.
    
    

(146) Valid names cannot begin with a number - 3
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_3.py", line 1
        3job  # could be entered in a repl
          ^
    SyntaxError: invalid syntax
    
        Perhaps you forgot a multiplication operator, `3 * job`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_identifier_3.py'
    en la ubicación indicada por ^.
    
    -->1: 3job  # could be entered in a repl
            ^

    Los nombres válidos no pueden empezar por un número.
    Perhaps you forgot a multiplication operator, `3 * job`.
    
    [Note: `3j * ob` would also be valid
    since `3j` is a complex number.]
    

(147) Valid names cannot begin with a number - 4
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_4.py", line 1
        3job = 1
          ^
    SyntaxError: invalid syntax
    
        Los nombres válidos no pueden empezar por un número.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_identifier_4.py'
    en la ubicación indicada por ^.
    
    -->1: 3job = 1
            ^

    Los nombres válidos no pueden empezar por un número.
    

(148) Valid names cannot begin with a number - 5
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_5.py", line 1
        print(42java)
                 ^
    SyntaxError: invalid syntax
    
        Perhaps you forgot a multiplication operator, `42 * java`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_identifier_5.py'
    en la ubicación indicada por ^.
    
    -->1: print(42java)
                   ^

    Los nombres válidos no pueden empezar por un número.
    Perhaps you forgot a multiplication operator, `42 * java`.
    
    [Note: `42j * ava` would also be valid
    since `42j` is a complex number.]
    

(149) Keyword can't be an expression
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_keyword_argument.py", line 7
        a = dict('key'=1)
                 ^
    SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_keyword_argument.py'
    en la ubicación indicada por ^.
    
       1: """Should raise
       2: Python < 3.8: SyntaxError: keyword can't be an expression
       3: Python 3.8:  expression cannot contain assignment, perhaps you meant "=="?
       4: """
       5: 
       6: 
    -->7: a = dict('key'=1)
                   ^

    You likely called a function with a named argument:
    
        a_function(invalid=something) 
    
    where `invalid` is not a valid variable name in Python
    either because it starts with a number, or is a string,
    or contains a period, etc.
    

(150) Named argument can't be a Python keyword
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_keyword_argument_2.py", line 7
        a = dict(True=1)
                 ^
    SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
    
        You cannot assign a value to `True`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_keyword_argument_2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise
       2: Python < 3.8: SyntaxError: keyword can't be an expression
       3: Python 3.8:  expression cannot contain assignment, perhaps you meant "=="?
       4: """
       5: 
       6: 
    -->7: a = dict(True=1)
                   ^

    You likely called a function using the Python keyword `True` as an argument:
    
        a_function(True=something) 
    
    which Python interpreted as trying to assign a value to a Python keyword.
    
    You cannot assign a value to `True`.
    

(151) Invalid octal number
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_octal.py", line 3
        b = 0O1876
               ^
    SyntaxError: invalid digit '8' in octal literal
    
        ¿Te has equivocado al escribir un entero octal?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_octal.py'
    en la ubicación indicada por ^.
    
       1: 
       2: 
    -->3: b = 0O1876
                 ^

    Parece que has utilizado un carácter no válido (`8`) en un número octal.
    
    Los números octales son enteros de base 8 que sólo utilizan los símbolos `0` a `7`
    para representar valores.
    En Python, los números hexadecimales comienzan con `0o` o `0O`,
    (el dígito cero seguido de la letra `o`)
    seguido de los caracteres utilizados para representar el valor de ese número entero.
    

(152) Inverted operators 1
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\inverted_operators.py", line 1
        a =< 3
           ^
    SyntaxError: invalid syntax
    
        Did you write operators in an incorrect order?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\inverted_operators.py'
    en la ubicación indicada por ^.
    
    -->1: a =< 3
             ^

    It looks like you wrote two operators (`=` and `<`)
    in the wrong order: `=<` instead of `<=`.
    

(153) Inverted operators 2
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\inverted_operators_2.py", line 1
        a =<* 3
           ^
    SyntaxError: invalid syntax
    
        Did you write operators in an incorrect order?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\inverted_operators_2.py'
    en la ubicación indicada por ^.
    
    -->1: a =<* 3
             ^

    It looks like you wrote two operators (`=` and `<`)
    in the wrong order: `=<` instead of `<=`.
    
    However, making such a change would still not correct
    all the syntax errors in the code you wrote.
    

(154) Iteration variable unpacking in comprehension
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\iteration_unpacking_in_comprehension.py", line 1
        [*x for x in xs]
         ^
    SyntaxError: iterable unpacking cannot be used in comprehension
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\iteration_unpacking_in_comprehension.py'
    en la ubicación indicada por ^.
    
    -->1: [*x for x in xs]
           ^

    You cannot use the `*` operator to unpack the iteration variable
    in a comprehension.
    
    The following statement has no syntax error:
    
        [x for x in xs]
    

(155) Keyword arg only once in function call
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\keyword_arg_repeated.py", line 4
        f(ad=1, ad=2)
                ^
    SyntaxError: keyword argument repeated: ad
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\keyword_arg_repeated.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError:  keyword argument repeated"""
       2: 
       3: 
    -->4: f(ad=1, ad=2)
                  ^

    You have called a function repeating the same keyword argument (`ad`).
    Each keyword argument should appear only once in a function call.
    

(156) Keyword as attribute
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\keyword_as_attribute.py", line 12
        a.pass = 2
          ^
    SyntaxError: invalid syntax
    
        `pass` cannot be used as an attribute.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\keyword_as_attribute.py'
    en la ubicación indicada por ^.
    
        8: 
        9: a = A()
       10: 
       11: a.x = 1
    -->12: a.pass = 2
             ^

    You cannot use the Python keyword `pass` as an attribute.
    
    

(157) lambda with parentheses around arguments
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\lambda_with_parens.py", line 2
        x = lambda (a, b): a + b
                   ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\lambda_with_parens.py'
    en la ubicación indicada por ^.
    
       1: 
    -->2: x = lambda (a, b): a + b
                     ^

    `lambda` no permite paréntesis alrededor de sus argumentos.
    Esto estaba permitido en Python 2 pero no en Python 3.
    

(158) lambda with tuple as argument
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\lambda_with_tuple_argument.py", line 2
        x = lambda a, (b, c): a + b + b
                      ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\lambda_with_tuple_argument.py'
    en la ubicación indicada por ^.
    
       1: 
    -->2: x = lambda a, (b, c): a + b + b
                        ^

    No se pueden tener tuplas explícitas como argumentos.
    Asigne cualquier tupla a un parámetro y desempaque
    dentro del cuerpo de la función.
    

(159) Assign to literal in for loop
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\literal_in_for_loop.py", line 1
        for "char" in "word":
            ^
    SyntaxError: cannot assign to literal
    
        You can only assign objects to identifiers (variable names).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\literal_in_for_loop.py'
    en la ubicación indicada por ^.
    
    -->1: for "char" in "word":
              ^

    A for loop must have the form:
    
        for ... in sequence:
    
    where `...` must contain only identifiers (variable names)
    and not literals like `"char"`.
    

(160) IndentationError/SyntaxError depending on version
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_code_block.py", line 4
    IndentationError: expected an indented block
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_code_block.py'
    en la ubicación indicada por ^.
    
       1: '''Should raise SyntaxError: unexpected EOF while parsing'''
       2: 
       3: for i in range(10):
    -->4: 
          ^

    Line `4` identified above was expected to begin a new indented block.
    

(161) IndentationError/SyntaxError depending on version - 2
-----------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_code_block_2.py", line 6
    IndentationError: expected an indented block
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_code_block_2.py'
    en la ubicación indicada por ^.
    
       1: # issue #83
       2: a = 1
       3: for i in "test":
       4:    #
       5:    #
    -->6: 
          ^

    Line `6` identified above was expected to begin a new indented block.
    

(162) Missing colon - if
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_colon_if.py", line 3
        if True
               ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste los dos puntos `:`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_colon_if.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError"""
       2: 
    -->3: if True
                 ^

    Ha escrito una sentencia que empieza por
    if` pero se olvidó de añadir los dos puntos `:` al final.
    
    

(163) Missing colon - while
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_colon_while.py", line 3
        while True  # a comment
                    ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste los dos puntos `:`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_colon_while.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError"""
       2: 
    -->3: while True  # a comment
                      ^

    Has escrito un bucle `while` pero
    olvidó añadir dos puntos `:` al final
    
    

(164) Missing comma in a dict
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_dict.py", line 5
        'c': 3,
        ^
    SyntaxError: invalid syntax
    
        ¿Te has olvidado de una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_comma_in_dict.py'
    en la ubicación indicada por ^.
    
       2: 
       3: a = {'a': 1,
       4:      'b': 2
    -->5:      'c': 3,
               ^
       6: }

    Python indica que el error es causado por `'c'` escrito inmediatamente después de `2`.
    Es posible que haya olvidado una coma entre los elementos de un set o dict
    antes de la posición indicada por ^.
    Tal vez se refería a
    
        a = {'a': 1,
     'b': 2, 
     'c': 3,
    }
    

(165) Missing comma between strings in a dict
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_dict_2.py", line 4
        'c': '3',
           ^
    SyntaxError: invalid syntax
    
        ¿Te has olvidado de una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_comma_in_dict_2.py'
    en la ubicación indicada por ^.
    
       1: 
       2: a = {'a': '1',
       3:      'b': '2'
    -->4:      'c': '3',
                  ^
       5: }

    Supongo que has olvidado una coma entre dos cadenas
    al definir un dict.
    
    ```
    a = {'a': '1',
         'b': '2'
          «,» 'c': '3',
    }
    ```

(166) Missing comma in a list
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_list.py", line 3
        a = [1, 2  3]
                   ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste algo entre `2` y `3`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_comma_in_list.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: a = [1, 2  3]
                      ^

    Python indica que el error es causado por `3` escrito inmediatamente después de `2`.
    Es posible que haya olvidado una coma entre los elementos de una lista
    antes de la posición indicada por ^.
    Tal vez usted quería insertar un operador como `+, -, *`
    entre `2` y `3`.
    Las siguientes líneas de código no causarían ningún `SyntaxError`:
    
        a = [1, 2,   3]
        a = [1, 2 +   3]
        a = [1, 2 -   3]
        a = [1, 2 *   3]
    Nota: estas son sólo algunas de las opciones posibles y que
    algunas de ellas pueden generar otros tipos de excepciones.
    

(167) Missing comma in a set
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_set.py", line 3
        a = {1, 2  3}
                   ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste algo entre `2` y `3`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_comma_in_set.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: a = {1, 2  3}
                      ^

    Python indica que el error es causado por `3` escrito inmediatamente después de `2`.
    Es posible que haya olvidado una coma entre los elementos de un set o dict
    antes de la posición indicada por ^.
    Tal vez usted quería insertar un operador como `+, -, *`
    entre `2` y `3`.
    Las siguientes líneas de código no causarían ningún `SyntaxError`:
    
        a = {1, 2,   3}
        a = {1, 2 +   3}
        a = {1, 2 -   3}
        a = {1, 2 *   3}
    Nota: estas son sólo algunas de las opciones posibles y que
    algunas de ellas pueden generar otros tipos de excepciones.
    

(168) Missing comma in a tuple
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_tuple.py", line 3
        a = (1, 2  3)
                   ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste algo entre `2` y `3`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_comma_in_tuple.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: a = (1, 2  3)
                      ^

    Python indica que el error es causado por `3` escrito inmediatamente después de `2`.
    Es posible que haya olvidado una coma entre los elementos de una tupla, 
    o entre los argumentos de una función, 
    antes de la posición indicada por ^.
    Tal vez usted quería insertar un operador como `+, -, *`
    entre `2` y `3`.
    Las siguientes líneas de código no causarían ningún `SyntaxError`:
    
        a = (1, 2,   3)
        a = (1, 2 +   3)
        a = (1, 2 -   3)
        a = (1, 2 *   3)
    Nota: estas son sólo algunas de las opciones posibles y que
    algunas de ellas pueden generar otros tipos de excepciones.
    

(169) For loop missing 'in' operator
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_in_with_for.py", line 1
        for x range(4):
              ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste escribir `in`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_in_with_for.py'
    en la ubicación indicada por ^.
    
    -->1: for x range(4):
                ^

    It looks as though you forgot to use the keyword `in`
    as part of a `for` statement. Perhaps you meant:
    
        for x in range(4):
    
    

(170) Missing parenthesis for range
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_parens_for_range.py", line 1
        for i in range 3:
                       ^
    SyntaxError: invalid syntax
    
        ¿Te has olvidado de escribir paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_parens_for_range.py'
    en la ubicación indicada por ^.
    
    -->1: for i in range 3:
                          ^

    Parece que te has olvidado de usar paréntesis con `range`.
    Tal vez quisiste decir:
    
        for i in range( 3):
    
    

(171) Misspelled Python keyword
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\misspelled_keyword.py", line 2
        is i in range(3):
        ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `if i in range(3):`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\misspelled_keyword.py'
    en la ubicación indicada por ^.
    
       1: i = 3
    -->2: is i in range(3):
          ^

    Tal vez quiso escribir `if` y cometió un error.
    La línea correcta podría ser `if i in range(3):`
    

(172) Name is global and nonlocal
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\name_is_global_and_nonlocal.py", line 7
        global xy
        ^
    SyntaxError: name 'xy' is nonlocal and global
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\name_is_global_and_nonlocal.py'
    en la ubicación indicada por ^.
    
       3: xy = 1
       4: 
       5: 
       6: def f():
    -->7:     global xy
              ^

    You declared `xy` as being both a global and nonlocal variable.
    A variable can be global, or nonlocal, but not both at the same time.
    

(173) Name is parameter and nonlocal
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\name_is_param_and_nonlocal.py", line 5
        nonlocal x
        ^
    SyntaxError: name 'x' is parameter and nonlocal
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\name_is_param_and_nonlocal.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: name 'x' is parameter and nonlocal"""
       2: 
       3: 
       4: def f(x):
    -->5:     nonlocal x
              ^

    You used `x` as a parameter for a function
    before declaring it also as a nonlocal variable:
    `x` cannot be both at the same time.
    

(174) nonlocal variable not found
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\no_binding_for_nonlocal.py", line 5
        nonlocal ab
        ^
    SyntaxError: no binding for nonlocal 'ab' found
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\no_binding_for_nonlocal.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: no binding for nonlocal 'ab' found"""
       2: 
       3: 
       4: def f():
    -->5:     nonlocal ab
              ^

    You declared the variable `ab` as being a
    nonlocal variable but it cannot be found.
    

(175) nonlocal variable not found at module level
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\nonlocal_at_module.py", line 4
        nonlocal cd
        ^
    SyntaxError: nonlocal declaration not allowed at module level
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\nonlocal_at_module.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError:  nonlocal declaration not allowed at module level"""
       2: 
       3: 
    -->4: nonlocal cd
          ^

    You used the nonlocal keyword at a module level.
    The nonlocal keyword refers to a variable inside a function
    given a value outside that function.

(176) Same operator twice in a row
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\operator_twice_in_a_row.py", line 1
        4****5
           ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\operator_twice_in_a_row.py'
    en la ubicación indicada por ^.
    
    -->1: 4****5
             ^

    You cannot have write the same operator, `**`, twice in a row.
    Perhaps you wrote one of them by mistake
    or forgot to write something between them.
    

(177) Using pip from interpreter
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\pip_install_1.py", line 2
        pip install friendly
            ^
    SyntaxError: invalid syntax
    
        Pip no puede ser utilizado en un intérprete de Python.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\pip_install_1.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: pip install friendly
              ^

    Parece que está intentando utilizar pip para instalar un módulo.
    `pip` es un comando que debe ejecutarse en una terminal,
    no desde un intérprete de Python.
    

(178) Using pip from interpreter 2
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\pip_install_2.py", line 2
        python -m pip install friendly
                  ^
    SyntaxError: invalid syntax
    
        Pip no puede ser utilizado en un intérprete de Python.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\pip_install_2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: python -m pip install friendly
                    ^

    Parece que está intentando utilizar pip para instalar un módulo.
    `pip` es un comando que debe ejecutarse en una terminal,
    no desde un intérprete de Python.
    

(179) print is a function
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function.py", line 2
        print 'hello'
              ^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print('hello')?
    
        Did you mean `print('hello')`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_is_a_function.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: Missing parentheses in call to 'print' ..."""
    -->2: print 'hello'
                ^

    Perhaps you need to type
    
         print('hello')
    
    In older version of Python, `print` was a keyword.
    Now, `print` is a function; you need to use parentheses to call it.
    

(180) print is a function 2
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_2.py", line 2
        print len('hello')
              ^
    SyntaxError: invalid syntax
    
        ¿Quiere decir `print(len('hello'))`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_is_a_function_2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: print len('hello')
                ^

    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función; necesitas usar paréntesis para llamarla.
    

(181) print is a function 3
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_3.py", line 1
        print """This is a very long string which results in a very long error message."""
              ^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print("""This is a very long string which results in a very long error message.""")?
    
        Did you mean `print("""This is a very long st ... )`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_is_a_function_3.py'
    en la ubicación indicada por ^.
    
    -->1: print """This is a very long string which results in a very long error message."""
                ^

    Perhaps you need to type
    
         print("""This is a very long st ... )
    
    In older version of Python, `print` was a keyword.
    Now, `print` is a function; you need to use parentheses to call it.
    

(182) print is a function 4
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_4.py", line 2
        print len("""This is a long string
              ^
    SyntaxError: invalid syntax
    
        ¿Quiere decir `print(...)`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_is_a_function_4.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: print len("""This is a long string
                ^
       3:           that spans multiple lines.""")

    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función; necesitas usar paréntesis para llamarla.
    

(183) print is a function 5
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_5.py", line 2
        print len('This is a long string that fits on a single line.')
              ^
    SyntaxError: invalid syntax
    
        ¿Quiere decir `print(len('This ... line.'))`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_is_a_function_5.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: print len('This is a long string that fits on a single line.')
                ^

    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función; necesitas usar paréntesis para llamarla.
    

(184) print is a function 6
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_non_paren_non_string1.py", line 1
        print hello world!
              ^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print(hello world!)?
    
        Did you mean `print("hello world!")`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_non_paren_non_string1.py'
    en la ubicación indicada por ^.
    
    -->1: print hello world!
                ^

    Perhaps you need to type
    
         print("hello world!")
    
    In older version of Python, `print` was a keyword.
    Now, `print` is a function; you need to use parentheses to call it.
    Note that arguments of `print` must be separated by commas.
    

(185) print is a function 7
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_non_paren_non_string2.py", line 1
        print len("hello") hello
              ^
    SyntaxError: invalid syntax
    
        ¿Quiere decir `print('len("hello") hello')`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_non_paren_non_string2.py'
    en la ubicación indicada por ^.
    
    -->1: print len("hello") hello
                ^

    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función; necesitas usar paréntesis para llamarla.
    Note that arguments of `print` must be separated by commas.
    

(186) Calling python from interpreter
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\python_interpreter.py", line 1
        python -i friendly
                  ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\python_interpreter.py'
    en la ubicación indicada por ^.
    
    -->1: python -i friendly
                    ^

    Supongo que estás intentando utilizar Python para ejecutar un programa.
    Debe hacerlo desde un terminal y no desde un intérprete de Python.
    

(187) problem with assigning a variable to Python
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\python_not_interpreter.py", line 1
        python = a b
                   ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste algo entre `a` y `b`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\python_not_interpreter.py'
    en la ubicación indicada por ^.
    
    -->1: python = a b
                     ^

    Python indica que el error es causado por `b` escrito inmediatamente después de `a`.
    Tal vez usted quería insertar un operador como `+; -; *; ,`
    entre `a` y `b`.
    Las siguientes líneas de código no causarían ningún `SyntaxError`:
    
        python = a +  b
        python = a -  b
        python = a *  b
        python = a,  b
    Nota: estas son sólo algunas de las opciones posibles y que
    algunas de ellas pueden generar otros tipos de excepciones.
    

(188) Quote inside a string
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\quote_inside_string.py", line 3
        message = 'don't'
                       ^
    SyntaxError: invalid syntax
    
        Perhaps you misplaced a quote.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\quote_inside_string.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: message = 'don't'
                          ^

    There appears to be a Python identifier (variable name)
    immediately following a string.
    I suspect that you were trying to use a quote inside a string
    that was enclosed in quotes of the same kind.
    

(189) Raising multiple exceptions
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\raise_multiple_exceptions.py", line 2
        raise X, Y
               ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\raise_multiple_exceptions.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: raise X, Y
                 ^

    Parece que estás intentando lanzar una excepción utilizando la sintaxis de Python 2.
    

(190) Cannot use return outside function
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\return_outside_function.py", line 3
        return
        ^
    SyntaxError: 'return' outside function
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\return_outside_function.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: 'return' outside function"""
       2: 
    -->3: return
          ^

    You can only use a `return` statement inside a function or method.
    

(191) Semi-colon instead of comma - 1
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_comma_1.py", line 1
        a = [1, 2; 3]
                 ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\semi_colon_instead_of_comma_1.py'
    en la ubicación indicada por ^.
    
    -->1: a = [1, 2; 3]
                   ^

    Has escrito un punto y coma, `;`, donde se esperaba una coma.
    

(192) Semi-colon instead of commas - 2
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_comma_2.py", line 1
        a = [1; 2; 3]
              ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir comas?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\semi_colon_instead_of_comma_2.py'
    en la ubicación indicada por ^.
    
    -->1: a = [1; 2; 3]
                ^

    Has escrito punto y coma, `;`, donde se esperaban comas.
    

(193) Semi-colon instead of commas - 3
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_comma_3.py", line 1
        a = [1; 2; 3];
              ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir comas?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\semi_colon_instead_of_comma_3.py'
    en la ubicación indicada por ^.
    
    -->1: a = [1; 2; 3];
                ^

    Has escrito punto y coma, `;`, donde se esperaban comas.
    

(194) Single = instead of double == with if
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\single_equal_with_if.py", line 3
        if i % 2 = 0:
                 ^
    SyntaxError: invalid syntax
    
        Perhaps you needed `==` instead of `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\single_equal_with_if.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: for i in range(101):
    -->3:     if i % 2 = 0:
                       ^

    Es probable que hayas utilizado un operador de asignación `=` en lugar de un operador de igualdad `==`.
    The following statement would not contain a syntax error:
    
        if i % 2 == 0:

(195) Single = instead of double == with elif
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\single_equal_with_elif.py", line 5
        elif i % 2 = 0:
                   ^
    SyntaxError: invalid syntax
    
        Perhaps you needed `==` instead of `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\single_equal_with_elif.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: for i in range(101):
       3:     if False:
       4:         pass
    -->5:     elif i % 2 = 0:
                         ^

    Es probable que hayas utilizado un operador de asignación `=` en lugar de un operador de igualdad `==`.
    The following statement would not contain a syntax error:
    
        elif i % 2 == 0:

(196) Single = instead of double == with while
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\single_equal_with_while.py", line 4
        while a = 1:
                ^
    SyntaxError: invalid syntax
    
        Tal vez necesitabas `==` o `:=` en lugar de `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\single_equal_with_while.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: a = 1
       3: 
    -->4: while a = 1:
                  ^

    Has utilizado un operador de asignación `=`; quizás querías utilizar 
    un operador de igualdad, `==`, o el operador de asignación aumentado `:=`.
    

(197) Space between operators 1
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\space_between_operators_1.py", line 1
        a = 2 * * 5
                ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\space_between_operators_1.py'
    en la ubicación indicada por ^.
    
    -->1: a = 2 * * 5
                  ^

    You cannot have write the same operator, `*`, twice in a row.
    Perhaps you wrote one of them by mistake
    or forgot to write something between them.
    O quizás incluyó un espacio por error entre los dos operadores
    y quiso escribir `**` como un solo operador.
    

(198) Space between operators 2
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\space_between_operators_2.py", line 1
        a / = b
            ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\space_between_operators_2.py'
    en la ubicación indicada por ^.
    
    -->1: a / = b
              ^

    You cannot have these two operators, `/` and `=`,
    following each other. Perhaps you wrote one of them by mistake
    or forgot to write something between them.
    O quizás incluyó un espacio por error entre los dos operadores
    y quiso escribir `/=` como un solo operador.
    

(199) Space in variable name
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\space_in_variable_name.py", line 1
        my name = André
           ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `my_name`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\space_in_variable_name.py'
    en la ubicación indicada por ^.
    
    -->1: my name = André
             ^

    No puede haber espacios en los identificadores (nombres de variables).
    

(200) Wrong target for star assignment
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\star_assignment_target.py", line 1
        *a = 1
        ^
    SyntaxError: starred assignment target must be in a list or tuple
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\star_assignment_target.py'
    en la ubicación indicada por ^.
    
    -->1: *a = 1
          ^

    A star assignment must be of the form:
    
        ... *name = list_or_tuple
    
    

(201) Too many nested blocks
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\too_many_nested_blocks.py", line 22
        while 22:
        ^
    SyntaxError: too many statically nested blocks
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\too_many_nested_blocks.py'
    en la ubicación indicada por ^.
    
       18:                  while 18:
       19:                   while 19:
       20:                    while 20:
       21:                     while 21:
    -->22:                      while 22:
                                ^

    Tu código es demasiado complejo para Python:
    necesitas reducir el número de bloques de código con sangría
    contenidos dentro de otros bloques de código.
    

(202) Too many nested parentheses.
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\too_many_parentheses.py", line 4
        ((((((((((((((((((((((((((((((((((
                                         ^
    SyntaxError: too many nested parentheses
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\too_many_parentheses.py'
    en la ubicación indicada por ^.
    
       1: ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
       2:     ((((((((((((((((((((((((((((((((((((((((((((((((((((((((
       3:         (((((((((((((((((((((((((((((((((((((((((((((((((((
    -->4:             ((((((((((((((((((((((((((((((((((
                                                       ^
       5:                                              ))))))))))))))))))))))))))))))))))))))))))))))))))
       6:         )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
       7:     ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

    Tu código es demasiado complejo para Python:
    necesitas reducir el número de paréntesis
    contenidos dentro de otros paréntesis.
    

(203) Trailing comma in import statement
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\trailing_comma_in_import.py", line 2
        from math import sin, cos,
                                  ^
    SyntaxError: trailing comma not allowed without surrounding parentheses
    
        ¿Escribiste una coma por error?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\trailing_comma_in_import.py'
    en la ubicación indicada por ^.
    
       1: # See also and_in_import_statement_2.py which gives the same error message
    -->2: from math import sin, cos,
                                    ^

    Python indica que hay que rodear una expresión
    que termina con una coma por medio de paréntesis.
    However, if you remove the last comma, there will be no syntax error.
    Quizás quisiste escribir
    
    `from math import sin, cos`
    

(204) Triple-equal sign
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\triple_equal.py", line 3
        x = y === z
                ^
    SyntaxError: invalid syntax
    
        Did you mean to use `is` instead of `===`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\triple_equal.py'
    en la ubicación indicada por ^.
    
       1: 
       2: 
    -->3: x = y === z
                  ^

    You wrote three equal signs in a row which is allowed in some
    programming languages, but not in Python. To check if two objects
    are equal, use two equal signs, `==`; to see if two names represent
    the exact same object, use the operator `is`.
    

(205) Unclosed bracket
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_bracket.py", line 7
        print(foo())
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unclosed_bracket.py'
    en la ubicación indicada por ^.
    
        3: 
        4: def foo():
        5:     return [1, 2, 3
        6: 
    --> 7: print(foo())
           ^

    El corchete `[` de apertura en la línea 5 no está cerrado.
    
        5:     return [1, 2, 3
                      ^
    

(206) Unclosed parenthesis - 1
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_1.py", line 3
        if x == 1:
                 ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unclosed_paren_1.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: x = int('1'
    -->3: if x == 1:
                   ^
       4:     print('yes')

    El paréntesis `(` de apertura en la línea 2 no está cerrado.
    
        2: x = int('1'
                  ^
    

(207) Unclosed parenthesis - 2
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_2.py", line 3
        d = a*a
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unclosed_paren_2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: a = (b+c
    -->3: d = a*a
          ^

    El paréntesis `(` de apertura en la línea 2 no está cerrado.
    
        2: a = (b+c
               ^
    

(208) Unclosed parenthesis - 3
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_3.py", line 7
        if 2:
            ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unclosed_paren_3.py'
    en la ubicación indicada por ^.
    
       4:     if 1:
       5:         print(((123))
       6: 
    -->7: if 2:
              ^
       8:     print(123))

    El paréntesis `(` de apertura en la línea 5 no está cerrado.
    
        5:         print(((123))
                        ^
    Si esto es incorrecto, por favor reporte este caso.
    

(209) Unclosed parenthesis - 4
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_4.py", line 4
        def test():
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unclosed_paren_4.py'
    en la ubicación indicada por ^.
    
       1: # equal number of ( and ) in file
       2: print('hello'
       3: 
    -->4: def
          ^

    El paréntesis `(` de apertura en la línea 2 no está cerrado.
    
        2: print('hello'
                ^
    

(210) Content passed continuation line character
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unexpected_after_continuation_character.py", line 5
        print(\t)
                ^
    SyntaxError: unexpected character after line continuation character
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unexpected_after_continuation_character.py'
    en la ubicación indicada por ^.
    
       1: """Should raise
       2: SyntaxError: unexpected character after line continuation character
       3: """
       4: 
    -->5: print(\t)
                  ^

    You are using the continuation character `\` outside of a string,
    and it is followed by some other character(s).
    Supongo que has olvidado encerrar algún contenido en una cadena.
    

(211) Unexpected EOF while parsing
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unexpected_eof.py", line 8
    SyntaxError: unexpected EOF while parsing
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unexpected_eof.py'
    en la ubicación indicada por ^.
    
        3: 
        4: def foo():
        5:     return [1, 2, 3,
        6: 
        7: print(foo())
    --> 8: 
           ^

    Python nos dice que llegó al final del archivo
    y que esperaba más contenido.
    
    Intentaré dar un poco más de información.
    
    El corchete `[` de apertura en la línea 5 no está cerrado.
    
        5:     return [1, 2, 3,
                      ^
    

(212) Invalid character (unicode fraction 3/4)
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_fraction.py", line 1
        a = ¾  # 3/4
            ^
    SyntaxError: invalid character '¾' (U+00BE)
    
        ¿Quieres decir `3/4`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_fraction.py'
    en la ubicación indicada por ^.
    
    -->1: a = ¾  # 3/4
              ^

    ¿Usaste copiar y pegar?
    Python indicates that you used the unicode character `¾`
    which is not allowed.
    Has utilizado el carácter unicode ¾ que se conoce como
    VULGAR FRACTION THREE QUARTERS
    Sospecho que querías escribir la fracción `3/4` en su lugar.
    

(213) Invalid character (unicode fraction 1/2)
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_fraction2.py", line 1
        a = 1½  # 1 1/2
             ^
    SyntaxError: invalid character '½' (U+00BD)
    
        ¿Quieres decir `1/2`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_fraction2.py'
    en la ubicación indicada por ^.
    
    -->1: a = 1½  # 1 1/2
               ^

    ¿Usaste copiar y pegar?
    Python indicates that you used the unicode character `½`
    which is not allowed.
    Has utilizado el carácter unicode ½ que se conoce como
    VULGAR FRACTION ONE HALF
    Sospecho que querías escribir la fracción `1/2` en su lugar.
    

(214) Invalid character (unicode fraction slash)
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_fraction3.py", line 1
        a = 22 ⁄ 7
               ^
    SyntaxError: invalid character '⁄' (U+2044)
    
        Did you mean to use the division operator, `/`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_fraction3.py'
    en la ubicación indicada por ^.
    
    -->1: a = 22 ⁄ 7
                 ^

    ¿Usaste copiar y pegar?
    Python indicates that you used the unicode character `⁄`
    which is not allowed.
    Sospecho que has utilizado el carácter unicode conocido como
    'FRACTION SLASH', que es similar a
    pero es diferente del operador de división `/`.
    

(215) Invalid character (unicode quote)
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote.py", line 3
        a = « hello »
            ^
    SyntaxError: invalid character '«' (U+00AB)
    
        ¿Quería utilizar un carácter de comillas normal, `'` o `"`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_quote.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid character in identifier for Python <=3.8
       2:    and  SyntaxError: invalid character '«' (U+00AB) in Python 3.9"""
    -->3: a = « hello »
              ^

    ¿Usaste copiar y pegar?
    Python indicates that you used the unicode character `«`
    which is not allowed.
    Sospecho que has utilizado una comilla unicode de fantasía
    cuyo nombre es LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
    en lugar de una comilla simple o doble normal para una cadena.
    

(216) Invalid character (unicode quote2)
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote2.py", line 2
        a = ‹ hello ›
            ^
    SyntaxError: invalid character '‹' (U+2039)
    
        ¿Quería utilizar un carácter de comillas normal, `'` o `"`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_quote2.py'
    en la ubicación indicada por ^.
    
       1: # matching unicode quotes in pair; not mistaken for < and > (less/greater)
    -->2: a = ‹ hello ›
              ^

    ¿Usaste copiar y pegar?
    Python indicates that you used the unicode character `‹`
    which is not allowed.
    Sospecho que has utilizado una comilla unicode de fantasía
    cuyo nombre es SINGLE LEFT-POINTING ANGLE QUOTATION MARK
    en lugar de una comilla simple o doble normal para una cadena.
    

(217) Invalid character (mistaken <)
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote3.py", line 2
        if a ‹ hello:
             ^
    SyntaxError: invalid character '‹' (U+2039)
    
        ¿Quería utilizar un carácter de comillas normal, `'` o `"`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_quote3.py'
    en la ubicación indicada por ^.
    
       1: # unicode quote not in pair; mistaken <
    -->2: if a ‹ hello:
               ^

    ¿Usaste copiar y pegar?
    Python indicates that you used the unicode character `‹`
    which is not allowed.
    Sospecho que has utilizado una comilla unicode de fantasía
    cuyo nombre es SINGLE LEFT-POINTING ANGLE QUOTATION MARK
    en lugar de una comilla simple o doble normal para una cadena.
    O tal vez, quisiste escribir un signo menos que, `<`.
    

(218) Invalid character (mistaken >)
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote4.py", line 2
        if a › hello:
             ^
    SyntaxError: invalid character '›' (U+203A)
    
        ¿Quería utilizar un carácter de comillas normal, `'` o `"`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_quote4.py'
    en la ubicación indicada por ^.
    
       1: # unicode quote not in pair; mistaken >
    -->2: if a › hello:
               ^

    ¿Usaste copiar y pegar?
    Python indicates that you used the unicode character `›`
    which is not allowed.
    Sospecho que has utilizado una comilla unicode de fantasía
    cuyo nombre es SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
    en lugar de una comilla simple o doble normal para una cadena.
    O tal vez, quisiste escribir un signo mayor que, `>`.
    

(219) Invalid character (mistaken comma)
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote5.py", line 2
        a = (1‚ 2)
              ^
    SyntaxError: invalid character '‚' (U+201A)
    
        ¿Quería utilizar un carácter de comillas normal, `'` o `"`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_quote5.py'
    en la ubicación indicada por ^.
    
       1: # unicode quote not in pair; mistaken comma
    -->2: a = (1‚ 2)
                ^

    ¿Usaste copiar y pegar?
    Python indicates that you used the unicode character `‚`
    which is not allowed.
    Sospecho que has utilizado una comilla unicode de fantasía
    cuyo nombre es SINGLE LOW-9 QUOTATION MARK
    en lugar de una comilla simple o doble normal para una cadena.
    O tal vez, quisiste escribir una coma.
    

(220) Unmatched closing curly bracket
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_curly.py", line 6
        3, 4,}}
              ^
    SyntaxError: unmatched '}'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unmatched_closing_curly.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax for Python < 3.8
       2:    otherwise, SyntaxError: unmatched ')'
       3: """
       4: a = {1,
       5:     2,
    -->6:     3, 4,}}
                    ^

    The closing llave `}` on line 6 does not match anything.
    

(221) Unmatched closing parenthesis
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_paren.py", line 6
        3, 4,))
              ^
    SyntaxError: unmatched ')'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unmatched_closing_paren.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax for Python < 3.8
       2:    otherwise, SyntaxError: unmatched ')'
       3: """
       4: a = (1,
       5:     2,
    -->6:     3, 4,))
                    ^

    The closing paréntesis `)` on line 6 does not match anything.
    

(222) Mismatched brackets - 1
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_bracket_1.py", line 2
        x = (1, 2, 3]
                    ^
    SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unmatched_closing_bracket_1.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
    -->2: x = (1, 2, 3]
                      ^

    The closing corchete `]` on line 2 does not match the opening paréntesis `(` on line 2.
    
        2: x = (1, 2, 3]
               ^       ^
    

(223) Mismatched brackets - 2
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_bracket_2.py", line 4
        3]
         ^
    SyntaxError: closing parenthesis ']' does not match opening parenthesis '(' on line 2
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unmatched_closing_bracket_2.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: x = (1,
       3:      2,
    -->4:      3]
                ^

    The closing corchete `]` on line 4 does not match the opening paréntesis `(` on line 2.
    
        2: x = (1,
               ^
        4:      3]
                 ^
    

(224) Unmatched brackets - 3
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_bracket_3.py", line 3
        3]]
          ^
    SyntaxError: unmatched ']'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unmatched_closing_bracket_3.py'
    en la ubicación indicada por ^.
    
       1: x = [1,
       2:      2,
    -->3:      3]]
                 ^

    The closing corchete `]` on line 3 does not match anything.
    

(225) Unpacking a dict value
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unpacking_dict_value.py", line 1
        {'a': *(1, 2, 3)}
              ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unpacking_dict_value.py'
    en la ubicación indicada por ^.
    
    -->1: {'a': *(1, 2, 3)}
                ^

    You cannot have these two operators, `:` and `*`,
    following each other.
    It looks like you tried to use a starred expression as a dict value;
    this is not allowed.
    
    The following statement has no syntax error:
    
        {'a': (1, 2, 3)}
    

(226) Unterminated triple quoted string
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unterminated_triple_quote_string.py", line 4
        some_text = """In a land
    populated by weird animals,
    a ...
                                                                   ^
    SyntaxError: EOF while scanning triple-quoted string literal
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unterminated_triple_quote_string.py'
    .
    
       1: some_text =

    You started writing a triple-quoted string but never wrote
    the triple quotes needed to end the string.
    

(227) TabError
--------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\tab_error.py", line 7
        pass
        ^
    TabError: inconsistent use of tabs and spaces in indentation
    
    Un `TabError` indica que ha utilizado tanto espacios
    y caracteres de tabulación para indentar tu código.
    Esto no está permitido en Python.
    Indentar tu código significa tener un bloque de código alineado verticalmente
    insertando espacios o caracteres de tabulación al principio de las líneas.
    La recomendación de Python es utilizar siempre espacios para sangrar el código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\tab_error.py'
    en la ubicación indicada por ^.
    
       3: 
       4: 
       5: def test_tab_error():
       6:     if True:
    -->7: 	pass
         ^

(228) EOL unescaped backslash
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unescaped_backslash.py", line 1
        a = "abc\"
                  ^
    SyntaxError: EOL while scanning string literal
    
        Did you forget to escape a backslash character?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unescaped_backslash.py'
    en la ubicación indicada por ^.
    
    -->1: a = "abc\"
                    ^

    You started writing a string with a single or double quote
    but never ended the string with another quote on that line.
    Perhaps you meant to write the backslash character, `\`
    as the last character in the string and forgot that you
    needed to escape it by writing two `\` in a row.
    

(229) Using the backquote character
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\use_backquote.py", line 3
        a = `1`
            ^
    SyntaxError: invalid syntax
    
        No debe utilizar el carácter de retrocomilla.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\use_backquote.py'
    en la ubicación indicada por ^.
    
       1: """Should raise SyntaxError: invalid syntax"""
       2: 
    -->3: a = `1`
              ^

    Estás utilizando el carácter de comillas.
    O bien has querido escribir una comilla simple, ', o has copiado el código de Python 2;
    en este último caso, utiliza la función `repr(x)`.

(230) unicode error
-------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_error.py", line 1
        path = "c:\Users\andre"
                               ^
    SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape
    
        Tal vez sea necesario duplicar las barras invertidas.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_error.py'
    en la ubicación indicada por ^.
    
    -->1: path = "c:\Users\andre"
                                 ^

    I suspect that you wrote a string that contains
    one backslash character, `\` followed by an uppercase `U`
    and some more characters.
    Python likely interpreted this as indicating the beginning of
    what is known as an escape sequence for special unicode characters.
    To solve the problem, either write a so-called 'raw string'
    by adding the letter `r` as a prefix in
    front of the string, or replace `\U`, by `\\U`.
    

(231) Walrus instead of equal
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\walrus_instead_of_equal.py", line 1
        a := 3
              ^
    SyntaxError: invalid syntax
    
        ¿Querías usar `=`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\walrus_instead_of_equal.py'
    en la ubicación indicada por ^.
    
    -->1: a := 3
                ^

    Se utiliza el operador de asignación aumentado `:=` donde
    el operador de asignación normal `=` era necesario.
    

(232) Missing condition in while statement
------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\while_missing_condition.py", line 1
        while:
             ^
    SyntaxError: invalid syntax
    
        Has olvidado añadir una condición.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\while_missing_condition.py'
    en la ubicación indicada por ^.
    
    -->1: while:
               ^

    A `while` loop requires a condition:
    
        while condition:
            ...
    
    

(233) Would-be variable declaration
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\would_be_type_declaration_1.py", line 3
        if var start := begin < end:
               ^
    SyntaxError: invalid syntax
    
        No es necesario declarar variables en Python.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\would_be_type_declaration_1.py'
    en la ubicación indicada por ^.
    
       1: begin, end = 1, 2
       2: 
    -->3: if var start := begin < end:
                 ^

    It looks like you were trying to declare that `start` was
    a variable using the word `var`.
    If you remove `var`, you will have a valid Python statement.
    

(234) Would-be variable declaration - 2
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\would_be_type_declaration_2.py", line 5
        var start := begin < end
            ^
    SyntaxError: invalid syntax
    
        No es necesario declarar variables en Python.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\would_be_type_declaration_2.py'
    en la ubicación indicada por ^.
    
       2: end = 4
       3: 
       4: if (
    -->5:     var start := begin < end
                  ^
       6:    )

    It looks like you were trying to declare that `start` was
    a variable using the word `var`.
    However, even if you remove `var`, there would still be some
    some syntax errors.
    

(235) Cannot use yield outside function
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\yield_outside_function.py", line 1
        (yield i) == 3
         ^
    SyntaxError: 'yield' outside function
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\yield_outside_function.py'
    en la ubicación indicada por ^.
    
    -->1: (yield
           ^

    Sólo se puede utilizar una sentencia `yield` dentro de una función.
    
