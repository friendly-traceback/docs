
Friendly SyntaxError tracebacks - en español
=============================================

Friendly tiene como objetivo proporcionar comentarios más amigables
cuando se produce una excepción
se plantea que lo que hace Python (sentence translated by Google Translate).

This file contains only examples of SyntaxError and its sub-classes.
Some tests may appear to be repetitive to a human reader
but they are may be included to ensure more complete test coverage.

.. note::

     The content of this page is generated by running
     `trb_syntax_spanish.py` located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.
     On Windows, if Sphinx is installed on your computer, it is suggested
     instead to run make_trb.bat in the root directory as it will create
     similar files for all languages *and* update the documentation.

Friendly-traceback version: 0.5.48
Python version: 3.9.10



(1) Using 'and' in import statement
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\and_in_import_statement.py", line 1
        from math import sin and cos
                             ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\and_in_import_statement.py'
    en la ubicación indicada.
    
       1: from math import sin and cos
                               ^^^

    La palabra clave de Python `and` sólo puede utilizarse para expresiones booleanas.
    Quizás haya querido escribir
    
    `from math import sin , cos`
    

(2) Using 'and' after comma in import statement
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\and_in_import_statement_2.py", line 1
        from math import sin, tan, and cos
                                   ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\and_in_import_statement_2.py'
    en la ubicación indicada.
    
       1: from math import sin, tan, and cos
                                     ^^^

    La palabra clave de Python `and` sólo puede utilizarse para expresiones booleanas.
    Quizás haya querido escribir
    
    `from math import sin, tan,  cos`
    

(3) Annotated name cannot be global
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\annotated_name_global.py", line 4
        var:int = 1
        ^
    SyntaxError: annotated name 'var' can't be global
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\annotated_name_global.py'
    en la ubicación indicada.
    
       4:     var:int = 1
              ^^^

    El objeto llamado `var` se define con la anotación de tipo
    como una variable local. No se puede declarar como una variable global.
    

(4) Incorrect use of 'from module import ... as ...
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\as_instead_of_comma_in_import.py", line 2
        from math import (sin, cos) as funcs
                                    ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\as_instead_of_comma_in_import.py'
    en la ubicación indicada.
    
       2: from math import (sin, cos) as funcs
                                      ^^

    Supongo que estás intentando importar al menos un objeto
    del módulo `math` y renombrarlo usando la palabra clave de Python `as`;
    esta palabra clave sólo puede ser utilizada para renombrar un objeto a la vez
    utilizando una sintaxis bien definida.
    Le sugiero que divida cualquier declaración de importación con cada objeto
    renombrado en una línea separada como sigue:
    
        from math import objeto_1 as nombre_1
        from math import objeto_2 as nombre_2  # si es necesario
    

(5) Assign instead of equal (or walrus).
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_instead_of_equal.py", line 1
        a = (b = 2)  # issue #65
               ^
    SyntaxError: invalid syntax
    
        Tal vez necesitabas `==` o `:=` en lugar de `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_instead_of_equal.py'
    en la ubicación indicada.
    
       1: a = (b = 2)  # issue #65
                 ^

    Has utilizado un operador de asignación `=`; quizás querías utilizar 
    un operador de igualdad, `==`, o el operador de asignación aumentado `:=`.
    

(6) Name assigned prior to global declaration
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_global_1.py", line 7
        global aa, bb, cc, dd
        ^
    SyntaxError: name 'cc' is assigned to before global declaration
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_name_before_global_1.py'
    en la ubicación indicada.
    
       7:     global aa, bb, cc, dd
              ^^^^^^         ^^

    Usted asignó un valor a la variable `cc`.
    antes de declararla como variable global.
    

(7) Name used prior to global declaration
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_global_2.py", line 7
        global var
        ^
    SyntaxError: name 'var' is used prior to global declaration
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_name_before_global_2.py'
    en la ubicación indicada.
    
       7:     global var
              ^^^^^^ ^^^

    Ha utilizado la variable `var`
    antes de declararla como variable global.
    

(8) Name used prior to nonlocal declaration
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_nonlocal_1.py", line 11
        nonlocal pp, qq
        ^
    SyntaxError: name 'qq' is used prior to nonlocal declaration
    
        ¿Olvidó escribir primero `nonlocal`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_name_before_nonlocal_1.py'
    en la ubicación indicada.
    
       11:         nonlocal pp, qq
                   ^^^^^^^^     ^^

    Ha utilizado la variable `qq`
    antes de declararla como variable no local.
    

(9) Name assigned prior to nonlocal declaration
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_name_before_nonlocal_2.py", line 9
        nonlocal s
        ^
    SyntaxError: name 's' is assigned to before nonlocal declaration
    
        ¿Olvidó añadir `nonlocal`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_name_before_nonlocal_2.py'
    en la ubicación indicada.
    
       9:         nonlocal s
                  ^^^^^^^^ ^

    Ha asignado un valor a la variable `s`
    antes de declararla como variable no local.
    

(10) Assign to conditional expression
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_conditional.py", line 3
        a if 1 else b = 1
        ^
    SyntaxError: cannot assign to conditional expression
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_conditional.py'
    en la ubicación indicada.
    
       3: a if 1 else b = 1
          ^^^^^^^^^^^^^

    En el lado izquierdo de un signo igual, tiene una expresión generadora
    en lugar del nombre de una variable.
        a if 1 else b = ...
        ^^^^^^^^^^^^^
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(11) Assignment to keyword (__debug__)
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_debug.py", line 4
        __debug__ = 1
        ^
    SyntaxError: cannot assign to __debug__
    
        No se puede asignar un valor a `__debug__`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_debug.py'
    en la ubicación indicada.
    
       4: __debug__ = 1
          ^^^^^^^^^

    __debug__` es una constante en Python; no puedes asignarle un valor diferente.
    

(12) Assignment to keyword (__debug__)
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_debug2.py", line 4
        a.__debug__ = 1
        ^
    SyntaxError: cannot assign to __debug__
    
        No se puede asignar un valor a `__debug__`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_debug2.py'
    en la ubicación indicada.
    
       4: a.__debug__ = 1
            ^^^^^^^^^

    __debug__` es una constante en Python; no puedes asignarle un valor diferente.
    

(13) Assignment to Ellipsis symbol
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_ellipsis.py", line 4
        ... = 1
        ^
    SyntaxError: cannot assign to Ellipsis
    
        No se puede asignar un valor al símbolo de elipsis [`...`].
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_ellipsis.py'
    en la ubicación indicada.
    
       4: ... = 1
          ^^^

    El símbolo de la elipsis `...` es una constante en Python; no se le puede asignar un valor diferente.
    

(14) Cannot assign to f-string
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_f_string.py", line 6
        f'{x}' = 42
        ^
    SyntaxError: cannot assign to f-string expression
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_f_string.py'
    en la ubicación indicada.
    
       6: f'{x}' = 42
          ^^^^^^

    Has escrito una expresión que tiene la f-string `f'{x}'`` en el lado izquierdo del signo igual
    en el lado izquierdo del signo igual.
    Una f-string sólo debe aparecer en el lado derecho de un signo igual.
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(15) Cannot assign to function call: single = sign
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_function_call_1.py", line 6
        len('a') = 3
        ^
    SyntaxError: cannot assign to function call
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_function_call_1.py'
    en la ubicación indicada.
    
       6: len('a') = 3
          ^^^^^^^^

    Has escrito una expresión como
    
        len('a') = ...
        ^^^^^^^^
    
    donde `len('a')`, a la izquierda del signo igual, es
    o incluye una llamada a una función y no es simplemente el nombre de una variable.
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(16) Cannot assign to function call: two = signs
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_function_call_2.py", line 6
        func(a, b=3) = 4
        ^
    SyntaxError: cannot assign to function call
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_function_call_2.py'
    en la ubicación indicada.
    
       6: func(a, b=3) = 4
          ^^^^^^^^^^^^

    Has escrito una expresión como
    
        func(a, b=3) = ...
        ^^^^^^^^^^^^
    
    donde `func(a, b=3)`, a la izquierda del signo igual, es
    o incluye una llamada a una función y no es simplemente el nombre de una variable.
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(17) Cannot assign to function call: continues on second line
-------------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_function_call_3.py", line 6
        a = f(1, 2,  # this is a comment
            ^
    SyntaxError: cannot assign to function call
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_function_call_3.py'
    en la ubicación indicada.
    
    -->6: a = f(1, 2,  # this is a comment
              ^^^^^^^-->
       7:       3, 4) = 5

    Has escrito una expresión como
    
        f(1, 2,...) = ...
        ^^^^^^^-->
    
    donde `f(1, 2,...)`, a la izquierda del signo igual, es
    o incluye una llamada a una función y no es simplemente el nombre de una variable.
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(18) Assign to generator expression
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_generator.py", line 3
        (x for x in x) = 1
        ^
    SyntaxError: cannot assign to generator expression
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_generator.py'
    en la ubicación indicada.
    
       3: (x for x in x) = 1
          ^^^^^^^^^^^^^^

    En el lado izquierdo de un signo igual, tiene una expresión generadora
    en lugar del nombre de una variable.
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(19) Cannot assign to literal - 4
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_dict.py", line 7
        {1 : 2, 2 : 4} = 5
        ^
    SyntaxError: cannot assign to dict display
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_literal_dict.py'
    en la ubicación indicada.
    
       7: {1 : 2, 2 : 4} = 5
          ^^^^^^^^^^^^^^

    Has escrito una expresión como
    
        {1 : 2, 2 : 4} = 5
    donde `{1 : 2, 2 : 4}`, a la izquierda del signo de igualdad
    es o incluye un objeto real de tipo `dict`
    y no es simplemente el nombre de una variable.
    
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(20) Cannot assign to literal int
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_int.py", line 3
        1 = a
        ^
    SyntaxError: cannot assign to literal
    
        Tal vez querías escribir `a = 1`
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_literal_int.py'
    en la ubicación indicada.
    
       3: 1 = a
          ^

    Has escrito una expresión como
    
        1 = a
    donde `1`, a la izquierda del signo de igualdad
    es o incluye un objeto real de tipo `int`
    y no es simplemente el nombre de una variable.
    Tal vez querías escribir:
    
        a = 1
    
    

(21) Cannot assign to literal int - 2
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_int_2.py", line 3
        1 = 2
        ^
    SyntaxError: cannot assign to literal
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_literal_int_2.py'
    en la ubicación indicada.
    
       3: 1 = 2
          ^

    Has escrito una expresión como
    
        1 = 2
    donde `1`, a la izquierda del signo de igualdad
    es o incluye un objeto real de tipo `int`
    y no es simplemente el nombre de una variable.
    
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(22) Cannot assign to literal - 5
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_int_3.py", line 4
        1 = a = b
        ^
    SyntaxError: cannot assign to literal
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_literal_int_3.py'
    en la ubicación indicada.
    
       4: 1 = a = b
          ^

    Has escrito una expresión como
    
        1 = nombre_de_variable
    donde `1`, a la izquierda del signo de igualdad
    es o incluye un objeto real de tipo `int`
    y no es simplemente el nombre de una variable.
    
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(23) Cannot assign to literal - 3
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_literal_set.py", line 7
        {1, 2, 3} = 4
        ^
    SyntaxError: cannot assign to set display
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_literal_set.py'
    en la ubicación indicada.
    
       7: {1, 2, 3} = 4
          ^^^^^^^^^

    Has escrito una expresión como
    
        {1, 2, 3} = 4
    donde `{1, 2, 3}`, a la izquierda del signo de igualdad
    es o incluye un objeto real de tipo `set`
    y no es simplemente el nombre de una variable.
    
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(24) Assign to keyword def
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_keyword_def.py", line 3
        def = 2
            ^
    SyntaxError: invalid syntax
    
        Las palabras clave de Python no pueden utilizarse como identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_keyword_def.py'
    en la ubicación indicada.
    
       3: def = 2
          ^^^

    Has intentado asignar un valor a la palabra clave de Python `def`.
    Esto no está permitido.
    
    

(25) Assign to keyword else
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_keyword_else.py", line 3
        else = 1
        ^
    SyntaxError: invalid syntax
    
        Las palabras clave de Python no pueden utilizarse como identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_keyword_else.py'
    en la ubicación indicada.
    
       3: else = 1
          ^^^^

    Has intentado asignar un valor a la palabra clave de Python `else`.
    Esto no está permitido.
    
    

(26) Assignment to keyword (None)
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_keyword_none.py", line 4
        None = 1
        ^
    SyntaxError: cannot assign to None
    
        No se puede asignar un valor a `None`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_keyword_none.py'
    en la ubicación indicada.
    
       4: None = 1
          ^^^^

    None` es una constante en Python; no puedes asignarle un valor diferente.
    

(27) Assign to math operation
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_operation.py", line 4
        a + 1 = 2
        ^
    SyntaxError: cannot assign to operator
    
        Tal vez necesitabas `==` en lugar de `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_operation.py'
    en la ubicación indicada.
    
       4: a + 1 = 2
          ^

    Has escrito una expresión que incluye algunas operaciones matemáticas
    en el lado izquierdo del signo igual que debería ser
    sólo utilizarse para asignar un valor a una variable.
    

(28) Assign to yield expression
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assign_to_yield_expression.py", line 1
        (yield i) = 3
         ^
    SyntaxError: cannot assign to yield expression
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assign_to_yield_expression.py'
    en la ubicación indicada.
    
       1: (yield i) = 3
           ^^^^^

    Ha escrito una expresión que incluye la palabra clave `yield
    a la izquierda del signo igual.
    No se puede asignar un valor a una expresión de este tipo.
    Tenga en cuenta que, al igual que la palabra clave `return`,
    `yield` sólo puede usarse dentro de una función.
    

(29) Augmented assignment inside comprehension
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assignment_expression_cannot_rebind.py", line 1
        a = [(i := 1) for i in [1]]
             ^
    SyntaxError: assignment expression cannot rebind comprehension iteration variable 'i'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assignment_expression_cannot_rebind.py'
    en la ubicación indicada.
    
       1: a = [(i := 1) for i in [1]]
               ^

    Está utilizando el operador de asignación aumentada `:=` dentro de
    una comprensión para asignar un valor a la variable de iteración `i`.
    Esta variable está pensada para ser empleada sólo dentro de la comprensión.
    El operador de asignación aumentada se usa normalmente para asignar un valor
    a una variable para poder reutilizarla posteriormente.
    Esto no es posible para la variable `i`.
    

(30) Augmented assignment inside comprehension - inner loop
-----------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\assignment_expression_cannot_rebind_2.py", line 1
        [i for i in range(5) if (j := 0) for k[j + 1] in range(5)]
        ^
    SyntaxError: comprehension inner loop cannot rebind assignment expression target 'j'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\assignment_expression_cannot_rebind_2.py'
    en la ubicación indicada.
    
       1: [i for i in range(5) if (j := 0) for k[j + 1] in range(5)]
          ^

    Está utilizando el operador de asignación aumentada `:=` dentro de
    una comprensión para asignar un valor a la variable de iteración `j`.
    Esta variable está pensada para ser empleada sólo dentro de la comprensión.
    El operador de asignación aumentada se usa normalmente para asignar un valor
    a una variable para poder reutilizarla posteriormente.
    Esto no es posible para la variable `j`.
    

(31) def: missing parentheses
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\async_def_missing_parens.py", line 1
        async def name:
                      ^
    SyntaxError: invalid syntax
    
        ¿Has olvidado los paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\async_def_missing_parens.py'
    en la ubicación indicada.
    
       1: async def name:
                        ^

    Tal vez haya olvidado incluir los paréntesis.
    Puede que hayas querido escribir
    
        async def name():
    

(32) Augmented assignment to literal
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\augmented_assignment_to_literal.py", line 1
        if "word" := True:
           ^
    SyntaxError: cannot use assignment expressions with literal
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\augmented_assignment_to_literal.py'
    en la ubicación indicada.
    
       1: if "word" := True:
             ^^^^^^

    No se puede utilizar el operador de asignación aumentada `:=`,
    a veces llamado operador morsa, con literales como `"word"`.
    Sólo se pueden asignar objetos a identificadores (nombres de variables).
    

(33) Walrus/Named assignment depending on Python version
--------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\augmented_assigment_with_true.py", line 4
        (True := 1)
         ^
    SyntaxError: cannot use assignment expressions with True
    
        No se puede asignar un valor a `True`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\augmented_assigment_with_true.py'
    en la ubicación indicada.
    
       4: (True := 1)
           ^^^^

    True` es una constante en Python; no puedes asignarle un valor diferente.
    

(34) Backslash instead of slash
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\backslash_instead_of_slash.py", line 1
        a = 3 \ 4.0
               ^
    SyntaxError: unexpected character after line continuation character
    
        ¿Querías dividir por 4.0?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\backslash_instead_of_slash.py'
    en la ubicación indicada.
    
       1: a = 3 \ 4.0
                  ^^^

    Está utilizando el carácter de continuación `\` fuera de una cadena
    y es seguido por algún otro carácter(es).
    Supongo que querías dividir por el número 4.0 
    y escribió \ en lugar de /.

(35) Brackets instead of parentheses
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\bracket_instead_of_paren.py", line 1
        print(sum[i for i in [1, 2, 3] if i%2==0])
                    ^
    SyntaxError: invalid syntax
    
        Has utilizado corchetes, `[...]` en lugar de paréntesis.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\bracket_instead_of_paren.py'
    en la ubicación indicada.
    
       1: print(sum[i for i in [1, 2, 3] if i%2==0])
                      ^^^

    Has utilizado corchetes, `[...]` en lugar de paréntesis.
    Escriba lo siguiente en su lugar:
    
        print(sum(i for i in [1, 2, 3] if i%2==0))

(36) break outside loop
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\break_outside_loop.py", line 4
        break
        ^
    SyntaxError: 'break' outside loop
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\break_outside_loop.py'
    en la ubicación indicada.
    
       4:     break
              ^^^^^

    La palabra clave de Python `break` sólo puede utilizarse dentro de un bucle `for` o dentro de un bucle `while`.
    

(37) Cannot assign to attribute here.
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_assign_to_attribute_here.py", line 1
        if x.a = 1:
               ^
    SyntaxError: invalid syntax
    
        Tal vez necesitabas `==` en lugar de `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\cannot_assign_to_attribute_here.py'
    en la ubicación indicada.
    
       1: if x.a = 1:
                 ^

    Es probable que hayas utilizado un operador de asignación `=` en lugar de un operador de igualdad `==`.
    La siguiente sentencia no contendría un error de sintaxis:
    
        if x.a == 1:

(38) Cannot guess the cause
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_guess_the_cause.py", line 1
        SyntaxErrors can be annoying!
                     ^
    SyntaxError: invalid syntax
    
        Friendly-traceback no conoce la causa de este error.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\cannot_guess_the_cause.py'
    en la ubicación indicada.
    
       1: SyntaxErrors can be annoying!
                       ^^^

    Actualmente, no puedo detectar la causa probable de este error.
    Intente examinar detenidamente la línea indicada, así como la línea
    inmediatamente superior para ver si puede identificar alguna palabra mal escrita
    o símbolos que falten, como (, ), [, ], :, etc.
    
    A menos que su código utilice anotaciones de tipo, que están fuera de nuestro alcance,
    si cree que esto es algo que debería ser manejado
    por friendly, por favor reporte este caso a
    https://github.com/aroberge/friendly/issues
    
    

(39) Cannot use star operator
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_use_star.py", line 3
        *a
        ^
    SyntaxError: can't use starred expression here
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\cannot_use_star.py'
    en la ubicación indicada.
    
       3: *a
          ^

    El operador estrella `*` se interpreta como que
    el desempaquetado de un iterable debe ser usado para asignar un nombre
    a cada elemento de un iterable, lo que no tiene sentido aquí.
    

(40) Cannot use double star operator
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\cannot_use_double_star.py", line 4
        (**k)
         ^
    SyntaxError: f-string: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\cannot_use_double_star.py'
    en la ubicación indicada.
    
       1: (**k)
           ^^

    El operador de doble estrella `**` probablemente se interpreta como que
    que se va a utilizar el desempaquetado del dictado, lo cual no está permitido o no tiene sentido en este caso.
    

(41) Missing class name
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\class_missing_name.py", line 1
        class:
             ^
    SyntaxError: invalid syntax
    
        Una clase necesita un nombre.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\class_missing_name.py'
    en la ubicación indicada.
    
       1: class:
               ^

    Una declaración `class` requiere un nombre:
    
        class AlgunNombre:
            ...
    
    

(42) Missing () for tuples in comprehension
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\comprehension_missing_tuple_paren.py", line 1
        x = [i, i**2 for i in range(10)]
                     ^
    SyntaxError: invalid syntax
    
        ¿Has olvidado los paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\comprehension_missing_tuple_paren.py'
    en la ubicación indicada.
    
       1: x = [i, i**2 for i in range(10)]
                       ^^^

    Supongo que estabas escribiendo una expresión de comprensión o un generador
    y olvidaste incluir paréntesis alrededor de las tuplas.
    Como ejemplo, en lugar de escribir
    
        [i, i**2 for i in range(10)]
    
    tendrías que escribir
    
        [(i, i**2) for i in range(10)]
    
    

(43) Comprehension with condition (no else)
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\comprehension_with_condition_no_else.py", line 1
        a = [f(x) if condition for x in sequence]
                               ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\comprehension_with_condition_no_else.py'
    en la ubicación indicada.
    
       1: a = [f(x) if condition for x in sequence]
                                 ^^^

    Supongo que estabas escribiendo una comprensión o una expresión generadora
    y utilizas el orden incorrecto para una condición.
    El orden correcto depende de si hay una cláusula `else` o no.
    Por ejemplo, el orden correcto para una comprensión de lista con
    condición puede ser
    
        [f(x) if condición else otro for x in secuencia]  # 'if' antes de 'for'
    
    o, si no hay ningún `else`
    
        [f(x) for x in secuencia if condición]  # 'if' despues de 'for'
    
    

(44) Comprehension with condition (with else)
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\comprehension_with_condition_with_else.py", line 1
        a = [f(x) for x in sequence if condition else other]
                                                 ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\comprehension_with_condition_with_else.py'
    en la ubicación indicada.
    
       1: a = [f(x) for x in sequence if condition else other]
                                                   ^^^^

    Supongo que estabas escribiendo una comprensión o una expresión generadora
    y utilizas el orden incorrecto para una condición.
    El orden correcto depende de si hay una cláusula `else` o no.
    Por ejemplo, el orden correcto para una comprensión de lista con
    condición puede ser
    
        [f(x) if condición else otro for x in secuencia]  # 'if' antes de 'for'
    
    o, si no hay ningún `else`
    
        [f(x) for x in secuencia if condición]  # 'if' despues de 'for'
    
    

(45) continue outside loop
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\continue_outside_loop.py", line 4
        continue
        ^
    SyntaxError: 'continue' not properly in loop
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\continue_outside_loop.py'
    en la ubicación indicada.
    
       4:     continue
              ^^^^^^^^

    La palabra clave de Python `continue` sólo puede usarse dentro de un bucle `for` o dentro de un bucle `while`.
    

(46) Copy/paste from interpreter
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\copy_pasted_code.py", line 2
        >>> print("Hello World!")
        ^
    SyntaxError: invalid syntax
    
        ¿Usaste copiar y pegar?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\copy_pasted_code.py'
    en la ubicación indicada.
    
       2: >>> print("Hello World!")
          ^^^

    Parece que has copiado y pegado código de un intérprete interactivo.
    El prompt de Python, `>>>`, no debería estar incluido en tu código.
    

(47) Copy/paste from interpreter - 2
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\copy_pasted_code_2.py", line 2
        ... print("Hello World!")
            ^
    SyntaxError: invalid syntax
    
        ¿Usaste copiar y pegar?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\copy_pasted_code_2.py'
    en la ubicación indicada.
    
       2: ... print("Hello World!")
          ^^^

    Parece que has copiado y pegado código de un intérprete interactivo.
    El prompt de Python, `...`, no debería estar incluido en tu código.
    

(48) def: positional arg after kwargs
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_arg_after_kwarg.py", line 1
        def test(a, **kwargs, b):
                              ^
    SyntaxError: invalid syntax
    
        Los argumentos posicionales deben ir antes de los argumentos de palabra clave.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_arg_after_kwarg.py'
    en la ubicación indicada.
    
       1: def test(a, **kwargs, b):
                                ^

    Los argumentos posicionales deben ir antes de los argumentos de palabra clave.
    `b` es un argumento posicional que aparece después de uno o más
    argumentos de la palabra clave en la definición de la función.
    

(49) def: named arguments must follow bare *
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_bare_star_arg.py", line 4
        def f(*):
               ^
    SyntaxError: named arguments must follow bare *
    
        ¿Olvidaste algo después de `*`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_bare_star_arg.py'
    en la ubicación indicada.
    
       4: def f(*):
                 ^

    Asumiendo que estabas definiendo una función, necesitas
    sustituir `*` por `*argumentos` o
    por `*, argumento_nombrado=valor`.
    

(50) def: misused as code block
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_code_block.py", line 3
        def :
            ^
    SyntaxError: invalid syntax
    
        Una función necesita un nombre.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_code_block.py'
    en la ubicación indicada.
    
       3: def :
              ^

    Has intentado definir una función y no has utilizado la sintaxis correcta.
    La sintaxis correcta es:
    
        def name ( ... ):
    

(51) def: misused as code block - 2
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_code_block_2.py", line 2
        def :
            ^
    SyntaxError: invalid syntax
    
        Las funciones y los métodos necesitan un nombre.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_code_block_2.py'
    en la ubicación indicada.
    
       2:     def :
                  ^

    Has intentado definir una función o un método y no has utilizado la sintaxis correcta.
    La sintaxis correcta es:
    
        def name ( ... ):
    

(52) Dotted name as function argument
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dotted_argument.py", line 3
        def test(x.y):
                  ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_dotted_argument.py'
    en la ubicación indicada.
    
       3: def test(x.y):
                    ^

    No se pueden utilizar nombres con puntos como argumentos de funciones.
    Tal vez querías escribir una coma.
    

(53) Dotted name as function argument
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dotted_argument_2.py", line 2
        def test(x., y):
                  ^
    SyntaxError: invalid syntax
    
        No se pueden utilizar nombres con puntos como argumentos de funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_dotted_argument_2.py'
    en la ubicación indicada.
    
       2: def test(x., y):
                    ^

    No se pueden utilizar nombres con puntos como argumentos de funciones.
    

(54) Dotted function name
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dotted_function_name.py", line 3
        def test.x():
                ^
    SyntaxError: invalid syntax
    
        No se pueden utilizar puntos en los nombres de las funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_dotted_function_name.py'
    en la ubicación indicada.
    
       3: def test.x():
                  ^

    No se pueden utilizar puntos en los nombres de las funciones.
    

(55) def: dict as argument
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_dict_as_arg.py", line 1
        def test({'a': 1}, y):  # dict as first argument
                 ^
    SyntaxError: invalid syntax
    
        No puede tener ningún dict o set explícito como argumentos de la función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_dict_as_arg.py'
    en la ubicación indicada.
    
       1: def test({'a': 1}, y):  # dict as first argument
                   ^

    No puede tener ningún dict o set explícito como argumentos de la función.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(56) def: arguments must be unique in function definition
---------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_duplicate_arg.py", line 4
        def f(aa=1, aa=2):
        ^
    SyntaxError: duplicate argument 'aa' in function definition
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_duplicate_arg.py'
    en la ubicación indicada.
    
       4: def f(aa=1, aa=2):
                ^^    ^^

    Ha definido una función que repite el argumento
    
        aa
    Cada argumento debe aparecer sólo una vez en la definición de una función.
    

(57) def: semicolon after colon
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_extra_semi_colon.py", line 1
        def test():;
                   ^
    SyntaxError: invalid syntax
    
        ¿Escribiste algo por error después de los dos puntos?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_extra_semi_colon.py'
    en la ubicación indicada.
    
       1: def test():;
                     ^

    Una declaración de definición de función debe terminar con dos puntos.
    Un bloque de código debe ir después de los dos puntos.
    Eliminar `;`, podría solucionar el problema.
    

(58) def: extra comma
---------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_extra_comma.py", line 1
        def test(a,,b):
                   ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir `,`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_extra_comma.py'
    en la ubicación indicada.
    
       1: def test(a,,b):
                     ^

    Sospecho que has cometido un error tipográfico y has añadido `,` por error.
    La siguiente declaración no contiene ningún error de sintaxis:
    
        def test(a,b):

(59) def: unspecified keywords before /
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_1.py", line 1
        def test(a, **kwargs, /):
                              ^
    SyntaxError: invalid syntax
    
        Los argumentos de las palabras clave deben aparecer después del símbolo `/`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_forward_slash_1.py'
    en la ubicación indicada.
    
       1: def test(a, **kwargs, /):
                                ^

    `/` indica que los argumentos anteriores en una definición de función
    son argumentos posicionales.
    Tiene argumentos de palabras clave no especificadas que aparecen antes de
    el símbolo `/`.
    

(60) def: / before star
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_2.py", line 1
        def test(a, *, b, /):
                          ^
    SyntaxError: invalid syntax
    
        El símbolo `*` debe aparecer después de `/` en la definición de una función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_forward_slash_2.py'
    en la ubicación indicada.
    
       1: def test(a, *, b, /):
                            ^

    `/` indica que los argumentos anteriores en una definición de función
    son argumentos posicionales.
    Sin embargo, `*` indica que los argumentos
    que siguen deben ser argumentos de palabra clave.
    Cuando se utilizan juntos, `/` debe aparecer antes de `*`.
    

(61) def: / before star arg
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_3.py", line 1
        def test(a, *arg, /):
                          ^
    SyntaxError: invalid syntax
    
        La palabra `*arg` debe aparecer después de `/` en la definición de una función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_forward_slash_3.py'
    en la ubicación indicada.
    
       1: def test(a, *arg, /):
                            ^

    `/` indica que los argumentos anteriores en una definición de función
    son argumentos posicionales.
    La palabra `*arg` debe aparecer después de `/` en la definición de una función.
    

(62) def: / used twice
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_forward_slash_4.py", line 1
        def test(a, /, b, /):
                          ^
    SyntaxError: invalid syntax
    
        Sólo se puede utilizar `/` una vez en la definición de una función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_forward_slash_4.py'
    en la ubicación indicada.
    
       1: def test(a, /, b, /):
                            ^

    Sólo se puede utilizar `/` una vez en la definición de una función.
    

(63) def: non-identifier as a function name
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_function_name_invalid.py", line 3
        def 2be():
            ^
    SyntaxError: invalid syntax
    
        Has escrito un nombre de función no válido.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_function_name_invalid.py'
    en la ubicación indicada.
    
       3: def 2be():
              ^

    El nombre de una función debe ser un identificador válido de Python,
    es decir, un nombre que comience con una letra o un carácter de subrayado, `_`,
    y que contenga sólo letras, dígitos o el carácter de subrayado.
    

(64) def: using a string as a function name
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_function_name_string.py", line 3
        def "function"():
            ^
    SyntaxError: invalid syntax
    
        El nombre de una función debe ser un identificador válido de Python,
        es decir, un nombre que comience con una letra o un carácter de subrayado, `_`,
        y que contenga sólo letras, dígitos o el carácter de subrayado.
        Has intentado utilizar una cadena como nombre de función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_function_name_string.py'
    en la ubicación indicada.
    
       3: def "function"():
              ^^^^^^^^^^

    El nombre de una función debe ser un identificador válido de Python,
    es decir, un nombre que comience con una letra o un carácter de subrayado, `_`,
    y que contenga sólo letras, dígitos o el carácter de subrayado.
    Has intentado utilizar una cadena como nombre de función.
    

(65) def: keyword cannot be argument in def - 1
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_1.py", line 5
        def f(None=1):
              ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_keyword_as_arg_1.py'
    en la ubicación indicada.
    
       5: def f(None=1):
                ^^^^

    Supongo que has intentado utilizar la palabra clave de Python
    `None` como argumento en la definición de una función
    donde se esperaba un identificador (nombre de variable).
    

(66) def: keyword cannot be argument in def - 2
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_2.py", line 5
        def f(x, True):
                 ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_keyword_as_arg_2.py'
    en la ubicación indicada.
    
       5: def f(x, True):
                   ^^^^

    Supongo que has intentado utilizar la palabra clave de Python
    `True` como argumento en la definición de una función
    donde se esperaba un identificador (nombre de variable).
    

(67) def: keyword cannot be argument in def - 3
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_3.py", line 5
        def f(*None):
               ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_keyword_as_arg_3.py'
    en la ubicación indicada.
    
       5: def f(*None):
                 ^^^^

    Supongo que has intentado utilizar la palabra clave de Python
    `None` como argumento en la definición de una función
    donde se esperaba un identificador (nombre de variable).
    

(68) def: keyword cannot be argument in def - 4
-----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_arg_4.py", line 5
        def f(**None):
                ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_keyword_as_arg_4.py'
    en la ubicación indicada.
    
       5: def f(**None):
                  ^^^^

    Supongo que has intentado utilizar la palabra clave de Python
    `None` como argumento en la definición de una función
    donde se esperaba un identificador (nombre de variable).
    

(69) def: Python keyword as function name
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_keyword_as_name.py", line 3
        def pass():
            ^
    SyntaxError: invalid syntax
    
        No se puede utilizar una palabra clave de Python como nombre de función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_keyword_as_name.py'
    en la ubicación indicada.
    
       3: def pass():
              ^^^^

    Has intentado utilizar la palabra clave de Python `pass` como nombre de función.
    
    Hay errores de sintaxis adicionales más adelante en su código.
    

(70) def: list as argument - 1
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_list_as_arg_1.py", line 1
        def test([x], y):  # list as first argument
                 ^
    SyntaxError: invalid syntax
    
        No se pueden tener listas explícitas como argumentos de funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_list_as_arg_1.py'
    en la ubicación indicada.
    
       1: def test([x], y):  # list as first argument
                   ^

    No se pueden tener listas explícitas como argumentos de funciones.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(71) def: list as argument - 2
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_list_as_arg_2.py", line 1
        def test(x, [y]):  # list as second argument, after comma
                    ^
    SyntaxError: invalid syntax
    
        No se pueden tener listas explícitas como argumentos de funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_list_as_arg_2.py'
    en la ubicación indicada.
    
       1: def test(x, [y]):  # list as second argument, after comma
                      ^

    No se pueden tener listas explícitas como argumentos de funciones.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(72) def: missing colon
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_colon.py", line 1
        def test()
                  ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste escribir dos puntos?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_missing_colon.py'
    en la ubicación indicada.
    
       1: def test()
                    ^

    Una declaración de definición de función debe terminar con dos puntos.
    

(73) def: missing comma between function args
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_comma.py", line 4
        def a(b, c d):
                   ^
    SyntaxError: invalid syntax
    
        ¿Te has olvidado de una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_missing_comma.py'
    en la ubicación indicada.
    
       4: def a(b, c d):
                   ^^^

    Python indica que el error es causado por `d` escrito inmediatamente después de `c`.
    It is possible that you forgot a comma between items in a tuple, 
    or between function arguments, 
    at the position indicated by ^.
    Tal vez quiso decir
    
        def a(b, c, d):
                  ^
    
    .

(74) def: missing parentheses
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_parens.py", line 3
        def name:
                ^
    SyntaxError: invalid syntax
    
        ¿Has olvidado los paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_missing_parens.py'
    en la ubicación indicada.
    
       3: def name:
                  ^

    Tal vez haya olvidado incluir los paréntesis.
    Puede que hayas querido escribir
    
        def name():
    

(75) def: missing parentheses around arguments
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_parens_2.py", line 2
        def name a, b:
                 ^
    SyntaxError: invalid syntax
    
        ¿Has olvidado los paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_missing_parens_2.py'
    en la ubicación indicada.
    
       2: def name a, b:
                   ^

    Tal vez haya olvidado incluir los paréntesis.
    Puede que hayas querido escribir
    
        def name (a, b):
    

(76) def: missing function name
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_missing_name.py", line 3
        def ( arg )  :
            ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_missing_name.py'
    en la ubicación indicada.
    
       3: def ( arg )  :
              ^

    Has olvidado nombrar tu función.
    La sintaxis correcta es:
    
        def name ( ... ):
    

(77) def: name is parameter and global
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_name_is_parameter_and_global.py", line 6
        global x
        ^
    SyntaxError: name 'x' is parameter and global
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_name_is_parameter_and_global.py'
    en la ubicación indicada.
    
       6:     global x
              ^^^^^^

    Usted está incluyendo la declaración
    
            global x
    
    
    indicando que `x` es una variable definida fuera de una función.
    También está utilizando el mismo `x` como argumento para esa
    función, indicando así que debe ser una variable conocida sólo
    dentro de esa función, que es lo contrario de lo que implica `global`.
    

(78) def: non-default argument follows default argument
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_non_default_after_default.py", line 5
        def test(a=1, b):
                       ^
    SyntaxError: non-default argument follows default argument
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_non_default_after_default.py'
    en la ubicación indicada.
    
       5: def test(a=1, b):
                         ^

    En Python, puedes definir funciones con sólo argumentos posicionales
    
        def prueba(a, b, c): ...
    
    o sólo con argumentos de palabra clave
    
        def prueba(a=1, b=2, c=3): ...
    
    o una combinación de ambos
    
        def prueba(a, b, c=3): ...
    
    pero con los argumentos de palabra clave apareciendo después de todos los posicionales.
    Según Python, has utilizado argumentos posicionales después de los de palabra clave.
    

(79) Single number used as arg in function def
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_number_as_arg.py", line 1
        def f(1):
              ^
    SyntaxError: invalid syntax
    
        No se pueden utilizar números como argumentos de funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_number_as_arg.py'
    en la ubicación indicada.
    
       1: def f(1):
                ^

    Ha utilizado un número como argumento al definir una función.
    Sólo puede utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(80) Operator after ``**``
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_after_2star.py", line 1
        def test(**):
                   ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_operator_after_2star.py'
    en la ubicación indicada.
    
       1: def test(**):
                     ^

    El operador `**` debe ir seguido de un identificador (nombre de la variable).
    

(81) def: operator instead of comma
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_instead_of_comma.py", line 1
        def test(a + b):
                   ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_operator_instead_of_comma.py'
    en la ubicación indicada.
    
       1: def test(a + b):
                     ^

    No se pueden tener operadores como argumentos de la función.
    Sospecho que has cometido un error tipográfico y has escrito `+` en lugar de una coma.
    La siguiente declaración no contiene ningún error de sintaxis:
    
        def test(a , b):

(82) def: operator instead of equal
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_instead_of_equal.py", line 1
        def test(a, b=3, c+None):
                          ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir un signo de igualdad?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_operator_instead_of_equal.py'
    en la ubicación indicada.
    
       1: def test(a, b=3, c+None):
                            ^

    No se pueden tener operadores como argumentos de la función.
    Sospecho que has cometido un error tipográfico y has escrito `+` en lugar de un signo de igualdad.
    La siguiente declaración no contiene ningún error de sintaxis:
    
        def test(a, b=3, c=None):

(83) def: operator instead of name
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_operator_instead_of_name.py", line 1
        def test(a, +, b):
                    ^
    SyntaxError: invalid syntax
    
        No se puede utilizar `+` como argumento.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_operator_instead_of_name.py'
    en la ubicación indicada.
    
       1: def test(a, +, b):
                      ^

    Sospecho que has cometido una errata y has escrito `+` por error.
    Si lo sustituye por un nombre de variable único, el resultado
    no contendrá ningún error de sintaxis.
    

(84) def: positional argument follows keyword argument
------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_positional_after_keyword_arg.py", line 5
        test(a=1, b)
                   ^
    SyntaxError: positional argument follows keyword argument
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_positional_after_keyword_arg.py'
    en la ubicación indicada.
    
       5: test(a=1, b)
                     ^

    En Python, pueden llamar a las funciones solo con argumentos posicionales
    
        prueba(1, 2, 3)
    
    o sólo con argumentos de palabra clave
    
        prueba(a=1, b=2, c=3)
    
    o una combinación de ambos
    
        prueba(1, 2, c=3)
    
    pero con los argumentos de palabra clave que aparecen después de los posicionales.
    Según Python, has utilizado argumentos posicionales después de los de palabra clave.
    

(85) def: semicolon instead of colon
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_semi_colon_instead_of_colon.py", line 1
        def test();
                  ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste escribir dos puntos?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_semi_colon_instead_of_colon.py'
    en la ubicación indicada.
    
       1: def test();
                    ^

    Una declaración de definición de función debe terminar con dos puntos.
    Has escrito `;` en lugar de dos puntos.
    

(86) def: set as argument
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_set_as_arg.py", line 1
        def test(y, {'a', 'b'}):  # set as second argument, after comma
                    ^
    SyntaxError: invalid syntax
    
        No puede tener ningún dict o set explícito como argumentos de la función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_set_as_arg.py'
    en la ubicación indicada.
    
       1: def test(y, {'a', 'b'}):  # set as second argument, after comma
                      ^

    No puede tener ningún dict o set explícito como argumentos de la función.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(87) def: ``*arg`` before /
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_arg_before_slash.py", line 1
        def test(a, *arg, /):
                          ^
    SyntaxError: invalid syntax
    
        La palabra `*arg` debe aparecer después de `/` en la definición de una función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_arg_before_slash.py'
    en la ubicación indicada.
    
       1: def test(a, *arg, /):
                            ^

    `/` indica que los argumentos anteriores en una definición de función
    son argumentos posicionales.
    La palabra `*arg` debe aparecer después de `/` en la definición de una función.
    

(88) def: ``*`` used twice
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_used_only_once.py", line 1
        def test(a, *arg, *, b=1):
                          ^
    SyntaxError: invalid syntax
    
        Sólo se puede utilizar `*` una vez en la definición de una función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_used_only_once.py'
    en la ubicación indicada.
    
       1: def test(a, *arg, *, b=1):
                            ^

    Sólo se puede utilizar `*` una vez en la definición de una función.
    Debe usarse solo, `*`,
    o en la forma `*arg`, pero no ambas.
    

(89) def: ``*`` used twice
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_used_only_once_1.py", line 1
        def test(a, *, *):
                       ^
    SyntaxError: invalid syntax
    
        Sólo se puede utilizar `*` una vez en la definición de una función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_used_only_once_1.py'
    en la ubicación indicada.
    
       1: def test(a, *, *):
                         ^

    Sólo se puede utilizar `*` una vez en la definición de una función.
    

(90) def: ``*`` used twice
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_used_only_once_2.py", line 1
        def test(a, *arg, *other):
                          ^
    SyntaxError: invalid syntax
    
        Sólo se puede utilizar `*` una vez en la definición de una función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_used_only_once_2.py'
    en la ubicación indicada.
    
       1: def test(a, *arg, *other):
                            ^

    Sólo se puede utilizar `*` una vez en la definición de una función.
    Lo has utilizado dos veces, con `*arg` y `*other`.
    

(91) def: ``*`` after ``**``
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_after_2star.py", line 1
        def test(**kw, *arg):
                       ^
    SyntaxError: invalid syntax
    
        Sólo se puede utilizar `*` una vez en la definición de una función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_after_2star.py'
    en la ubicación indicada.
    
       1: def test(**kw, *arg):
                         ^

    `*arg` debe aparecer antes de `**kw`.
    

(92) def: ``*`` after ``**``
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_star_after_2star_2.py", line 1
        def test(**kw, *):
                       ^
    SyntaxError: invalid syntax
    
        Sólo se puede utilizar `*` una vez en la definición de una función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_star_after_2star_2.py'
    en la ubicación indicada.
    
       1: def test(**kw, *):
                         ^

    `**kw` debe aparecer después del operador `*`.
    

(93) Single string used as arg in function def
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_string_as_arg.py", line 1
        def f("1"):
              ^
    SyntaxError: invalid syntax
    
        No se pueden utilizar cadenas como argumentos de funciones.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_string_as_arg.py'
    en la ubicación indicada.
    
       1: def f("1"):
                ^^^

    Ha utilizado una cadena como argumento al definir una función.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    

(94) def: tuple as function argument
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_tuple_as_arg_1.py", line 1
        def test((a, b), c):
                 ^
    SyntaxError: invalid syntax
    
        No se pueden tener tuplas explícitas como argumentos de la función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_tuple_as_arg_1.py'
    en la ubicación indicada.
    
       1: def test((a, b), c):
                   ^

    No se pueden tener tuplas explícitas como argumentos de la función.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    Asignar cualquier tupla a un parámetro y desempaquetarla
    dentro del cuerpo de la función.
    

(95) def: tuple as function argument - 2
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\def_tuple_as_arg_2.py", line 1
        def test(a, (b, c)):
                    ^
    SyntaxError: invalid syntax
    
        No se pueden tener tuplas explícitas como argumentos de la función.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\def_tuple_as_arg_2.py'
    en la ubicación indicada.
    
       1: def test(a, (b, c)):
                      ^

    No se pueden tener tuplas explícitas como argumentos de la función.
    Sólo se pueden utilizar identificadores (nombres de variables) como argumentos de funciones.
    Asignar cualquier tupla a un parámetro y desempaquetarla
    dentro del cuerpo de la función.
    

(96) Deleting star expression - 1
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\del_paren_star_1.py", line 1
        del (*x)
             ^
    SyntaxError: can't use starred expression here
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\del_paren_star_1.py'
    en la ubicación indicada.
    
       1: del (*x)
               ^

    El operador estrella `*` se interpreta como que
    el desempaquetado de un iterable debe ser usado para asignar un nombre
    a cada elemento de un iterable, lo que no tiene sentido aquí.
    Sólo se pueden borrar nombres de objetos, o elementos en contenedores mutables
    como `list`, `set` o `dict`.
    

(97) Deleting star expression - 2
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\del_paren_star_2.py", line 1
        del (*x,)
             ^
    SyntaxError: cannot delete starred
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\del_paren_star_2.py'
    en la ubicación indicada.
    
       1: del (*x,)
               ^

    El operador estrella `*` se interpreta como que
    el desempaquetado de un iterable debe ser usado para asignar un nombre
    a cada elemento de un iterable, lo que no tiene sentido aquí.
    Sólo se pueden borrar nombres de objetos, o elementos en contenedores mutables
    como `list`, `set` o `dict`.
    

(98) Cannot delete a constant
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_constant_keyword.py", line 1
        del True
            ^
    SyntaxError: cannot delete True
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_constant_keyword.py'
    en la ubicación indicada.
    
       1: del True
              ^^^^

    No se puede eliminar la constante `True`.
    Sólo se pueden borrar nombres de objetos, o elementos en contenedores mutables
    como `list`, `set` o `dict`.
    

(99) Cannot delete expression
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_expression.py", line 1
        del a.b.c[0] + 2
            ^
    SyntaxError: cannot delete operator
    
        Sólo se pueden borrar nombres de objetos, o elementos en contenedores mutables
        como `list`, `set` o `dict`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_expression.py'
    en la ubicación indicada.
    
       1: del a.b.c[0] + 2
              ^

    No se puede eliminar la expresión `a.b.c[0] + 2`.
    Sólo se pueden borrar nombres de objetos, o elementos en contenedores mutables
    como `list`, `set` o `dict`.
    

(100) Cannot delete function call
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_function_call.py", line 5
        del f(a)
            ^
    SyntaxError: cannot delete function call
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_function_call.py'
    en la ubicación indicada.
    
       5: del f(a)
              ^

    Has intentado borrar una llamada a una función
    
        del f(a)
    en lugar de borrar el nombre de la función
    
        del f
    

(101) Cannot delete named expression
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_named_expression.py", line 1
        del (a := 5)
             ^
    SyntaxError: cannot delete named expression
    
        Sólo se pueden borrar nombres de objetos, o elementos en contenedores mutables
        como `list`, `set` o `dict`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_named_expression.py'
    en la ubicación indicada.
    
       1: del (a := 5)
               ^

    No se puede eliminar la expresión con nombre `(a := 5)`.
    Sólo se pueden borrar nombres de objetos, o elementos en contenedores mutables
    como `list`, `set` o `dict`.
    

(102) Delete only names or items
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_names_or_items.py", line 1
        del a += b
              ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_names_or_items.py'
    en la ubicación indicada.
    
       1: del a += b
                ^^

    Sólo se pueden borrar nombres de objetos, o elementos en contenedores mutables
    como `list`, `set` o `dict`.
    

(103) Deleting string literal
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\delete_string_literal.py", line 1
        del "Hello world!"
            ^
    SyntaxError: cannot delete literal
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\delete_string_literal.py'
    en la ubicación indicada.
    
       1: del "Hello world!"
              ^^^^^^^^^^^^^^

    No se puede eliminar el literal `"Hello world!"`.
    Sólo se pueden borrar nombres de objetos, o elementos en contenedores mutables
    como `list`, `set` o `dict`.
    

(104) Value missing in dict - 1
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_1.py", line 1
        a = {1:2, 3}
                   ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste escribir el valor del dict?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\dict_value_missing_1.py'
    en la ubicación indicada.
    
       1: a = {1:2, 3}
                     ^

    Parece que el error se ha producido al escribir un `dict` de Python.
    Tal vez escribió una clave de `dict` sin escribir el valor correspondiente.
    

(105) Value missing in dict - 2
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_2.py", line 2
        a = {1:2, 3:}
                    ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste escribir el valor del dict?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\dict_value_missing_2.py'
    en la ubicación indicada.
    
       2: a = {1:2, 3:}
                      ^

    Parece que el error se produjo mientras escribías un dict de Python.
    Tal vez se olvidó de escribir un valor después de dos puntos.
    

(106) Value missing in dict - 3
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_3.py", line 3
        a = {1:2, 3, 4:5}
                   ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste escribir el valor del dict?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\dict_value_missing_3.py'
    en la ubicación indicada.
    
       3: a = {1:2, 3, 4:5}
                     ^

    Parece que el error se ha producido al escribir un `dict` de Python.
    Tal vez escribió una clave de `dict` sin escribir el valor correspondiente.
    

(107) Value missing in dict - 4
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dict_value_missing_4.py", line 4
        a = {1:2, 3:, 4:5}
                    ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste escribir el valor del dict?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\dict_value_missing_4.py'
    en la ubicación indicada.
    
       4: a = {1:2, 3:, 4:5}
                      ^

    Parece que el error se produjo mientras escribías un dict de Python.
    Tal vez se olvidó de escribir un valor después de dos puntos.
    

(108) Different operators in a row
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\different_operators_in_a_row.py", line 1
        3 */ 4
           ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\different_operators_in_a_row.py'
    en la ubicación indicada.
    
       1: 3 */ 4
            ^^

    No puedes tener estos dos operadores, `*` y `/`,
    siguiéndose el uno al otro. Tal vez usted escribió uno de ellos por error
    o se olvidó de escribir algo entre ellos.
    

(109) Dot followed by parenthesis
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\dot_before_paren.py", line 3
        print(len.('hello'))
                  ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\dot_before_paren.py'
    en la ubicación indicada.
    
       3: print(len.('hello'))
                    ^

    No puede haber un punto `.` seguido de `(`.
    Tal vez haya que sustituir el punto por una coma.
    

(110) Extra token
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\duplicate_token.py", line 1
        print(1 , , 2)
                  ^
    SyntaxError: invalid syntax
    
        ¿Has escrito `,` dos veces por error?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\duplicate_token.py'
    en la ubicación indicada.
    
       1: print(1 , , 2)
                    ^

    Supongo que has escrito `,` dos veces seguidas por error.
    Si ese es el caso, tienes que eliminar la segunda.
    

(111) elif with no matching if
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\elif_not_matching_if.py", line 3
        elif True:
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\elif_not_matching_if.py'
    en la ubicación indicada.
    
       3:    elif True:
             ^^^^

    La palabra clave `elif` no comienza un bloque de código que coincide con
    un bloque `if`, posiblemente porque `elif` no tiene el indentado correcto.
    

(112) else with no matching statement
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\else_no_matching_statement.py", line 3
        else:
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\else_no_matching_statement.py'
    en la ubicación indicada.
    
       3:    else:
             ^^^^

    La palabra clave `else` no comienza un bloque de código que coincide con
    un bloque de código válido, posiblemente porque `else` no está indentado correctamente.
    

(113) Write elif, not else if
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\else_if_instead_of_elif.py", line 5
        else if True:
             ^
    SyntaxError: invalid syntax
    
        Tal vez querías escribir `elif`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\else_if_instead_of_elif.py'
    en la ubicación indicada.
    
       5: else if True:
          ^^^^^^^

    Probablemente querías usar la palabra clave `elif` de Python
    pero en su lugar escribiste `else if`.
    
    

(114) Write elif, not elseif
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\elseif_instead_of_elif.py", line 5
        elseif True:
               ^
    SyntaxError: invalid syntax
    
        Tal vez querías escribir `elif`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\elseif_instead_of_elif.py'
    en la ubicación indicada.
    
       5: elseif True:
          ^^^^^^

    Probablemente querías usar la palabra clave `elif` de Python
    pero en su lugar escribiste `elseif`.
    
    

(115) EOL while scanning string literal
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\eol_string_literal.py", line 3
        alphabet = 'abc
                       ^
    SyntaxError: EOL while scanning string literal
    
        ¿Olvidaste la comilla de cierre?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\eol_string_literal.py'
    en la ubicación indicada.
    
       3: alphabet = 'abc
                      ^^^

    Ha empezado a escribir una cadena con una comilla simple o doble
    pero nunca terminó la cadena con otra comilla en esa línea.
    

(116) Used equal sign instead of colon
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\equal_sign_instead_of_colon.py", line 4
        ages = {'Alice'=22, 'Bob'=24}
                       ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\equal_sign_instead_of_colon.py'
    en la ubicación indicada.
    
       4: ages = {'Alice'=22, 'Bob'=24}
                         ^

    Es posible que haya utilizado un signo igual `=` en lugar de dos puntos `:`
    para asignar valores a las claves de un dict
    antes o en la posición indicada por ^.
    

(117) Parens around multiple exceptions
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\except_multiple_exceptions.py", line 3
        except NameError, ValueError as err:
                        ^
    SyntaxError: invalid syntax
    
        ¿Has olvidado los paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\except_multiple_exceptions.py'
    en la ubicación indicada.
    
       3: except NameError, ValueError as err:
                          ^

    Supongo que querías usar una sentencia `except`
    con múltiples tipos de excepción. Si ese es el caso, debes
    rodearlas con paréntesis.
    

(118) Extra token
-----------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\extra_token.py", line 1
        print(1 / 2) ==
                       ^
    SyntaxError: invalid syntax
    
        ¿Has escrito `==` por error?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\extra_token.py'
    en la ubicación indicada.
    
       1: print(1 / 2) ==
                       ^^

    Supongo que has escrito `==` por error.
    Quitándolo y escribiendo `print(1 / 2)` parece que se solucionara el error.
    

(119) Binary f-string not allowed
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_binary.py", line 1
        greet = bf"Hello {name}"
                  ^
    SyntaxError: invalid syntax
    
        `bf` es un prefijo de cadena no valido.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\f_string_binary.py'
    en la ubicación indicada.
    
       1: greet = bf"Hello {name}"
                    ^^^^^^^^^^^^^^

    Supongo que querías un f-string binario;
    esto no está permitido.
    

(120) f-string: closing } not allowed
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_curly_not_allowed.py", line 1
        f"ab}"
              ^
    SyntaxError: f-string: single '}' is not allowed
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\f_string_curly_not_allowed.py'
    en la ubicación indicada.
    
       1: f"ab}"
          ^^^^^^

    Has escrito una f-string que tiene un `}` sin emparejar.
    Si quieres imprimir un solo `}`, tienes que escribir `}}` en la f-string;
    de lo contrario, es necesario añadir una apertura `{`.
    

(121) f-string: missing closing }
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_expected_curly.py", line 1
        f"{ab"
              ^
    SyntaxError: f-string: expecting '}'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\f_string_expected_curly.py'
    en la ubicación indicada.
    
       1: f"{ab"
          ^^^^^^

    Has escrito una f-string que tiene un `{` sin emparejar.
    Si quieres imprimir un solo `{`, tienes que escribir `{{` en la f-string;
    de lo contrario, es necesario añadir un cierre `}`.
    

(122) f-string: unterminated string
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_unterminated.py", line 4
        print(f"Bob is {age['Bob]} years old.")
                                              ^
    SyntaxError: f-string: unterminated string
    
        Tal vez olvidó una comilla de cierre.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\f_string_unterminated.py'
    en la ubicación indicada.
    
       4: print(f"Bob is {age['Bob]} years old.")
                                                ^

    Dentro de la f-string `f"Bob is {age['Bob]} years old."`, 
    tiene otra cadena, que comienza con una
    comillas simples (') o comillas dobles ("), sin una comilla de cierre que coincida.
    

(123) f-string with backslash
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\f_string_with_backslash.py", line 2
        print(f"{'\n'.join(names)}")
                                   ^
    SyntaxError: f-string expression part cannot include a backslash
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\f_string_with_backslash.py'
    en la ubicación indicada.
    
       2: print(f"{'\n'.join(names)}")
                                     ^

    Ha escrito una f-string cuyo contenido `{...}`
    incluye una barra invertida; esto no está permitido.
    Tal vez pueda sustituir la parte que contiene una barra invertida por
    alguna variable. Por ejemplo, suponga que tiene una f-string como:
    
        f"{... 'hola\n' ...}"
    
    podría escribirla como
    
        hola = 'hola\n'
        f"{... hola ...}"
    

(124) Missing terms in for statement
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\for_missing_terms.py", line 1
        for:
           ^
    SyntaxError: invalid syntax
    
        Un bucle `for` requiere al menos 3 términos más.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\for_missing_terms.py'
    en la ubicación indicada.
    
       1: for:
             ^

    Un bucle `for` es una iteración sobre una secuencia:
    
        for elemento in secuencia:
            ...
    
    

(125) Not a chance!
-------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_braces.py", line 1
        from __future__ import braces
        ^
    SyntaxError: not a chance
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\future_braces.py'
    en la ubicación indicada.
    
       1: from __future__ import braces
          ^^^^

    Sospecho que has escrito `de __future__ import braces` siguiendo
    la sugerencia de otra persona. Esto nunca funcionará.
    
    A diferencia de otros lenguajes de programación, los bloques de código de Python se definen por
    su nivel de indentación, y no por el uso de algunas llaves, como `{...}`.
    

(126) Do not import * from __future__
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_import_star.py", line 1
        from __future__ import *
        ^
    SyntaxError: future feature * is not defined
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\future_import_star.py'
    en la ubicación indicada.
    
       1: from __future__ import *
          ^^^^

    Cuando se utiliza una sentencia `from __future__ import`,
    debe importar características específicas por su nombre.
    
    Las características disponibles son `nested_scopes,
     generators,
     division,
     absolute_import,
     with_statement,
     print_function,
     unicode_literals,
     barry_as_FLUFL,
     generator_stop,
     annotations`.
    

(127) __future__ at beginning
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_must_be_first.py", line 3
        from __future__ import generators
        ^
    SyntaxError: from __future__ imports must occur at the beginning of the file
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\future_must_be_first.py'
    en la ubicación indicada.
    
       3:     from __future__ import generators
              ^^^^

    Una sentencia `from __future__ import` cambia la forma en que Python
    interpreta el código de un archivo.
    Debe aparecer al principio del archivo.

(128) Typo in __future__
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_typo.py", line 1
        from __future__ import divisio
        ^
    SyntaxError: future feature divisio is not defined
    
        ¿Quieres decir `division`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\future_typo.py'
    en la ubicación indicada.
    
       1: from __future__ import divisio
          ^^^^

    En lugar de `divisio`, tal vez querías importar `division`.
    

(129) Unknown feature in __future__
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\future_unknown.py", line 1
        from __future__ import something
        ^
    SyntaxError: future feature something is not defined
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\future_unknown.py'
    en la ubicación indicada.
    
       1: from __future__ import something
          ^^^^

    `something` no es una característica válida del módulo `__future__`.
    
    Las características disponibles son `nested_scopes,
     generators,
     division,
     absolute_import,
     with_statement,
     print_function,
     unicode_literals,
     barry_as_FLUFL,
     generator_stop,
     annotations`.
    

(130) Parenthesis around generator expression
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\generator_expression_parens.py", line 6
        f(x for x in L, 1)
          ^
    SyntaxError: Generator expression must be parenthesized
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\generator_expression_parens.py'
    en la ubicación indicada.
    
       6: f(x for x in L, 1)
            ^

    Estás usando una expresión generadora, algo de la forma
    
        x for x in cosa
    
    Debes añadir paréntesis encerrando esa expresión.
    

(131) Space between names
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\hyphen_instead_of_underscore.py", line 4
        a-b = 2
        ^
    SyntaxError: cannot assign to operator
    
        ¿Quieres decir `a_b`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\hyphen_instead_of_underscore.py'
    en la ubicación indicada.
    
       4: a-b = 2
          ^

    Has escrito una expresión que incluye algunas operaciones matemáticas
    en el lado izquierdo del signo igual que debería ser
    sólo utilizarse para asignar un valor a una variable.
    Tal vez quiso escribir `a_b` en lugar de `a-b`.
    

(132) Missing condition in if statement
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\if_missing_condition.py", line 1
        if:
          ^
    SyntaxError: invalid syntax
    
        Has olvidado añadir una condición.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\if_missing_condition.py'
    en la ubicación indicada.
    
       1: if:
            ^

    Una declaración `if` requiere una condición:
    
        if condición:
            ...
    
    

(133) use j instead of i
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\imaginary_i.py", line 3
        a = 3.0i
               ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `3.0j`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\imaginary_i.py'
    en la ubicación indicada.
    
       3: a = 3.0i
                 ^

    Tal vez pensó que `i` podría ser utilizado para representar
    la raíz cuadrada de `-1`. En Python, el símbolo utilizado para esto es `j`
    y la parte compleja se escribe como `algún_número` inmediatamente
    seguido de `j`, sin espacios intermedios.
    Tal vez haya querido escribir `3.0j`.
    

(134) Import inversion: import X from Y
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\import_from.py", line 3
        import pen from turtle
                   ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `from turtle import pen`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\import_from.py'
    en la ubicación indicada.
    
       3: import pen from turtle
          ^^^^^^     ^^^^

    Has escrito algo como
    
        import pen from turtle
    
    en lugar de
    
        from turtle import pen
    
    

(135) IndentationError: expected an indented block
--------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_1.py", line 4
        pass
        ^
    IndentationError: expected an indented block
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\indentation_error_1.py'
    en la ubicación indicada.
    
       4: pass
          ^^^^

    Se esperaba que la línea `4` identificada anteriormente comenzara un nuevo bloque indentado.
    

(136) IndentationError: unexpected indent
-----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_2.py", line 4
        pass
        ^
    IndentationError: unexpected indent
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\indentation_error_2.py'
    en la ubicación indicada.
    
       4:       pass
                ^^^^

    La línea `4` identificada arriba tiene más indentación de la esperada.
    

(137) IndentationError: unindent does not match ...
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_3.py", line 5
        pass
            ^
    IndentationError: unindent does not match any outer indentation level
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\indentation_error_3.py'
    en la ubicación indicada.
    
       5:     pass
              ^^^^

    La línea `5` identificada arriba tiene menos indentación de la esperada.
    

(138) IndentationError: missing continuation line
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\indentation_error_4.py", line 6
        "c"
        ^
    IndentationError: unexpected indent
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\indentation_error_4.py'
    en la ubicación indicada.
    
       6:          "c"
                   ^^^

    La línea `6` identificada arriba tiene más indentación de la esperada.
    
    Sin embargo, la línea 6, que se identifica como
    consiste en una sola cadena, lo que también ocurre
    de la línea anterior.
    Tal vez haya querido incluir un carácter de continuación, ``,
    al final de la línea 5.
    

(139) Forgot 'o' for octal
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\integer_with_leading_zero_1.py", line 1
        x = 01
             ^
    SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
    
        ¿Querías decir `0o1`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\integer_with_leading_zero_1.py'
    en la ubicación indicada.
    
       1: x = 01
               ^

    Tal vez querías escribir el número octal `0o1`
    y se olvidó de la letra 'o', o tal vez quería escribir
    un número entero decimal y no sabía que no podía empezar con ceros.
    

(140) Integer with leading zeros
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\integer_with_leading_zero_2.py", line 1
        x = 000_123_456
                      ^
    SyntaxError: leading zeros in decimal integer literals are not permitted; use an 0o prefix for octal integers
    
        ¿Querías decir `123_456`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\integer_with_leading_zero_2.py'
    en la ubicación indicada.
    
       1: x = 000_123_456
                 ^^^^^^^^

    Tal vez usted quiso escribir el número entero `123_456`
    y no sabía que no podía empezar con ceros.
    

(141) Invalid character in identifier
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_character_in_identifier.py", line 6
        🤖 = 'Reeborg'
        ^
    SyntaxError: invalid character '🤖' (U+1F916)
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_character_in_identifier.py'
    en la ubicación indicada.
    
       6: 🤖 = 'Reeborg'
          ^

    Python indica que has utilizado el carácter unicode `🤖`
    que no está permitido.
    

(142) Invalid decimal literal - 1
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_decimal_literal1.py", line 1
        a = 1e
             ^
    SyntaxError: invalid syntax
    
        Tal vez olvidó un operador de multiplicación, `1 * e`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_decimal_literal1.py'
    en la ubicación indicada.
    
       1: a = 1e
               ^

    Los nombres válidos no pueden empezar por un número.
    Tal vez olvidó un operador de multiplicación, `1 * e`.
    
    

(143) Invalid encoding
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_encoding.py", line 2, in <module>
        compile(source, filename="example.py", mode="exec")
      File "TESTS:\example.py", line 0
    SyntaxError: encoding problem: utf8 with BOM
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\example.py'
    
    
    La codificación del archivo no era valida.
    

(144) Invalid hexadecimal number
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_hexadecimal.py", line 3
        a = 0x123g4
                 ^
    SyntaxError: invalid syntax
    
        ¿Te has equivocado al escribir un entero hexadecimal?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_hexadecimal.py'
    en la ubicación indicada.
    
       3: a = 0x123g4
                   ^^

    Parece que has utilizado un carácter no válido (`g`) en un número hexadecimal.
    
    Los números hexadecimales son enteros de base 16 que utilizan los símbolos `0` a `9`
    para representar los valores 0 a 9, y las letras `a` a `f` (o `A` a `F`)
    para representar los valores del 10 al 15.
    En Python, los números hexadecimales comienzan con `0x` o `0X`,
    seguido de los caracteres utilizados para representar el valor de ese número entero.
    

(145) Valid names cannot begin with a number
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier.py", line 3
        36abc = 3
          ^
    SyntaxError: invalid syntax
    
        Los nombres válidos no pueden empezar por un número.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_identifier.py'
    en la ubicación indicada.
    
       3: 36abc = 3
            ^^^

    Los nombres válidos no pueden empezar por un número.
    

(146) Valid names cannot begin with a number - 2
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_2.py", line 3
        tau = 2pi
               ^
    SyntaxError: invalid syntax
    
        Tal vez olvidó un operador de multiplicación, `2 * pi`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_identifier_2.py'
    en la ubicación indicada.
    
       3: tau = 2pi
                 ^^

    Los nombres válidos no pueden empezar por un número.
    Tal vez olvidó un operador de multiplicación, `2 * pi`.
    
    

(147) Valid names cannot begin with a number - 3
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_3.py", line 1
        3job  # could be entered in a repl
          ^
    SyntaxError: invalid syntax
    
        Tal vez olvidó un operador de multiplicación, `3 * job`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_identifier_3.py'
    en la ubicación indicada.
    
       1: 3job  # could be entered in a repl
            ^^

    Los nombres válidos no pueden empezar por un número.
    Tal vez olvidó un operador de multiplicación, `3 * job`.
    
    [Nota: `3j` * ob` también sería válido
    ya que `3j` es un número complejo].
    

(148) Valid names cannot begin with a number - 4
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_4.py", line 1
        3job = 1
          ^
    SyntaxError: invalid syntax
    
        Los nombres válidos no pueden empezar por un número.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_identifier_4.py'
    en la ubicación indicada.
    
       1: 3job = 1
            ^^

    Los nombres válidos no pueden empezar por un número.
    

(149) Valid names cannot begin with a number - 5
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_identifier_5.py", line 1
        print(42java)
                 ^
    SyntaxError: invalid syntax
    
        Tal vez olvidó un operador de multiplicación, `42 * java`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_identifier_5.py'
    en la ubicación indicada.
    
       1: print(42java)
                   ^^^

    Los nombres válidos no pueden empezar por un número.
    Tal vez olvidó un operador de multiplicación, `42 * java`.
    
    [Nota: `42j` * ava` también sería válido
    ya que `42j` es un número complejo].
    

(150) Keyword can't be an expression
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_keyword_argument.py", line 7
        a = dict('key'=1)
                 ^
    SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_keyword_argument.py'
    en la ubicación indicada.
    
       7: a = dict('key'=1)
                   ^^^^^

    Es probable que hayas llamado a una función con un argumento con nombre:
    
        unaa_función(inválido=algo) 
    
    donde `inválido` no es un nombre de variable válido en Python
    ya sea porque comienza con un número, o es una cadena
    o contiene un punto, etc.
    

(151) Named argument can't be a Python keyword
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_keyword_argument_2.py", line 7
        a = dict(True=1)
                 ^
    SyntaxError: expression cannot contain assignment, perhaps you meant "=="?
    
        No se puede asignar un valor a `True`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_keyword_argument_2.py'
    en la ubicación indicada.
    
       7: a = dict(True=1)
                   ^^^^

    Es probable que hayas llamado a una función utilizando la palabra clave de Python `True` como argumento:
    
        una_function(True=algo) 
    
    que Python interpretó como un intento de asignar un valor a una palabra clave de Python.
    
    No se puede asignar un valor a `True`.
    

(152) Invalid octal number
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\invalid_octal.py", line 3
        b = 0O1876
               ^
    SyntaxError: invalid digit '8' in octal literal
    
        ¿Te has equivocado al escribir un entero octal?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\invalid_octal.py'
    en la ubicación indicada.
    
       3: b = 0O1876
                 ^^^

    Parece que has utilizado un carácter no válido (`8`) en un número octal.
    
    Los números octales son enteros de base 8 que sólo utilizan los símbolos `0` a `7`
    para representar valores.
    En Python, los números hexadecimales comienzan con `0o` o `0O`,
    (el dígito cero seguido de la letra `o`)
    seguido de los caracteres utilizados para representar el valor de ese número entero.
    

(153) Inverted operators 1
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\inverted_operators.py", line 1
        a =< 3
           ^
    SyntaxError: invalid syntax
    
        ¿Has escrito los operadores en un orden incorrecto?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\inverted_operators.py'
    en la ubicación indicada.
    
       1: a =< 3
            ^^

    Parece que has escrito dos operadores (`=` y `<`)
    en el orden equivocado: `=<` en lugar de `<=`.
    

(154) Inverted operators 2
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\inverted_operators_2.py", line 1
        a =<* 3
           ^
    SyntaxError: invalid syntax
    
        ¿Has escrito los operadores en un orden incorrecto?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\inverted_operators_2.py'
    en la ubicación indicada.
    
       1: a =<* 3
            ^^

    Parece que has escrito dos operadores (`=` y `<`)
    en el orden equivocado: `=<` en lugar de `<=`.
    
    Sin embargo, hacer tal cambio no corregiría
    todos los errores de sintaxis en el código que escribiste.
    

(155) Iteration variable unpacking in comprehension
---------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\iteration_unpacking_in_comprehension.py", line 1
        [*x for x in xs]
         ^
    SyntaxError: iterable unpacking cannot be used in comprehension
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\iteration_unpacking_in_comprehension.py'
    en la ubicación indicada.
    
       1: [*x for x in xs]
           ^

    No se puede utilizar el operador `*` para descomponer la variable de iteración
    en una comprensión.
    
    La siguiente declaración no tiene ningún error de sintaxis:
    
        [x for x in xs]
    

(156) Keyword arg only once in function call
--------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\keyword_arg_repeated.py", line 4
        f(ad=1, ad=2)
                ^
    SyntaxError: keyword argument repeated: ad
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\keyword_arg_repeated.py'
    en la ubicación indicada.
    
       4: f(ad=1, ad=2)
                  ^^

    Ha llamado a una función repitiendo el mismo argumento de palabra clave (`ad`).
    Cada argumento de palabra clave debe aparecer sólo una vez en una llamada a una función.
    

(157) Keyword as attribute
--------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\keyword_as_attribute.py", line 12
        a.pass = 2
          ^
    SyntaxError: invalid syntax
    
        `pass` no puede utilizarse como atributo.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\keyword_as_attribute.py'
    en la ubicación indicada.
    
       12: a.pass = 2
             ^^^^

    No se puede utilizar la palabra clave de Python `pass` como atributo.
    
    

(158) lambda with parentheses around arguments
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\lambda_with_parens.py", line 2
        x = lambda (a, b): a + b
                   ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\lambda_with_parens.py'
    en la ubicación indicada.
    
       2: x = lambda (a, b): a + b
                     ^

    `lambda` no permite paréntesis alrededor de sus argumentos.
    Esto estaba permitido en Python 2 pero no en Python 3.
    

(159) lambda with tuple as argument
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\lambda_with_tuple_argument.py", line 2
        x = lambda a, (b, c): a + b + b
                      ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\lambda_with_tuple_argument.py'
    en la ubicación indicada.
    
       2: x = lambda a, (b, c): a + b + b
                        ^

    No se pueden tener tuplas explícitas como argumentos.
    Asigne cualquier tupla a un parámetro y desempaque
    dentro del cuerpo de la función.
    

(160) Assign to literal in for loop
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\literal_in_for_loop.py", line 1
        for "char" in "word":
            ^
    SyntaxError: cannot assign to literal
    
        Sólo se pueden asignar objetos a identificadores (nombres de variables).
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\literal_in_for_loop.py'
    en la ubicación indicada.
    
       1: for "char" in "word":
              ^^^^^^

    Un bucle for debe tener la forma
    
        for ... in secuencia:
    
    donde `...` debe contener sólo identificadores (nombres de variables)
    y no literales como `"char"`.
    

(161) IndentationError/SyntaxError depending on version
-------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_code_block.py", line 4
    IndentationError: expected an indented block
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_code_block.py'
    en la ubicación indicada.
    
       3: for i in range(10):
    -->4: 
                            ^

    Se esperaba que la línea `4` identificada anteriormente comenzara un nuevo bloque indentado.
    

(162) IndentationError/SyntaxError depending on version - 2
-----------------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_code_block_2.py", line 6
    IndentationError: expected an indented block
    
    Un `IndentationError` ocurre cuando una línea de código dada no está
    con la indentación (alineada verticalmente con otras líneas) que se espera.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_code_block_2.py'
    
    
       3: for i in "test":
       4: 

    Se esperaba que la línea `6` identificada anteriormente comenzara un nuevo bloque indentado.
    

(163) Missing colon - if
------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_colon_if.py", line 3
        if True
               ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste los dos puntos `:`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_colon_if.py'
    en la ubicación indicada.
    
       3: if True
                 ^

    Ha escrito una sentencia que empieza por
    if` pero se olvidó de añadir los dos puntos `:` al final.
    
    

(164) Missing colon - while
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_colon_while.py", line 3
        while True  # a comment
                    ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste los dos puntos `:`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_colon_while.py'
    en la ubicación indicada.
    
       3: while True  # a comment
                    ^

    Has escrito un bucle `while` pero
    olvidó añadir dos puntos `:` al final
    
    

(165) Missing comma in a dict
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_dict.py", line 5
        'c': 3,
        ^
    SyntaxError: invalid syntax
    
        ¿Te has olvidado de una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_comma_in_dict.py'
    en la ubicación indicada.
    
       3: a = {'a': 1,
    -->4:      'b': 2
                    ^-->
    -->5:      'c': 3,
               ^^^
       6: }

    Python indica que el error es causado por `'c'` escrito inmediatamente después de `2`.
    It is possible that you forgot a comma between items in a set or dict
    at the position indicated by ^.
    Tal vez quiso decir
    
        a = {'a': 1,
             'b': 2, 
                   ^
             'c': 3,
        }
    
    .

(166) Missing comma between strings in a dict
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_dict_2.py", line 4
        'c': '3',
           ^
    SyntaxError: invalid syntax
    
        ¿Te has olvidado de una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_comma_in_dict_2.py'
    en la ubicación indicada.
    
       2: a = {'a': '1',
       3:      'b': '2'
    -->4:      'c': '3',
                  ^
       5: }

    Supongo que has olvidado una coma entre dos cadenas
    al definir un dict.
    
    ```
    a = {'a': '1',
         'b': '2',
                 ^
         'c': '3',
    }
    ```

(167) Missing comma in a list
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_list.py", line 3
        a = [1, 2  3]
                   ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste algo entre `2` y `3`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_comma_in_list.py'
    en la ubicación indicada.
    
       3: a = [1, 2  3]
                  ^^^^

    Python indica que el error es causado por `3` escrito inmediatamente después de `2`.
    It is possible that you forgot a comma between items in a list
    at the position indicated by ^.
    Tal vez usted quería insertar un operador como `+, -, *`
    entre `2` y `3`.
    Las siguientes líneas de código no causarían ningún `SyntaxError`:
    
        a = [1, 2,   3]
        a = [1, 2 +   3]
        a = [1, 2 -   3]
        a = [1, 2 *   3]
    Nota: estas son sólo algunas de las opciones posibles y que
    algunas de ellas pueden generar otros tipos de excepciones.
    

(168) Missing comma in a set
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_set.py", line 3
        a = {1, 2  3}
                   ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste algo entre `2` y `3`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_comma_in_set.py'
    en la ubicación indicada.
    
       3: a = {1, 2  3}
                  ^^^^

    Python indica que el error es causado por `3` escrito inmediatamente después de `2`.
    It is possible that you forgot a comma between items in a set or dict
    at the position indicated by ^.
    Tal vez usted quería insertar un operador como `+, -, *`
    entre `2` y `3`.
    Las siguientes líneas de código no causarían ningún `SyntaxError`:
    
        a = {1, 2,   3}
        a = {1, 2 +   3}
        a = {1, 2 -   3}
        a = {1, 2 *   3}
    Nota: estas son sólo algunas de las opciones posibles y que
    algunas de ellas pueden generar otros tipos de excepciones.
    

(169) Missing comma in a tuple
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_comma_in_tuple.py", line 3
        a = (1, 2  3)
                   ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste algo entre `2` y `3`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_comma_in_tuple.py'
    en la ubicación indicada.
    
       3: a = (1, 2  3)
                  ^^^^

    Python indica que el error es causado por `3` escrito inmediatamente después de `2`.
    It is possible that you forgot a comma between items in a tuple, 
    or between function arguments, 
    at the position indicated by ^.
    Tal vez usted quería insertar un operador como `+, -, *`
    entre `2` y `3`.
    Las siguientes líneas de código no causarían ningún `SyntaxError`:
    
        a = (1, 2,   3)
        a = (1, 2 +   3)
        a = (1, 2 -   3)
        a = (1, 2 *   3)
    Nota: estas son sólo algunas de las opciones posibles y que
    algunas de ellas pueden generar otros tipos de excepciones.
    

(170) Missing parenthesis for range
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\missing_parens_for_range.py", line 1
        for i in range 3:
                       ^
    SyntaxError: invalid syntax
    
        ¿Te has olvidado de escribir paréntesis?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\missing_parens_for_range.py'
    en la ubicación indicada.
    
       1: for i in range 3:
                         ^

    Parece que te has olvidado de usar paréntesis con `range`.
    Tal vez quisiste decir:
    
        for i in range( 3):
    
    

(171) Misspelled Python keyword
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\misspelled_keyword.py", line 2
        is i in range(3):
        ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `if i in range(3):`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\misspelled_keyword.py'
    en la ubicación indicada.
    
       2: is i in range(3):
          ^^

    Tal vez quiso escribir `if` y cometió un error.
    La línea correcta podría ser `if i in range(3):`
    

(172) Name is global and nonlocal
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\name_is_global_and_nonlocal.py", line 7
        global xy
        ^
    SyntaxError: name 'xy' is nonlocal and global
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\name_is_global_and_nonlocal.py'
    en la ubicación indicada.
    
       7:     global xy
              ^^^^^^

    Has declarado que xy` es una variable global y no local.
    Una variable puede ser global o no local, pero no ambas cosas a la vez.
    

(173) Name is parameter and nonlocal
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\name_is_param_and_nonlocal.py", line 5
        nonlocal x
        ^
    SyntaxError: name 'x' is parameter and nonlocal
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\name_is_param_and_nonlocal.py'
    en la ubicación indicada.
    
       5:     nonlocal x
              ^^^^^^^^

    Ha utilizado `x` como parámetro de una función
    antes de declararla también como variable no local:
    x` no puede ser ambas cosas a la vez.
    

(174) nonlocal variable not found
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\no_binding_for_nonlocal.py", line 5
        nonlocal ab
        ^
    SyntaxError: no binding for nonlocal 'ab' found
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\no_binding_for_nonlocal.py'
    en la ubicación indicada.
    
       5:     nonlocal ab
              ^^^^^^^^

    Ha declarado la variable `ab` como una variable
    variable no local, pero no se puede encontrar.
    

(175) nonlocal variable not found at module level
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\nonlocal_at_module.py", line 4
        nonlocal cd
        ^
    SyntaxError: nonlocal declaration not allowed at module level
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\nonlocal_at_module.py'
    en la ubicación indicada.
    
       4: nonlocal cd
          ^^^^^^^^

    Ha utilizado la palabra clave nonlocal a nivel de módulo.
    La palabra clave nonlocal se refiere a una variable dentro de una función
    con un valor fuera de esa función.

(176) Same operator twice in a row
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\operator_twice_in_a_row.py", line 1
        4****5
           ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\operator_twice_in_a_row.py'
    en la ubicación indicada.
    
       1: 4****5
           ^^^^

    No se puede escribir el mismo operador, `**`, dos veces seguidas.
    Tal vez usted escribió uno de ellos por error
    o se olvidó de escribir algo entre ellos.
    

(177) Using pip from interpreter
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\pip_install_1.py", line 2
        pip install friendly
            ^
    SyntaxError: invalid syntax
    
        Pip no puede ser utilizado en un intérprete de Python.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\pip_install_1.py'
    en la ubicación indicada.
    
       2: pip install friendly
              ^^^^^^^

    Parece que está intentando utilizar pip para instalar un módulo.
    `pip` es un comando que debe ejecutarse en una terminal,
    no desde un intérprete de Python.
    

(178) Using pip from interpreter 2
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\pip_install_2.py", line 2
        python -m pip install friendly
                  ^
    SyntaxError: invalid syntax
    
        Pip no puede ser utilizado en un intérprete de Python.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\pip_install_2.py'
    en la ubicación indicada.
    
       2: python -m pip install friendly
                    ^^^

    Parece que está intentando utilizar pip para instalar un módulo.
    `pip` es un comando que debe ejecutarse en una terminal,
    no desde un intérprete de Python.
    

(179) print is a function
-------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function.py", line 2
        print 'hello'
              ^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print('hello')?
    
        ¿Quieres decir `print('hello')`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_is_a_function.py'
    en la ubicación indicada.
    
       2: print 'hello'
                ^^^^^^^

    Tal vez tenga que escribir
    
         print('hello')
    
    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función por lo que es necesario usar paréntesis para llamarla.
    

(180) print is a function 2
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_2.py", line 2
        print len('hello')
              ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `print(len('hello'))`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_is_a_function_2.py'
    en la ubicación indicada.
    
       2: print len('hello')
                ^^^

    Tal vez tenga que escribir
    
         print(len('hello'))
    
    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función por lo que es necesario usar paréntesis para llamarla.
    

(181) print is a function 3
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_3.py", line 1
        print """This is a very long string which results in a very long error message."""
              ^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print("""This is a very long string which results in a very long error message.""")?
    
        ¿Quieres decir `print(...)`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_is_a_function_3.py'
    en la ubicación indicada.
    
       1: print """This is a very long string which results in a very long error message."""
                ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

    Tal vez tenga que escribir
    
         print(...)
    
    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función por lo que es necesario usar paréntesis para llamarla.
    

(182) print is a function 4
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_4.py", line 2
        print len("""This is a long string
              ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `print(...)`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_is_a_function_4.py'
    en la ubicación indicada.
    
    -->2: print len("""This is a long string
                ^^^
       3:           that spans multiple lines.""")

    Tal vez tenga que escribir
    
         print(...)
    
    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función por lo que es necesario usar paréntesis para llamarla.
    

(183) print is a function 5
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_is_a_function_5.py", line 2
        print len('This is a long string that fits on a single line.')
              ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `print(...)`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_is_a_function_5.py'
    en la ubicación indicada.
    
       2: print len('This is a long string that fits on a single line.')
                ^^^

    Tal vez tenga que escribir
    
         print(...)
    
    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función por lo que es necesario usar paréntesis para llamarla.
    

(184) print is a function 6
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_non_paren_non_string1.py", line 1
        print hello world!
              ^
    SyntaxError: Missing parentheses in call to 'print'. Did you mean print(hello world!)?
    
        ¿Quieres decir `print(...)`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_non_paren_non_string1.py'
    en la ubicación indicada.
    
       1: print hello world!
                ^^^^^

    Tal vez tenga que escribir
    
         print(...)
    
    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función por lo que es necesario usar paréntesis para llamarla.
    Tenga en cuenta que los argumentos de `print` deben estar separados por comas.
    

(185) print is a function 7
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\print_non_paren_non_string2.py", line 1
        print len("hello") hello
              ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `print(...)`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\print_non_paren_non_string2.py'
    en la ubicación indicada.
    
       1: print len("hello") hello
                ^^^

    Tal vez tenga que escribir
    
         print(...)
    
    En la versión anterior de Python, `print` era una palabra clave.
    Ahora, `print` es una función por lo que es necesario usar paréntesis para llamarla.
    Tenga en cuenta que los argumentos de `print` deben estar separados por comas.
    

(186) Calling python from interpreter
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\python_interpreter.py", line 1
        python -i friendly
                  ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\python_interpreter.py'
    en la ubicación indicada.
    
       1: python -i friendly
                    ^^^^^^^^

    Supongo que estás intentando utilizar Python para ejecutar un programa.
    Debe hacerlo desde un terminal y no desde un intérprete de Python.
    

(187) problem with assigning a variable to Python
-------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\python_not_interpreter.py", line 1
        python = a b
                   ^
    SyntaxError: invalid syntax
    
        ¿Olvidaste algo entre `a` y `b`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\python_not_interpreter.py'
    en la ubicación indicada.
    
       1: python = a b
                   ^^^

    Python indica que el error es causado por `b` escrito inmediatamente después de `a`.
    Tal vez usted quería insertar un operador como `+; -; *; ,`
    entre `a` y `b`.
    Las siguientes líneas de código no causarían ningún `SyntaxError`:
    
        python = a +  b
        python = a -  b
        python = a *  b
        python = a,  b
    Nota: estas son sólo algunas de las opciones posibles y que
    algunas de ellas pueden generar otros tipos de excepciones.
    

(188) Quote inside a string
---------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\quote_inside_string.py", line 3
        message = 'I don't mind.'
                         ^
    SyntaxError: invalid syntax
    
        Perhaps you forgot to escape a quote character.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\quote_inside_string.py'
    en la ubicación indicada.
    
       3: message = 'I don't mind.'
                           ^

    I suspect that you were trying to use a quote character inside a string
    that was enclosed in quotes of the same kind.
    Perhaps you should have escaped the inner quote character:
    
        message = 'I don\'t mind.'
                        ^^
    

(189) Raising multiple exceptions
---------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\raise_multiple_exceptions.py", line 2
        raise X, Y
               ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\raise_multiple_exceptions.py'
    en la ubicación indicada.
    
       2: raise X, Y
                 ^

    Parece que estás intentando lanzar una excepción utilizando la sintaxis de Python 2.
    

(190) Cannot use return outside function
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\return_outside_function.py", line 3
        return
        ^
    SyntaxError: 'return' outside function
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\return_outside_function.py'
    en la ubicación indicada.
    
       3: return
          ^^^^^^

    Sólo se puede utilizar una sentencia `return` dentro de una función o método.
    

(191) Semicolon instead of colon
--------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_colon.py", line 1
        if True;  # A comment
               ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir dos puntos?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\semi_colon_instead_of_colon.py'
    en la ubicación indicada.
    
       1: if True;  # A comment
                 ^

    Has escrito un punto y coma, `;`, donde se esperaba dos puntos.
    

(192) Semicolon instead of comma - 1
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_comma_1.py", line 1
        a = [1, 2; 3]
                 ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir una coma?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\semi_colon_instead_of_comma_1.py'
    en la ubicación indicada.
    
       1: a = [1, 2; 3]
                   ^

    Has escrito un punto y coma, `;`, donde se esperaba una coma.
    

(193) Semicolon instead of commas - 2
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_comma_2.py", line 1
        a = [1; 2; 3]
              ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir comas?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\semi_colon_instead_of_comma_2.py'
    en la ubicación indicada.
    
       1: a = [1; 2; 3]
                ^

    Has escrito punto y coma, `;`, donde se esperaban comas.
    

(194) Semicolon instead of commas - 3
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\semi_colon_instead_of_comma_3.py", line 1
        a = [1; 2; 3];
              ^
    SyntaxError: invalid syntax
    
        ¿Querías escribir comas?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\semi_colon_instead_of_comma_3.py'
    en la ubicación indicada.
    
       1: a = [1; 2; 3];
                ^

    Has escrito punto y coma, `;`, donde se esperaban comas.
    

(195) Code block inside comprehension
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\should_be_comprehension.py", line 2
        for i in 1, 2, 3:
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\should_be_comprehension.py'
    en la ubicación indicada.
    
       1: a = [
    -->2:     for i in 1, 2, 3:
              ^^^
       3:         i**2
       4: ]

    Tal vez usted escribió una declaración que comienza un bloque de código
    destinado a formar parte de una comprensión de lista.
    No se pueden tener bloques de código separados dentro de las comprensiones de listas.
    
    Si esta explicación es incorrecta, por favor informe de este caso.
    

(196) Single = instead of double == with if
-------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\single_equal_with_if.py", line 3
        if i % 2 = 0:
                 ^
    SyntaxError: invalid syntax
    
        Tal vez necesitabas `==` en lugar de `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\single_equal_with_if.py'
    en la ubicación indicada.
    
       3:     if i % 2 = 0:
                       ^

    Es probable que hayas utilizado un operador de asignación `=` en lugar de un operador de igualdad `==`.
    La siguiente sentencia no contendría un error de sintaxis:
    
        if i % 2 == 0:

(197) Single = instead of double == with elif
---------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\single_equal_with_elif.py", line 5
        elif i % 2 = 0:
                   ^
    SyntaxError: invalid syntax
    
        Tal vez necesitabas `==` en lugar de `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\single_equal_with_elif.py'
    en la ubicación indicada.
    
       5:     elif i % 2 = 0:
                         ^

    Es probable que hayas utilizado un operador de asignación `=` en lugar de un operador de igualdad `==`.
    La siguiente sentencia no contendría un error de sintaxis:
    
        elif i % 2 == 0:

(198) Single = instead of double == with while
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\single_equal_with_while.py", line 4
        while a = 1:
                ^
    SyntaxError: invalid syntax
    
        Tal vez necesitabas `==` o `:=` en lugar de `=`.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\single_equal_with_while.py'
    en la ubicación indicada.
    
       4: while a = 1:
                  ^

    Has utilizado un operador de asignación `=`; quizás querías utilizar 
    un operador de igualdad, `==`, o el operador de asignación aumentado `:=`.
    

(199) Space between operators 1
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\space_between_operators_1.py", line 1
        a = 2 * * 5
                ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\space_between_operators_1.py'
    en la ubicación indicada.
    
       1: a = 2 * * 5
                ^ ^

    No se puede escribir el mismo operador, `*`, dos veces seguidas.
    Tal vez usted escribió uno de ellos por error
    o se olvidó de escribir algo entre ellos.
    O quizás incluyó un espacio por error entre los dos operadores
    y quiso escribir `**` como un solo operador.
    

(200) Space between operators 2
-------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\space_between_operators_2.py", line 1
        a / = b
            ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\space_between_operators_2.py'
    en la ubicación indicada.
    
       1: a / = b
            ^ ^

    No puedes tener estos dos operadores, `/` y `=`,
    siguiéndose el uno al otro. Tal vez usted escribió uno de ellos por error
    o se olvidó de escribir algo entre ellos.
    O quizás incluyó un espacio por error entre los dos operadores
    y quiso escribir `/=` como un solo operador.
    

(201) Space in variable name
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\space_in_variable_name.py", line 1
        my name = André
           ^
    SyntaxError: invalid syntax
    
        ¿Quieres decir `my_name`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\space_in_variable_name.py'
    en la ubicación indicada.
    
       1: my name = André
             ^^^^

    No puede haber espacios en los identificadores (nombres de variables).
    ¿Quizás se refería a `my_name`?
    

(202) Wrong target for star assignment
--------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\star_assignment_target.py", line 1
        *a = 1
        ^
    SyntaxError: starred assignment target must be in a list or tuple
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\star_assignment_target.py'
    en la ubicación indicada.
    
       1: *a = 1
          ^

    Una asignación estrella debe ser de la forma:
    
        ... *nombre = lista_o_tupla
    
    

(203) Too many nested blocks
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\too_many_nested_blocks.py", line 22
        while 22:
        ^
    SyntaxError: too many statically nested blocks
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\too_many_nested_blocks.py'
    en la ubicación indicada.
    
       22:                      while 22:
                                ^^^^^

    Tu código es demasiado complejo para Python:
    necesitas reducir el número de bloques de código con sangría
    contenidos dentro de otros bloques de código.
    

(204) Too many nested parentheses.
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\too_many_parentheses.py", line 4
        ((((((((((((((((((((((((((((((((((
                                         ^
    SyntaxError: too many nested parentheses
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\too_many_parentheses.py'
    en la ubicación indicada.
    
       1: ((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((
       2:     ((((((((((((((((((((((((((((((((((((((((((((((((((((((((
       3:         (((((((((((((((((((((((((((((((((((((((((((((((((((
    -->4:             ((((((((((((((((((((((((((((((((((
                                                       ^
       5:                                              ))))))))))))))))))))))))))))))))))))))))))))))))))
       6:         )))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))
       7:     ))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))

    Tu código es demasiado complejo para Python:
    necesitas reducir el número de paréntesis
    contenidos dentro de otros paréntesis.
    

(205) Trailing comma in import statement
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\trailing_comma_in_import.py", line 2
        from math import sin, cos,
                                  ^
    SyntaxError: trailing comma not allowed without surrounding parentheses
    
        ¿Escribiste una coma por error?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\trailing_comma_in_import.py'
    en la ubicación indicada.
    
       2: from math import sin, cos,
                                   ^

    Python indica que hay que rodear una expresión
    que termina con una coma por medio de paréntesis.
    Sin embargo, si eliminas la última coma, no habrá ningún error de sintaxis.
    Quizás quisiste escribir
    
    `from math import sin, cos`
    

(206) Triple-equal sign
-----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\triple_equal.py", line 3
        x = y === z
                ^
    SyntaxError: invalid syntax
    
        ¿Querías usar `is` en lugar de `===`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\triple_equal.py'
    en la ubicación indicada.
    
       3: x = y === z
                ^^^

    Has escrito tres signos de igualdad seguidos, lo que está permitido en algunos
    lenguajes de programación, pero no en Python. Para comprobar si dos objetos
    son iguales, usa dos signos de igualdad, `==`; para ver si dos nombres representan
    exactamente el mismo objeto, utiliza el operador `is`.
    

(207) Unclosed bracket
----------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_bracket.py", line 7
        print(foo())
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unclosed_bracket.py'
    en la ubicación indicada.
    
       5:     return [1, 2, 3
       6: 
    -->7: print(foo())
          ^^^^^
       8: 

    El corchete `[` de apertura en la línea 5 no está cerrado.
    
        5:     return [1, 2, 3
                      ^
    

(208) Unclosed parenthesis - 1
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_1.py", line 3
        if x == 1:
                 ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unclosed_paren_1.py'
    en la ubicación indicada.
    
       2: x = int('1'
    -->3: if x == 1:
                   ^
       4:     print('yes')
       5: 

    El paréntesis `(` de apertura en la línea 2 no está cerrado.
    
        2: x = int('1'
                  ^
    

(209) Unclosed parenthesis - 2
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_2.py", line 3
        d = a*a
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unclosed_paren_2.py'
    en la ubicación indicada.
    
       2: a = (b+c
    -->3: d = a*a
          ^
       4: 

    El paréntesis `(` de apertura en la línea 2 no está cerrado.
    
        2: a = (b+c
               ^
    

(210) Unclosed parenthesis - 3
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_3.py", line 7
        if 2:
            ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unclosed_paren_3.py'
    en la ubicación indicada.
    
       5:         print(((123))
       6: 
    -->7: if 2:
              ^
       8:     print(123))

    El paréntesis `(` de apertura en la línea 5 no está cerrado.
    
        5:         print(((123))
                        ^
    
    Si esto es incorrecto, por favor reporte este caso.
    

(211) Unclosed parenthesis - 4
------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unclosed_paren_4.py", line 4
        def test():
        ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unclosed_paren_4.py'
    en la ubicación indicada.
    
       2: print('hello'
       3: 
    -->4: def test():
          ^^^

    El paréntesis `(` de apertura en la línea 2 no está cerrado.
    
        2: print('hello'
                ^
    

(212) Content passed continuation line character
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unexpected_after_continuation_character.py", line 5
        print(\t)
               ^
    SyntaxError: unexpected character after line continuation character
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unexpected_after_continuation_character.py'
    en la ubicación indicada.
    
       5: print(\t)
                 ^

    Está utilizando el carácter de continuación `\` fuera de una cadena
    y es seguido por algún otro carácter(es).
    Supongo que has olvidado encerrar algún contenido en una cadena.
    

(213) Unexpected EOF while parsing
----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unexpected_eof.py", line 8
    SyntaxError: unexpected EOF while parsing
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unexpected_eof.py'
    en la ubicación indicada.
    
       5:     return [1, 2, 3,
       6: 
       7: print(foo())
    -->8: 
                     ^

    Python nos dice que llegó al final del archivo
    y que esperaba más contenido.
    
    Intentaré dar un poco más de información.
    
    El corchete `[` de apertura en la línea 5 no está cerrado.
    
        5:     return [1, 2, 3,
                      ^
    

(214) Invalid character (unicode fraction 3/4)
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_fraction.py", line 1
        a = ¾  # 3/4
            ^
    SyntaxError: invalid character '¾' (U+00BE)
    
        ¿Quieres decir `3/4`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_fraction.py'
    en la ubicación indicada.
    
       1: a = ¾  # 3/4
              ^

    ¿Usaste copiar y pegar?
    Python indica que has utilizado el carácter unicode `¾`
    que no está permitido.
    Has utilizado el carácter unicode ¾ que se conoce como
    VULGAR FRACTION THREE QUARTERS
    Sospecho que querías escribir la fracción `3/4` en su lugar.
    

(215) Invalid character (unicode fraction 1/2)
----------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_fraction2.py", line 1
        a = 1½  # 1 1/2
             ^
    SyntaxError: invalid character '½' (U+00BD)
    
        ¿Quieres decir `1/2`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_fraction2.py'
    en la ubicación indicada.
    
       1: a = 1½  # 1 1/2
               ^

    ¿Usaste copiar y pegar?
    Python indica que has utilizado el carácter unicode `½`
    que no está permitido.
    Has utilizado el carácter unicode ½ que se conoce como
    VULGAR FRACTION ONE HALF
    Sospecho que querías escribir la fracción `1/2` en su lugar.
    

(216) Invalid character (unicode fraction slash)
------------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_fraction3.py", line 1
        a = 22 ⁄ 7
               ^
    SyntaxError: invalid character '⁄' (U+2044)
    
        Did you mean to use the division operator, `/`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_fraction3.py'
    en la ubicación indicada.
    
       1: a = 22 ⁄ 7
                 ^

    ¿Usaste copiar y pegar?
    Python indica que has utilizado el carácter unicode `⁄`
    que no está permitido.
    Sospecho que has utilizado el carácter unicode conocido como
    'FRACTION SLASH', que es similar a
    pero es diferente del operador de división `/`.
    

(217) Invalid character (unicode quote)
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote.py", line 3
        a = « hello »
            ^
    SyntaxError: invalid character '«' (U+00AB)
    
        ¿Quería utilizar un carácter de comillas normal, `'` o `"`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_quote.py'
    en la ubicación indicada.
    
       3: a = « hello »
              ^

    ¿Usaste copiar y pegar?
    Python indica que has utilizado el carácter unicode `«`
    que no está permitido.
    Sospecho que has utilizado una comilla unicode de fantasía
    cuyo nombre es LEFT-POINTING DOUBLE ANGLE QUOTATION MARK
    en lugar de una comilla simple o doble normal para una cadena.
    

(218) Invalid character (unicode quote2)
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote2.py", line 2
        a = ‹ hello ›
            ^
    SyntaxError: invalid character '‹' (U+2039)
    
        ¿Quería utilizar un carácter de comillas normal, `'` o `"`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_quote2.py'
    en la ubicación indicada.
    
       2: a = ‹ hello ›
              ^

    ¿Usaste copiar y pegar?
    Python indica que has utilizado el carácter unicode `‹`
    que no está permitido.
    Sospecho que has utilizado una comilla unicode de fantasía
    cuyo nombre es SINGLE LEFT-POINTING ANGLE QUOTATION MARK
    en lugar de una comilla simple o doble normal para una cadena.
    

(219) Invalid character (mistaken <)
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote3.py", line 2
        if a ‹ hello:
             ^
    SyntaxError: invalid character '‹' (U+2039)
    
        ¿Quería utilizar un carácter de comillas normal, `'` o `"`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_quote3.py'
    en la ubicación indicada.
    
       2: if a ‹ hello:
               ^

    ¿Usaste copiar y pegar?
    Python indica que has utilizado el carácter unicode `‹`
    que no está permitido.
    Sospecho que has utilizado una comilla unicode de fantasía
    cuyo nombre es SINGLE LEFT-POINTING ANGLE QUOTATION MARK
    en lugar de una comilla simple o doble normal para una cadena.
    O tal vez, quisiste escribir un signo menos que, `<`.
    

(220) Invalid character (mistaken >)
------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote4.py", line 2
        if a › hello:
             ^
    SyntaxError: invalid character '›' (U+203A)
    
        ¿Quería utilizar un carácter de comillas normal, `'` o `"`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_quote4.py'
    en la ubicación indicada.
    
       2: if a › hello:
               ^

    ¿Usaste copiar y pegar?
    Python indica que has utilizado el carácter unicode `›`
    que no está permitido.
    Sospecho que has utilizado una comilla unicode de fantasía
    cuyo nombre es SINGLE RIGHT-POINTING ANGLE QUOTATION MARK
    en lugar de una comilla simple o doble normal para una cadena.
    O tal vez, quisiste escribir un signo mayor que, `>`.
    

(221) Invalid character (mistaken comma)
----------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_quote5.py", line 2
        a = (1‚ 2)
              ^
    SyntaxError: invalid character '‚' (U+201A)
    
        ¿Quería utilizar un carácter de comillas normal, `'` o `"`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_quote5.py'
    en la ubicación indicada.
    
       2: a = (1‚ 2)
                ^

    ¿Usaste copiar y pegar?
    Python indica que has utilizado el carácter unicode `‚`
    que no está permitido.
    Sospecho que has utilizado una comilla unicode de fantasía
    cuyo nombre es SINGLE LOW-9 QUOTATION MARK
    en lugar de una comilla simple o doble normal para una cadena.
    O tal vez, quisiste escribir una coma.
    

(222) Unmatched closing curly bracket
-------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_curly.py", line 6
        3, 4,}}
              ^
    SyntaxError: unmatched '}'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unmatched_closing_curly.py'
    en la ubicación indicada.
    
       4: a = {1,
       5:     2,
    -->6:     3, 4,}}
                    ^

    El llave `}` de cierre de la línea 6 no coincide con nada.
    

(223) Unmatched closing parenthesis
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_paren.py", line 6
        3, 4,))
              ^
    SyntaxError: unmatched ')'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unmatched_closing_paren.py'
    en la ubicación indicada.
    
       4: a = (1,
       5:     2,
    -->6:     3, 4,))
                    ^

    El paréntesis `)` de cierre de la línea 6 no coincide con nada.
    

(224) Mismatched brackets - 1
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_bracket_1.py", line 2
        x = (1, 2, 3]
                    ^
    SyntaxError: closing parenthesis ']' does not match opening parenthesis '('
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unmatched_closing_bracket_1.py'
    en la ubicación indicada.
    
       2: x = (1, 2, 3]
              ^       ^

    El corchete `]` de cierre de la línea 2 no coincide con el paréntesis `(` de apertura de la línea 2.
    
        2: x = (1, 2, 3]
               ^       ^
    

(225) Mismatched brackets - 2
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_bracket_2.py", line 4
        3]
         ^
    SyntaxError: closing parenthesis ']' does not match opening parenthesis '(' on line 2
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unmatched_closing_bracket_2.py'
    en la ubicación indicada.
    
    -->2: x = (1,
              ^
       3:      2,
    -->4:      3]
                ^

    El corchete `]` de cierre de la línea 4 no coincide con el paréntesis `(` de apertura de la línea 2.
    
        2: x = (1,
               ^
        4:      3]
                 ^
    

(226) Unmatched brackets - 3
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unmatched_closing_bracket_3.py", line 3
        3]]
          ^
    SyntaxError: unmatched ']'
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unmatched_closing_bracket_3.py'
    en la ubicación indicada.
    
       1: x = [1,
       2:      2,
    -->3:      3]]
                 ^

    El corchete `]` de cierre de la línea 3 no coincide con nada.
    

(227) Unpacking a dict value
----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unpacking_dict_value.py", line 1
        {'a': *(1, 2, 3)}
              ^
    SyntaxError: invalid syntax
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unpacking_dict_value.py'
    en la ubicación indicada.
    
       1: {'a': *(1, 2, 3)}
              ^ ^

    No puedes tener estos dos operadores, `:` y `*`,
    siguiéndose el uno al otro.
    Parece que usted trató de usar una expresión estelar como un valor de dict;
    esto no está permitido.
    
    La siguiente declaración no tiene ningún error de sintaxis:
    
        {'a': (1, 2, 3)}
    

(228) Unterminated triple quoted string
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unterminated_triple_quote_string.py", line 4
        some_text = """In a land
    populated by weird animals,
    a ...
                                                                   ^
    SyntaxError: EOF while scanning triple-quoted string literal
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unterminated_triple_quote_string.py'
    
    
       1: some_text = """In a land
       2: 

    Empezó a escribir una cadena con comillas triples pero nunca escribió
    las comillas triples necesarias para terminar la cadena.
    

(229) TabError
--------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\tab_error.py", line 7
        pass
        ^
    TabError: inconsistent use of tabs and spaces in indentation
    
    Un `TabError` indica que ha utilizado tanto espacios
    y caracteres de tabulación para indentar tu código.
    Esto no está permitido en Python.
    Indentar tu código significa tener un bloque de código alineado verticalmente
    insertando espacios o caracteres de tabulación al principio de las líneas.
    La recomendación de Python es utilizar siempre espacios para sangrar el código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\tab_error.py'
    en la ubicación indicada.
    
       7: 	pass
           ^^^^

(230) EOL unescaped backslash
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unescaped_backslash.py", line 1
        a = "abc\"
                  ^
    SyntaxError: EOL while scanning string literal
    
        ¿Olvidaste escapar un carácter de barra invertida?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unescaped_backslash.py'
    en la ubicación indicada.
    
       1: a = "abc\"
                   ^

    Ha empezado a escribir una cadena con una comilla simple o doble
    pero nunca terminó la cadena con otra comilla en esa línea.
    Tal vez quiso escribir el carácter de la barra diagonal inversa, `\`
    como el último carácter de la cadena y se olvidó de que
    que necesitaba escapar escribiendo dos `\` seguidas.
    

(231) Using the backquote character
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\use_backquote.py", line 3
        a = `1`
            ^
    SyntaxError: invalid syntax
    
        No debe utilizar el carácter de retrocomilla.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\use_backquote.py'
    en la ubicación indicada.
    
       3: a = `1`
              ^

    Estás utilizando el carácter de comillas.
    O bien has querido escribir una comilla simple, ', o has copiado el código de Python 2;
    en este último caso, utiliza la función `repr(x)`.

(232) unicode error
-------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\unicode_error.py", line 1
        path = "c:\Users\andre"
                               ^
    SyntaxError: (unicode error) 'unicodeescape' codec can't decode bytes in position 2-3: truncated \UXXXXXXXX escape
    
        Tal vez sea necesario duplicar las barras invertidas.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\unicode_error.py'
    en la ubicación indicada.
    
       1: path = "c:\Users\andre"
                 ^^^^^^^^^^^^^^^^

    Sospecho que has escrito una cadena que contiene
    un carácter de barra invertida, `\` seguida de una `U` mayúscula
    y algunos caracteres más.
    Python probablemente interpretó esto como el comienzo de
    lo que se conoce como una secuencia de escape para caracteres especiales unicode.
    Para resolver el problema, escriba la llamada 'cadena cruda'
    añadiendo la letra `r` como prefijo en
    delante de la cadena, o reemplazar `\U`, por `\\U`.
    

(233) Walrus instead of equal
-----------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\walrus_instead_of_equal.py", line 1
        a := 3
              ^
    SyntaxError: invalid syntax
    
        ¿Querías usar `=`?
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\walrus_instead_of_equal.py'
    en la ubicación indicada.
    
       1: a := 3
               ^

    Se utiliza el operador de asignación aumentado `:=` donde
    el operador de asignación normal `=` era necesario.
    

(234) Missing condition in while statement
------------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\while_missing_condition.py", line 1
        while:
             ^
    SyntaxError: invalid syntax
    
        Has olvidado añadir una condición.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\while_missing_condition.py'
    en la ubicación indicada.
    
       1: while:
               ^

    Un bucle `while` requiere una condición:
    
        while condición:
            ...
    
    

(235) Would-be variable declaration
-----------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\would_be_type_declaration_1.py", line 3
        if var start := begin < end:
               ^
    SyntaxError: invalid syntax
    
        No es necesario declarar variables en Python.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\would_be_type_declaration_1.py'
    en la ubicación indicada.
    
       3: if var start := begin < end:
                 ^^^^^

    Parece que estabas intentando declarar que `start` era
    una variable utilizando la palabra `var`.
    Si eliminas `var`, tendrás una declaración válida de Python.
    

(236) Would-be variable declaration - 2
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\would_be_type_declaration_2.py", line 5
        var start := begin < end
            ^
    SyntaxError: invalid syntax
    
        No es necesario declarar variables en Python.
        
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\would_be_type_declaration_2.py'
    en la ubicación indicada.
    
       4: if (
    -->5:     var start := begin < end
                  ^^^^^
       6:    ):

    Parece que estabas intentando declarar que `start` era
    una variable utilizando la palabra `var`.
    Si eliminas `var`, tendrás una declaración válida de Python.
    

(237) Cannot use yield outside function
---------------------------------------

.. code-block:: none


    Traceback (most recent call last):
      File "TESTS:\trb_syntax_common.py", line 49, in create_tracebacks
        __import__(name)
      File "TESTS:\syntax\yield_outside_function.py", line 1
        (yield i) == 3
         ^
    SyntaxError: 'yield' outside function
    
    Un `SyntaxError` ocurre cuando Python no puede entender tu código.
    
    Python no pudo entender el código en el archivo
    'TESTS:\syntax\yield_outside_function.py'
    en la ubicación indicada.
    
       1: (yield i) == 3
           ^^^^^

    Sólo se puede utilizar una sentencia `yield` dentro de una función.
    
